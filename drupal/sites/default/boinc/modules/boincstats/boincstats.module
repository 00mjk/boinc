<?php
// $Id$

/**
  * @file
  * Enable BOINC charting features for statistics
  */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Includes that provide supporting functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Hooks into core modules
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
  * Implementation of hook_menu().
  */
function boincstats_menu() {
  //require_boinc('util');
  $items['charts/user'] = array(
    'page callback' => 'boincstats_get_user_stats_chart',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['charts/project'] = array(
    'page callback' => 'boincstats_get_project_stats_chart',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Page callbacks from hook_menu()
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 
/**
  * User stats chart menu callback
  * Called to generate the daily credit status chart for a user (dashboard)
  */
function boincstats_get_user_stats_chart($cpid = null, $chart_size = 'medium') {
  
  // pChart library inclusions
  module_load_include('php', 'boincstats', 'includes/pchart/class/pData.class');
  module_load_include('php', 'boincstats', 'includes/pchart/class/pDraw.class');
  module_load_include('php', 'boincstats', 'includes/pchart/class/pImage.class');
  module_load_include('php', 'boincstats', 'includes/pchart/class/pCache.class');
  
  // Get CPID and fetch stats for data to plot
  // [TODO] Set this stuff in site config!
  $stats_server = 'stats.gridrepublic.org';
  $stats_rpc = 'rpc/get_user_credit_history_by_project.php';
  $project_id = 2;
  $cache_name = null;
  $dataset_size = 0;
  $chart_height = 0;
  $chart_width = 0;
  $backdrop_color = array();
  $draw_x_lines = FALSE;
  $label_x_axis = FALSE;
  
  switch($chart_size) {
  case 'small':
    $cache_name = "{$cpid}_small";
    $dataset_size = 30;
    $chart_height = 80;
    $chart_width = 266;
    $backdrop_color = array('R'=>209,'G'=>209,'B'=>209);
    $draw_x_lines = FALSE;
    $label_x_axis = FALSE;
    break;
  case 'medium':
  default:
    $cache_name = $cpid;
    $dataset_size = 60;
    $chart_height = 155;
    $chart_width = 589;
    $draw_x_lines = TRUE;
    $label_x_axis = TRUE;
  }
  
  // Initialize the cache object and flush stale images
  $myCache = new pCache(array('CacheFolder' => realpath('.') . '/sites/default/files/cache'));
  $myCache->removeOlderThan(60*60*24);
  
  if ($myCache->isInCache($cache_name)) {
    $myCache->strokeFromCache($cache_name);
  }
  else {
    // Construct query string
    $get = array(
      'cpid' => $cpid,
      'projectid' => $project_id
    );
    $args = array();
    foreach ($get as $arg => $value) $args[] = "{$arg}=" . rawurlencode($value);
    $query = '?' . implode('&', $args);
    
    // Load XML from RPC
    $stats_xml = simplexml_load_file("http://{$stats_server}/{$stats_rpc}{$query}");
    
    // Create and populate the pData object
    $MyData = new pData();
    
    // Initialize dataset
    $dataset = array();
    if ($stats_xml) {
      $credit = null;
      for ($i = 0, $j = 31; $j <= 91; $i++, $j++) {
        $day = "day_{$j}";
        $credit[$i] = isset($stats_xml->total_credit_history_last_91_days->$day) ? (int) $stats_xml->total_credit_history_last_91_days->$day : 0;
        $dataset[$i] = ($i) ? ($credit[$i] - $credit[$i-1]) : 0;
      }
    }
    else {
      for ($i = 0; $i <= $dataset_size; $i++) $dataset[] = 0;
    }
    
    $MyData->addPoints($dataset, 'series1');
    $MyData->setPalette('series1',array('R' => 94,'G' => 190,'B' => 225));
    $MyData->setAxisPosition(0,AXIS_POSITION_RIGHT);
    
    // Create the pChart object
    $myPicture = new pImage($chart_width, $chart_height, $MyData);

    // Turn on Antialiasing
    $myPicture->Antialias = true;

    // Set the default font
    //$myPicture->setFontProperties(array('FontName'=>'../fonts/pf_arma_five.ttf','FontSize'=>6));

    // Define the chart area
    $myPicture->setGraphArea(0, 3, $chart_width, $chart_height);
    if ($backdrop_color) {
      $myPicture->drawFilledRectangle(0, 0, $chart_width, $chart_height, $backdrop_color);
    }
    
    // Draw the scale
    $scaleSettings = array(
      'Mode' => SCALE_MODE_START0,
      'DrawYLines' => false,
      'DrawXLines' => $draw_x_lines,
      'GridTicks' => 2,
      'LabelSkip' => 9,
      'SkippedAxisAlpha' => 0,
      'SkippedInnerTickWidth' => 0,
      'SkippedOuterTickWidth' => 0,
      'AxisAlpha' => 0,
      'InnerTickWidth' => 0,
      'OuterTickWidth' => 0,
      'XMargin' => 1,
      'YMargin' => 0,
      'Floating' => TRUE,
      'GridR' => 200,
      'GridG' => 200,
      'GridB' => 200,
      'DrawSubTicks' => false,
      'CycleBackground' => false
    );
    $myPicture->setFontProperties(array('FontSize' => 10));
    $myPicture->drawScale($scaleSettings);
    
    if ($label_x_axis) {
      for ($i = 5; $i >= 0; $i--) {
        $label = ($i) ? -10*$i : 'Today';
        $myPicture->drawText(589-587*($i/6)-5, 2, $label, array('Align' => TEXT_ALIGN_TOPRIGHT));
      }
    }

    // Draw the area chart
    $myPicture->drawAreaChart(array('ForceTransparency' => 100));
    
    // Write the chart to the cache
    $myCache->writeToCache($cache_name, $myPicture);
    
    // Render the picture (choose the best way)
    //$myPicture->autoOutput('pictures/example.drawAreaChart.simple.png');
    $myPicture->stroke();
  }
}

/**
 * Project stats chart menu callback
 * Called to generate the daily credit status chart for the whole project
 */
function boincstats_get_project_stats_chart() {
  // pChart library inclusions
  module_load_include('php', 'boincstats', 'includes/pchart/class/pData.class');
  module_load_include('php', 'boincstats', 'includes/pchart/class/pDraw.class');
  module_load_include('php', 'boincstats', 'includes/pchart/class/pImage.class');
  module_load_include('php', 'boincstats', 'includes/pchart/class/pCache.class');
  
  $stats_xml = boincstats_get_project_stats();
  
  // Create and populate the pData object
  $MyData = new pData();
  
  // Initialize the cache object and flush stale images
  $myCache = new pCache(array('CacheFolder' => realpath('.') . '/sites/default/files/cache'));
  $myCache->removeOlderThan(60*60*24);
  
  if ($myCache->isInCache('project chart')) {
    $myCache->strokeFromCache('project chart');
  }
  else {
    // Initialize dataset
    $dataset = array();
    if ($stats_xml) {
      $credit = null;
      for ($i = 0, $j = 31; $j <= 91; $i++, $j++) {
        $day = "day_{$j}";
        $credit[$i] = isset($stats_xml->$day) ? (int) $stats_xml->$day : 0;
        $dataset[$i] = ($i) ? ($credit[$i] - $credit[$i-1]) : 0;
      }
    }
    else {
      for ($i = 0; $i <= 30; $i++) $dataset[] = 0;
    }
    
    $MyData->addPoints($dataset, 'series1');
    $MyData->setPalette('series1',array('R' => 94,'G' => 190,'B' => 225));
    $MyData->setAxisPosition(0,AXIS_POSITION_RIGHT);

    // Create the pChart object
    $myPicture = new pImage(266,80,$MyData);

    // Turn on Antialiasing
    $myPicture->Antialias = true;

    // Set the default font
    //$myPicture->setFontProperties(array('FontName' => '../fonts/pf_arma_five.ttf','FontSize' => 6));

    // Define the chart area
    $myPicture->setGraphArea(0,0,266,80);
    $myPicture->drawFilledRectangle(0,0,266,80,array('R'=>209,'G'=>209,'B'=>209));

    // Draw the scale
    $scaleSettings = array(
      'Mode' => SCALE_MODE_START0,
      'DrawYLines' => false,
      'DrawXLines' => false,
      'GridTicks' => 2,
      'LabelSkip' => 9,
      'SkippedAxisAlpha' => 0,
      'SkippedInnerTickWidth' => 0,
      'SkippedOuterTickWidth' => 0,
      'AxisAlpha' => 0,
      'InnerTickWidth' => 0,
      'OuterTickWidth' => 0,
      'XMargin' => 1,
      'YMargin' => 0,
      'Floating' => TRUE,
      'GridR' => 200,
      'GridG' => 200,
      'GridB' => 200,
      'DrawSubTicks' => false,
      'CycleBackground' => false
    );
    $myPicture->setFontProperties(array('FontSize' => 10));
    $myPicture->drawScale($scaleSettings);
    
    /*for ($i = 5; $i >= 0; $i--) {
      $label = ($i) ? -10*$i : 'Today';
      $myPicture->drawText(598-596*($i/6)-5, 2, $label, array('Align' => TEXT_ALIGN_TOPRIGHT));
    }*/

    // Draw the area chart */
    $myPicture->drawAreaChart(array('ForceTransparency' => 100));
    
    // Write the chart to the cache
    $myCache->writeToCache('project chart', $myPicture);

    // Render the picture (choose the best way)
    //$myPicture->autoOutput('pictures/example.drawAreaChart.simple.png');
    $myPicture->stroke();
  }
}

/*
 *
 */
function boincstats_get_project_stats() {

  // [TODO] Set this stuff in site config!
  $stats_server = 'stats.gridrepublic.org';
  $stats_rpc = 'rpc/get_project_tc_history.php';
  $project_id = 2;
  
  // Construct query string
  $get = array(
    'projectid' => $project_id
  );
  $args = array();
  foreach ($get as $arg => $value) $args[] = "{$arg}=" . rawurlencode($value);
  $query = '?' . implode('&', $args);
  
  // Load XML from RPC
  return simplexml_load_file("http://{$stats_server}/{$stats_rpc}{$query}");
}

/*
 *
 */
function boincstats_get_project_total_credit() {
  $stats_xml = boincstats_get_project_stats();
  return isset($stats_xml->day_91) ? (int) $stats_xml->day_91 : 0;
}

/*
 *
 */
function boincstats_get_project_avg_credit() {
  $stats_xml = boincstats_get_project_stats();
  $dataset = array();
  if ($stats_xml) {
    $daily_values = null;
    $dail_totals = null;
    for ($i = 61; $i <= 91; $i++) {
      $day = "day_{$i}";
      $daily_totals[$i] = isset($stats_xml->$day) ? (int) $stats_xml->$day : 0;
      if ($i == 61) continue;
      $daily_values[$i] = ($i) ? ($daily_totals[$i] - $daily_totals[$i-1]) : 0;
    }
  }
  return (count($daily_values)) ? array_sum($daily_values) / count($daily_values) : 0;
}


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Data access support functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

function boincstats_get_user_stats_overview($uid) {
  global $base_path;
  $account = user_load($uid);
  $output = '';
  $output .= '<div class="stats"><label>' . t('Total credit: ') . '</label><span>' . number_format($account->boincuser_total_credit) . '</span></div>' . "\n";
  $output .= '<div class="stats"><label>' . t('Avg credit: ') . '</label><span>' . number_format($account->boincuser_expavg_credit) . '</span></div>' . "\n";
  //$output .= '<div class="stats"><a href="#">' . t('Pending credits') . '</a></div>' . "\n";
  $output .= '<div class="chart"><img src="' . $base_path . 'charts/user/' . $account->boincuser_cpid . '/small" /></div>' . "\n";
  
  return $output;
}

function boincstats_get_project_stats_overview() {
  global $base_path;
  $output = '';
  $output .= '<div class="stats"><label>' . t('Total credit: ') . '</label><span>' . number_format(boincstats_get_project_total_credit()) . '</span></div>' . "\n";
  $output .= '<div class="stats"><label>' . t('Avg credit: ') . '</label><span>' . number_format(boincstats_get_project_avg_credit()) . '</span></div>' . "\n";
  //$output .= '<div class="stats"><a href="#">' . t('Pending credits') . '</a></div>' . "\n";
  $output .= '<div class="chart"><img src="' . $base_path . 'charts/project" /></div>' . "\n";
  
  return $output;
}
 