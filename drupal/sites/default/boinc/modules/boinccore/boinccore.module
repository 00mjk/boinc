<?php
// $Id$

/**
 * @file
 * Provides common BOINC module functionality.
 *
 * In general, any custom feature or function required independently by
 * multiple BOINC modules should be in this module.
 */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Includes that provide supporting functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

//require_once('includes/boinccore.forms.inc');
//require_once('includes/boinccore.helpers.inc');


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Hooks into core modules
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 
/**
 * Implementation of hook_menu(); determine the actions that correspond
 * with defined URL paths
 */
function boinccore_menu() {
  $items['node_control'] = array(
    'page callback' => 'boinccore_node_control',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['comment_control'] = array(
    'page callback' => 'boinccore_comment_control',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK
  );
  $items['user_control'] = array(
    'page callback' => 'boinccore_user_control',
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter()
 */
function boinccore_menu_alter(&$items) {
  // If using Solr search and not core Drupal search, disable core search!
  if (module_exists('global_search_solr') AND !module_exists('global_search')) {
    // Add permission to user search.
    $check = array(
      'search/node/%menu_tail',
      'search/user/%menu_tail',
      'user/autocomplete'
    );
    foreach ($check as $path) {
      if (isset($items[$path])) {
        $items[$path]['access callback'] = FALSE;
      }
    }
  }
}

function boinccore_link_alter(&$links, $node, $comment = NULL) {
//echo '<pre>' . print_r($links, true) . '</pre>';
  foreach ($links as $module => $link) {
    if (strstr($module, 'ignore_user')) {
      // Remove the ignore user link
      unset($links[$module]);
    }
  }
}

function boinccore_link($type, $object, $teaser = FALSE) {
  $links = array();
  if ($type == 'comment') {
    if (user_access('administer comments')) {
      $comment_control = "comment_control/{$object->cid}";
      if ($object->status == 0) {
        $links['hide'] = array(
          'title' => t('Hide'),
          'href' => "{$comment_control}/hide",
          'attributes' => array(
            'title' => t('Hide this comment')
          )
        );
      }
      else {
        $links['unhide'] = array(
          'title' => t('Unhide'),
          'href' => "{$comment_control}/unhide",
          'attributes' => array(
            'title' => t('Unhide this comment')
          )
        );
      }
      $reply_count = db_result(db_query('
        SELECT COUNT(*) FROM comments WHERE pid = %d',
        $object->cid
      ));
      if ($reply_count == 0) {
        $links['convert'] = array(
          'title' => t('Convert'),
          'href' => "{$comment_control}/convert",
          'attributes' => array(
            'title' => t('Convert this comment to a new topic')
          ) 
        );
      }
    }
  }
  return $links;
}

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Page callbacks from hook_menu()
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
 * Controller for handling simple node status configuration.
 * Allow published, sticky, and comment status to be set on nodes by direct
 * link rather than through the node form.
 */
function boinccore_node_control($nid = NULL, $action = NULL) {
  if ((!$nid OR !$node = node_load($nid)) OR
      ($node->type == 'forum' AND !user_access('edit any forum topic')) OR
      ($node->type != 'forum' AND !user_access('administer nodes'))) {
    // What are you even doing here...
    return FALSE;
  }
  switch ($action) {
  case 'unhide':
    node_publish_action($node);
    break;
  case 'hide':
    node_unpublish_action($node);
    break;
  case 'sticky':
    node_make_sticky_action($node);
    break;
  case 'unsticky':
    node_make_unsticky_action($node);
    break;
  case 'lock':
    $node->comment = 1;
    watchdog('action', 'Locked comments on @type %title.', array(
      '@type' => node_get_types('name', $node), '%title' => $node->title));
    break;
  case 'unlock':
    $node->comment = 2;
    watchdog('action', 'Unlocked comments on @type %title.', array(
      '@type' => node_get_types('name', $node), '%title' => $node->title));
    break;
  default:
  }
  node_save($node);
  drupal_goto("node/{$nid}");
}

/**
 * Controller for handling simple comment status configuration.
 * Allow published status to be set on comments by direct link rather than
 * through the comment edit form.
 */
function boinccore_comment_control($cid = NULL, $action = NULL) {
  if (!$cid OR !$comment = _comment_load($cid)) {
    // What are you even doing here...
    return FALSE;
  }
  $return_path = "node/{$comment->nid}";
  $return_anchor = "comment-{$cid}";
  switch ($action) {
  case 'unhide':
    comment_publish_action($comment);
    break;
  case 'hide':
    comment_unpublish_action($comment);
    break;
  case 'convert':
    $node = new stdClass();
    $node->name = $comment->subject;
    $node->title = $node->name;
    $node->body = $comment->comment;
    $node->type = 'forum';
    $node->created = $comment->timestamp;
    $node->changed = $node->created;
    $node->promote = 0; // Display on front page?
    $node->sticky = 0;  // Display top of page?
    $node->status = 1;   // Published?
    $node->comment = 2;
    //$node->language = 'en';
    $node->uid = $comment->uid;
    
    // Preselect the parent's taxonomy ID
    $parent_node = node_load($comment->nid);
    $node->tid = $parent_node->tid;
 
    if (filter_access($comment->format)) {
      $node->format = $comment->format;
    }
    
    // Save the new node
    node_save($node);
    taxonomy_node_save($node, array($node->tid));
    
    // Delete the comment
    module_load_include('inc', 'comment', 'comment.admin');
    _comment_delete_thread($comment);
    
    $return_path = "node/{$node->nid}";
    $return_anchor = NULL;
    break;
  default:
  }
  drupal_goto($return_path, NULL, $return_anchor);
}

/**
 * Controller for handling simple user account status configuration.
 * Allow community membership status to be set for users by direct link rather
 * than through the user account info form.
 */
function boinccore_user_control($uid = NULL, $action = NULL) {
  if (!$uid OR !$account = user_load($uid)) {
    // What are you even doing here...
    return FALSE;
  }
  switch ($action) {
  case 'ban':
    $community_role = array_search('community member', user_roles(true));
    if (isset($account->roles[$community_role])) {
      unset($account->roles[$community_role]);
      user_save($account, array('roles' => $account->roles));
    }
    break;
  case 'lift-ban':
    $community_role = array_search('community member', user_roles(true));
    if (!isset($account->roles[$community_role])) {
      $account->roles[$community_role] = 'community member';
      user_save($account, array('roles' => $account->roles));
    }
    break;
  default:
  }
  drupal_goto("user/{$account->uid}");
}
