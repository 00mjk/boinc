<?php
// $Id$

/**
 * @file
 * Provides common BOINC module functionality.
 *
 * In general, any custom feature or function required independently by
 * multiple BOINC modules should be in this module.
 */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Includes that provide supporting functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

//require_once('includes/boinccore.forms.inc');
//require_once('includes/boinccore.helpers.inc');


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Hooks into core modules
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 
/**
 * Implementation of hook_menu(); determine the actions that correspond
 * with defined URL paths
 */
function boinccore_menu() {
  $items['node_control'] = array(
    'page callback' => 'boinccore_node_control',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['comment_control'] = array(
    'page callback' => 'boinccore_comment_control',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK
  );
  $items['goto'] = array(
    'page callback' => 'boinccore_url_pagination_handler',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['admin/boinc/community'] = array(
    'title' => 'Community',
    'description' => 'Global settings for community interaction.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boinccore_admin_community'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'boinccore.admin.inc'
  );
  $items['admin/boinc/standard-content-generator'] = array(
    'title' => 'Standard page generator',
    'description' => 'Regenerate standard site content (e.g. Help and About Us
      pages).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boinccore_admin_default_content'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'boinccore.admin.inc'
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter()
 */
function boinccore_menu_alter(&$items) {
  // If using Solr search and not core Drupal search, disable core search!
  if (module_exists('global_search_solr') AND !module_exists('global_search')) {
    // Add permission to user search.
    $check = array(
      'search/node/%menu_tail',
      'search/user/%menu_tail',
      'user/autocomplete'
    );
    foreach ($check as $path) {
      if (isset($items[$path])) {
        $items[$path]['access callback'] = FALSE;
      }
    }
  }
}

/**
 * Implementation of hook_enable()
 */
function boinccore_enable() {
  // Automatically try to establish standard site content when this module is
  // enabled (e.g. Help and About Us pages)
  boinccore_admin_default_content_generate();
}

/**
 * Implementation of hook_form_alter()
 */
function boinccore_form_alter(&$form, $form_state, $form_id) {
  global $user;
  $account = user_load($user->uid);
  switch ($form_id) {
  // Comment form
  case 'comment_form':
    $user_image = boincuser_get_user_profile_image($user->uid);
    $user_info = '<div class="user">';
    if ($user_image['image']['filepath']) {
      $user_info .= '  <div class="picture">';
      $user_info .= theme('imagefield_image', $user_image['image'], $user_image['alt'], $user_image['alt'], array(), false);
      $user_info .= '  </div>';
    }
    $user_info .= '  <div class="name">' . theme('username', $account) . '</div>';
    if ($account->uid) {
      //$user_info .= '  <div class="join-date">Joined: ' . date('j M y', $account->created) . '</div>';
      //$user_info .= '  <div class="post-count">Posts: ' . $account->post_count . '</div>';
      //$user_info .= '  <div class="credit">Credit: ' . $account->boincuser_total_credit . '</div>';
      //$user_info .= '  <div class="rac">RAC: ' . $account->boincuser_expavg_credit . '</div>';
    }
    $user_info .= '</div>';
    array_unshift($form, array(
      'user_info' => array(
        '#value' => $user_info,
      ),
      'comment_form_prefix' => array(
        '#value' => '<div class="form-body">',
      ),
    ));
    $form['comment_form_suffix'] = array(
      '#value' => '</div>',
    );
    
    module_load_include('inc', 'bbcode', 'bbcode-help');
    $form['bbcode_help'] = array(
      '#title' => t('BBcode help'),
      '#type' => 'fieldset',
      '#attributes' => array(
        'class' => 'bbcode_help',
      ),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      'content' => array(
        '#value' => _bbcode_filter_tip(),
      ),
    );
    
    // If a specific comment is being referenced, go back to it on cancel
    if ($comment_ref = $form['pid']['#value']) {
      $cancel_url = "goto/comment/{$comment_ref}";
    }
    else {
      $cancel_url = "node/{$form['nid']['#value']}";
    }
    
    // Wrap action buttons for styling consistency
    $form['form control tabs prefix'] = array(
      '#value' => '<ul class="form-control tab-list">',
      '#weight' => 1001,
    );
    $form['submit']['#prefix'] = '<li class="first tab">';
    $form['submit']['#value'] = t('Post comment');
    $form['submit']['#suffix'] = '</li>';
    $form['submit']['#weight'] = 1002;
    $form['preview']['#prefix'] = '<li class="tab">';
    $form['preview']['#suffix'] = '</li>';
    $form['preview']['#weight'] = 1003;
    $form['cancel'] = array(
      '#value' => '<li class="tab">' . l(t('Cancel'), $cancel_url) . '</li>',
      '#weight' => 1004,
    );
    $form['form control tabs suffix'] = array(
      '#value' => '</ul>',
      '#weight' => 1010,
    );
    
    // Remove redundant name field
    unset($form['_author']);
    
    break;
  default:
  }
}

function boinccore_link_alter(&$links, $node, $comment = NULL) {
  //echo '<pre>' . print_r($links, true) . '</pre>';
  foreach ($links as $module => $link) {
    if (strstr($module, 'ignore_user')) {
      // Remove the ignore user link
      unset($links[$module]);
    }
  }
}

/*
function boinccore_link($type, $object, $teaser = FALSE) {
  // Add custom links with this hook
  $links = array();
  if ($type == 'comment') {
    if (user_access('administer comments')) {
      $comment_control = "comment_control/{$object->cid}";
      if ($object->status == 0) {
        $links['hide'] = array(
          'title' => t('Hide'),
          'href' => "{$comment_control}/hide",
          'attributes' => array(
            'title' => t('Hide this comment')
          )
        );
      }
    }
  }
  return $links;
}
// */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Page callbacks from hook_menu()
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
 * Controller for handling simple node status configuration.
 * Allow published, sticky, and comment status to be set on nodes by direct
 * link rather than through the node form.
 */
function boinccore_node_control($nid = NULL, $action = NULL) {
  if ((!$nid OR !$node = node_load($nid)) OR
      ($node->type == 'forum' AND !user_access('edit any forum topic')) OR
      ($node->type != 'forum' AND !user_access('administer nodes'))) {
    // What are you even doing here...
    return FALSE;
  }
  switch ($action) {
  case 'unhide':
    node_publish_action($node);
    break;
  case 'hide':
    node_unpublish_action($node);
    break;
  case 'sticky':
    node_make_sticky_action($node);
    break;
  case 'unsticky':
    node_make_unsticky_action($node);
    break;
  case 'lock':
    $node->comment = 1;
    watchdog('action', 'Locked comments on @type %title.', array(
      '@type' => node_get_types('name', $node), '%title' => $node->title));
    break;
  case 'unlock':
    $node->comment = 2;
    watchdog('action', 'Unlocked comments on @type %title.', array(
      '@type' => node_get_types('name', $node), '%title' => $node->title));
    break;
  default:
  }
  node_save($node);
  drupal_goto("node/{$nid}");
}

/**
 * Controller for handling simple comment status configuration.
 * Allow published status to be set on comments by direct link rather than
 * through the comment edit form.
 */
function boinccore_comment_control($cid = NULL, $action = NULL) {
  if (!$cid OR !$comment = _comment_load($cid)) {
    // What are you even doing here...
    return FALSE;
  }
  $return_path = "node/{$comment->nid}";
  $return_anchor = "comment-{$cid}";
  switch ($action) {
  case 'unhide':
    comment_publish_action($comment);
    break;
  case 'hide':
    comment_unpublish_action($comment);
    break;
  case 'convert':
    $node = new stdClass();
    $node->name = $comment->subject;
    $node->title = $node->name;
    $node->body = $comment->comment;
    $node->type = 'forum';
    $node->created = $comment->timestamp;
    $node->changed = $node->created;
    $node->promote = 0; // Display on front page?
    $node->sticky = 0;  // Display top of page?
    $node->status = 1;   // Published?
    $node->comment = 2;
    //$node->language = 'en';
    $node->uid = $comment->uid;
    
    // Preselect the parent's taxonomy ID
    $parent_node = node_load($comment->nid);
    $node->tid = $parent_node->tid;
 
    if (filter_access($comment->format)) {
      $node->format = $comment->format;
    }
    
    // Save the new node
    node_save($node);
    taxonomy_node_save($node, array($node->tid));
    
    // Delete the comment
    module_load_include('inc', 'comment', 'comment.admin');
    _comment_delete_thread($comment);
    
    $return_path = "node/{$node->nid}";
    $return_anchor = NULL;
    break;
  default:
  }
  drupal_goto($return_path, NULL, $return_anchor);
}

/**
 * Controller for handling direct linking to paginated content.
 * Because pagination settings are user configurable, it is impossible to know
 * in advance on which page a given comment will appear. Link instead to this
 * controller function, which can compute the page based on the user's settings
 */
function boinccore_url_pagination_handler($type, $object_id) {
  global $user;
  $path = NULL;
  $params = array();
  switch ($type) {
  case 'comment':
    $object = _comment_load($object_id);
    if ($object) {
      $path = "node/{$object->nid}";
      // Get the sort order
      $gt_lt = '<';
      $comment_order = (isset($user->sort)) ? $user->sort : variable_get('comment_default_order_forum', 2);
      if ($comment_order == COMMENT_ORDER_NEWEST_FIRST) {
        $gt_lt = '>';
      }
      // See how many comments there are before (or after) this comment...
      $comment_offset = db_result(db_query('
        SELECT COUNT(*) FROM {comments}
        WHERE nid = %d AND status = 0 AND timestamp %s %d',
        $object->nid, $gt_lt, $object->timestamp));
      if ($comment_offset) {
        // Get the number of comments per page
        if ($user->comments_per_page) {
          $comments_per_page = $user->comments_per_page;
        }
        else {
          $node = node_load($comment->nid);
          $comments_per_page = variable_get(
            "comment_default_per_page_{$node->type}", 50
          );
        }
        // Determine which page to display in order to show the given comment
        $page = floor($comment_offset / $comments_per_page);
        if ($page) {
          $params = array('page' => $page);
        }
      }
    }
    break;
  default:
  }
  if ($path) {
    drupal_goto($path, $params, "comment-{$object->cid}");
  }
  else {
    drupal_not_found();
  }
}

/*
 * Fetch an array of all countries 
 */
function boinccore_get_country_list() {
  return array(
    'None' => 'None',
    'International' => 'International',
    'Afghanistan' => 'Afghanistan',
    'Albania' => 'Albania',
    'Algeria' => 'Algeria',
    'American Samoa' => 'American Samoa',
    'Andorra' => 'Andorra',
    'Angola' => 'Angola',
    'Anguilla' => 'Anguilla',
    'Antarctica' => 'Antarctica',
    'Antigua and Barbuda' => 'Antigua and Barbuda',
    'Argentina' => 'Argentina',
    'Armenia' => 'Armenia',
    'Aruba' => 'Aruba',
    'Australia' => 'Australia',
    'Austria' => 'Austria',
    'Azerbaijan' => 'Azerbaijan',
    'Bahamas, The' => 'Bahamas, The',
    'Bahrain' => 'Bahrain',
    'Bangladesh' => 'Bangladesh',
    'Barbados' => 'Barbados',
    'Belarus' => 'Belarus',
    'Belgium' => 'Belgium',
    'Belize' => 'Belize',
    'Benin' => 'Benin',
    'Bermuda' => 'Bermuda',
    'Bhutan' => 'Bhutan',
    'Bolivia' => 'Bolivia',
    'Bosnia and Herzegovina' => 'Bosnia and Herzegovina',
    'Botswana' => 'Botswana',
    'Brazil' => 'Brazil',
    'British Virgin Islands' => 'British Virgin Islands',
    'Brunei' => 'Brunei',
    'Bulgaria' => 'Bulgaria',
    'Burkina Faso' => 'Burkina Faso',
    'Burma' => 'Burma',
    'Burundi' => 'Burundi',
    'Cambodia' => 'Cambodia',
    'Cameroon' => 'Cameroon',
    'Canada' => 'Canada',
    'Cape Verde' => 'Cape Verde',
    'Cayman Islands' => 'Cayman Islands',
    'Central African Republic' => 'Central African Republic',
    'Chad' => 'Chad',
    'Channel Islands' => 'Channel Islands',
    'Chile' => 'Chile',
    'China' => 'China',
    'Colombia' => 'Colombia',
    'Comoros' => 'Comoros',
    'Congo, Democratic Republic of the' => 'Congo, Democratic Republic of the',
    'Congo, Republic of the' => 'Congo, Republic of the',
    'Cook Islands' => 'Cook Islands',
    'Costa Rica' => 'Costa Rica',
    'Cote d\'Ivoire' => 'Cote d\'Ivoire',
    'Croatia' => 'Croatia',
    'Cuba' => 'Cuba',
    'Cyprus' => 'Cyprus',
    'Czech Republic' => 'Czech Republic',
    'Denmark' => 'Denmark',
    'Djibouti' => 'Djibouti',
    'Dominica' => 'Dominica',
    'Dominican Republic' => 'Dominican Republic',
    'East Timor' => 'East Timor',
    'Ecuador' => 'Ecuador',
    'Egypt' => 'Egypt',
    'El Salvador' => 'El Salvador',
    'Equatorial Guinea' => 'Equatorial Guinea',
    'Eritrea' => 'Eritrea',
    'Estonia' => 'Estonia',
    'Ethiopia' => 'Ethiopia',
    'Falkland Islands' => 'Falkland Islands',
    'Faroe Islands' => 'Faroe Islands',
    'Fiji' => 'Fiji',
    'Finland' => 'Finland',
    'France' => 'France',
    'French Guiana' => 'French Guiana',
    'French Polynesia' => 'French Polynesia',
    'Gabon' => 'Gabon',
    'Gambia, The' => 'Gambia, The',
    'Gaza Strip' => 'Gaza Strip',
    'Georgia' => 'Georgia',
    'Germany' => 'Germany',
    'Ghana' => 'Ghana',
    'Gibraltar' => 'Gibraltar',
    'Greece' => 'Greece',
    'Greenland' => 'Greenland',
    'Grenada' => 'Grenada',
    'Guadeloupe' => 'Guadeloupe',
    'Guam' => 'Guam',
    'Guatemala' => 'Guatemala',
    'Guinea' => 'Guinea',
    'Guinea-Bissau' => 'Guinea-Bissau',
    'Guyana' => 'Guyana',
    'Haiti' => 'Haiti',
    'Holy See (Vatican City)' => 'Holy See (Vatican City)',
    'Honduras' => 'Honduras',
    'Hong Kong' => 'Hong Kong',
    'Hungary' => 'Hungary',
    'Iceland' => 'Iceland',
    'India' => 'India',
    'Indonesia' => 'Indonesia',
    'Iran' => 'Iran',
    'Iraq' => 'Iraq',
    'Ireland' => 'Ireland',
    'Isle of Man' => 'Isle of Man',
    'Israel' => 'Israel',
    'Italy' => 'Italy',
    'Jamaica' => 'Jamaica',
    'Japan' => 'Japan',
    'Jordan' => 'Jordan',
    'Kazakhstan' => 'Kazakhstan',
    'Korea, North' => 'Korea, North',
    'Korea, South' => 'Korea, South',
    'Kenya' => 'Kenya',
    'Kiribati' => 'Kiribati',
    'Kuwait' => 'Kuwait',
    'Kyrgyzstan' => 'Kyrgyzstan',
    'Laos' => 'Laos',
    'Latvia' => 'Latvia',
    'Lebanon' => 'Lebanon',
    'Lesotho' => 'Lesotho',
    'Liberia' => 'Liberia',
    'Libya' => 'Libya',
    'Liechtenstein' => 'Liechtenstein',
    'Lithuania' => 'Lithuania',
    'Luxembourg' => 'Luxembourg',
    'Macau' => 'Macau',
    'Macedonia' => 'Macedonia',
    'Madagascar' => 'Madagascar',
    'Malawi' => 'Malawi',
    'Malaysia' => 'Malaysia',
    'Maldives' => 'Maldives',
    'Mali' => 'Mali',
    'Malta' => 'Malta',
    'Marshall Islands' => 'Marshall Islands',
    'Martinique' => 'Martinique',
    'Mauritania' => 'Mauritania',
    'Mauritius' => 'Mauritius',
    'Mexico' => 'Mexico',
    'Micronesia' => 'Micronesia',
    'Moldova' => 'Moldova',
    'Monaco' => 'Monaco',
    'Mongolia' => 'Mongolia',
    'Montenegro' => 'Montenegro',
    'Montserrat' => 'Montserrat',
    'Morocco' => 'Morocco',
    'Mozambique' => 'Mozambique',
    'Namibia' => 'Namibia',
    'Nauru' => 'Nauru',
    'Nepal' => 'Nepal',
    'Netherlands' => 'Netherlands',
    'Netherlands Antilles' => 'Netherlands Antilles',
    'New Caledonia' => 'New Caledonia',
    'New Zealand' => 'New Zealand',
    'Nicaragua' => 'Nicaragua',
    'Niger' => 'Niger',
    'Nigeria' => 'Nigeria',
    'Niue' => 'Niue',
    'Northern Mariana Islands' => 'Northern Mariana Islands',
    'Norway' => 'Norway',
    'Oman' => 'Oman',
    'Pakistan' => 'Pakistan',
    'Palau' => 'Palau',
    'Panama' => 'Panama',
    'Papua New Guinea' => 'Papua New Guinea',
    'Paraguay' => 'Paraguay',
    'Peru' => 'Peru',
    'Philippines' => 'Philippines',
    'Pitcairn Islands' => 'Pitcairn Islands',
    'Poland' => 'Poland',
    'Portugal' => 'Portugal',
    'Puerto Rico' => 'Puerto Rico',
    'Qatar' => 'Qatar',
    'Reunion' => 'Reunion',
    'Romania' => 'Romania',
    'Russia' => 'Russia',
    'Rwanda' => 'Rwanda',
    'Saint Kitts and Nevis' => 'Saint Kitts and Nevis',
    'Saint Lucia' => 'Saint Lucia',
    'Saint Pierre and Miquelon' => 'Saint Pierre and Miquelon',
    'Saint Vincent and the Grenadines' => 'Saint Vincent and the Grenadines',
    'Samoa' => 'Samoa',
    'San Marino' => 'San Marino',
    'Sao Tome and Principe' => 'Sao Tome and Principe',
    'Saudi Arabia' => 'Saudi Arabia',
    'Senegal' => 'Senegal',
    'Serbia' => 'Serbia',
    'Seychelles' => 'Seychelles',
    'Sierra Leone' => 'Sierra Leone',
    'Singapore' => 'Singapore',
    'Slovakia' => 'Slovakia',
    'Slovenia' => 'Slovenia',
    'Solomon Islands' => 'Solomon Islands',
    'Somalia' => 'Somalia',
    'South Africa' => 'South Africa',
    'Spain' => 'Spain',
    'Sri Lanka' => 'Sri Lanka',
    'Sudan' => 'Sudan',
    'Suriname' => 'Suriname',
    'Swaziland' => 'Swaziland',
    'Sweden' => 'Sweden',
    'Switzerland' => 'Switzerland',
    'Syria' => 'Syria',
    'Taiwan' => 'Taiwan',
    'Tajikistan' => 'Tajikistan',
    'Tanzania' => 'Tanzania',
    'Thailand' => 'Thailand',
    'Togo' => 'Togo',
    'Tokelau' => 'Tokelau',
    'Tonga' => 'Tonga',
    'Trinidad and Tobago' => 'Trinidad and Tobago',
    'Tunisia' => 'Tunisia',
    'Turkey' => 'Turkey',
    'Turkmenistan' => 'Turkmenistan',
    'Turks and Caicos Islands' => 'Turks and Caicos Islands',
    'Tuvalu' => 'Tuvalu',
    'Uganda' => 'Uganda',
    'Ukraine' => 'Ukraine',
    'United Arab Emirates' => 'United Arab Emirates',
    'United Kingdom' => 'United Kingdom',
    'United States' => 'United States',
    'Uruguay' => 'Uruguay',
    'Uzbekistan' => 'Uzbekistan',
    'Vanuatu' => 'Vanuatu',
    'Venezuela' => 'Venezuela',
    'Vietnam' => 'Vietnam',
    'Virgin Islands' => 'Virgin Islands',
    'Wallis and Futuna' => 'Wallis and Futuna',
    'West Bank' => 'West Bank',
    'Western Sahara' => 'Western Sahara',
    'Yemen' => 'Yemen',
    'Zambia' => 'Zambia',
    'Zimbabwe' => 'Zimbabwe',
  );
}

