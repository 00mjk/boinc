<?php
// $Id$

/**
 * @file
 * Provides common BOINC module functionality.
 *
 * In general, any custom feature or function required independently by
 * multiple BOINC modules should be in this module.
 */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Includes that provide supporting functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

//require_once('includes/boinccore.forms.inc');
//require_once('includes/boinccore.helpers.inc');


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Hooks into core modules
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 
/**
 * Implementation of hook_menu(); determine the actions that correspond
 * with defined URL paths
 */
function boinccore_menu() {
  $items['node_control'] = array(
    'page callback' => 'boinccore_node_control',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['comment_control'] = array(
    'page callback' => 'boinccore_comment_control',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK
  );
  $items['user_control'] = array(
    'page callback' => 'boinccore_user_control',
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK
  );
  $items['goto'] = array(
    'page callback' => 'boinccore_url_pagination_handler',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['admin/boinc/community'] = array(
    'title' => 'Community',
    'description' => 'Global settings for community interaction.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boinccore_admin_community'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'boinccore.admin.inc'
  );
  $items['admin/boinc/standard-content-generator'] = array(
    'title' => 'Standard page generator',
    'description' => 'Regenerate standard site content (e.g. Help and About Us
      pages).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boinccore_admin_default_content'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'boinccore.admin.inc'
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter()
 */
function boinccore_menu_alter(&$items) {
  // If using Solr search and not core Drupal search, disable core search!
  if (module_exists('global_search_solr') AND !module_exists('global_search')) {
    // Add permission to user search.
    $check = array(
      'search/node/%menu_tail',
      'search/user/%menu_tail',
      'user/autocomplete'
    );
    foreach ($check as $path) {
      if (isset($items[$path])) {
        $items[$path]['access callback'] = FALSE;
      }
    }
  }
}

/**
 * Implementation of hook_enable()
 */
function boinccore_enable() {
  // Automatically try to establish standard site content when this module is
  // enabled (e.g. Help and About Us pages)
  boinccore_admin_default_content_generate();
}

/**
 * Implementation of hook_form_alter()
 */
function boinccore_form_alter(&$form, $form_state, $form_id) {
  global $user;
  $account = user_load($user->uid);
  switch ($form_id) {
  // Comment form
  case 'comment_form':
    $user_image = boincuser_get_user_profile_image($user->uid);
    $user_info = '<div class="user">';
    if ($user_image['image']['filepath']) {
      $user_info .= '  <div class="picture">';
      $user_info .= theme('imagefield_image', $user_image['image'], $user_image['alt'], $user_image['alt'], array(), false);
      $user_info .= '  </div>';
    }
    $user_info .= '  <div class="name">' . theme('username', $account) . '</div>';
    if ($account->uid) {
      //$user_info .= '  <div class="join-date">Joined: ' . date('j M y', $account->created) . '</div>';
      //$user_info .= '  <div class="post-count">Posts: ' . $account->post_count . '</div>';
      //$user_info .= '  <div class="credit">Credit: ' . $account->boincuser_total_credit . '</div>';
      //$user_info .= '  <div class="rac">RAC: ' . $account->boincuser_expavg_credit . '</div>';
    }
    $user_info .= '</div>';
    array_unshift($form, array(
      'user_info' => array(
        '#value' => $user_info,
      ),
      'comment_form_prefix' => array(
        '#value' => '<div class="form-body">',
      ),
    ));
    $form['comment_form_suffix'] = array(
      '#value' => '</div>',
    );
    
    module_load_include('inc', 'bbcode', 'bbcode-help');
    $form['bbcode_help'] = array(
      '#title' => t('BBcode help'),
      '#type' => 'fieldset',
      '#attributes' => array(
        'class' => 'bbcode_help',
      ),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      'content' => array(
        '#value' => _bbcode_filter_tip(),
      ),
    );
    
    // If a specific comment is being referenced, go back to it on cancel
    if ($comment_ref = $form['pid']['#value']) {
      $cancel_url = "goto/comment/{$comment_ref}";
    }
    else {
      $cancel_url = "node/{$form['nid']['#value']}";
    }
    
    // Wrap action buttons for styling consistency
    $form['form control tabs prefix'] = array(
      '#value' => '<ul class="form-control tab-list">',
      '#weight' => 1001,
    );
    $form['submit']['#prefix'] = '<li class="first tab">';
    $form['submit']['#value'] = t('Post comment');
    $form['submit']['#suffix'] = '</li>';
    $form['submit']['#weight'] = 1002;
    $form['preview']['#prefix'] = '<li class="tab">';
    $form['preview']['#suffix'] = '</li>';
    $form['preview']['#weight'] = 1003;
    $form['cancel'] = array(
      '#value' => '<li class="tab">' . l(t('Cancel'), $cancel_url) . '</li>',
      '#weight' => 1004,
    );
    $form['form control tabs suffix'] = array(
      '#value' => '</ul>',
      '#weight' => 1010,
    );
    
    // Preview is ugly, unset until it works
    unset($form['preview']);
    
    // Remove redundant name field
    unset($form['_author']);
    
    break;
  default:
  }
}

function boinccore_link_alter(&$links, $node, $comment = NULL) {
  //echo '<pre>' . print_r($links, true) . '</pre>';
  foreach ($links as $module => $link) {
    if (strstr($module, 'ignore_user')) {
      // Remove the ignore user link
      unset($links[$module]);
    }
  }
}

/*
function boinccore_link($type, $object, $teaser = FALSE) {
  // Add custom links with this hook
  $links = array();
  if ($type == 'comment') {
    if (user_access('administer comments')) {
      $comment_control = "comment_control/{$object->cid}";
      if ($object->status == 0) {
        $links['hide'] = array(
          'title' => t('Hide'),
          'href' => "{$comment_control}/hide",
          'attributes' => array(
            'title' => t('Hide this comment')
          )
        );
      }
    }
  }
  return $links;
}
// */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Page callbacks from hook_menu()
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
 * Controller for handling simple node status configuration.
 * Allow published, sticky, and comment status to be set on nodes by direct
 * link rather than through the node form.
 */
function boinccore_node_control($nid = NULL, $action = NULL) {
  if ((!$nid OR !$node = node_load($nid)) OR
      ($node->type == 'forum' AND !user_access('edit any forum topic')) OR
      ($node->type != 'forum' AND !user_access('administer nodes'))) {
    // What are you even doing here...
    return FALSE;
  }
  switch ($action) {
  case 'unhide':
    node_publish_action($node);
    break;
  case 'hide':
    node_unpublish_action($node);
    break;
  case 'sticky':
    node_make_sticky_action($node);
    break;
  case 'unsticky':
    node_make_unsticky_action($node);
    break;
  case 'lock':
    $node->comment = 1;
    watchdog('action', 'Locked comments on @type %title.', array(
      '@type' => node_get_types('name', $node), '%title' => $node->title));
    break;
  case 'unlock':
    $node->comment = 2;
    watchdog('action', 'Unlocked comments on @type %title.', array(
      '@type' => node_get_types('name', $node), '%title' => $node->title));
    break;
  default:
  }
  node_save($node);
  drupal_goto("node/{$nid}");
}

/**
 * Controller for handling simple comment status configuration.
 * Allow published status to be set on comments by direct link rather than
 * through the comment edit form.
 */
function boinccore_comment_control($cid = NULL, $action = NULL) {
  if (!$cid OR !$comment = _comment_load($cid)) {
    // What are you even doing here...
    return FALSE;
  }
  $return_path = "node/{$comment->nid}";
  $return_anchor = "comment-{$cid}";
  switch ($action) {
  case 'unhide':
    comment_publish_action($comment);
    break;
  case 'hide':
    comment_unpublish_action($comment);
    break;
  case 'convert':
    $node = new stdClass();
    $node->name = $comment->subject;
    $node->title = $node->name;
    $node->body = $comment->comment;
    $node->type = 'forum';
    $node->created = $comment->timestamp;
    $node->changed = $node->created;
    $node->promote = 0; // Display on front page?
    $node->sticky = 0;  // Display top of page?
    $node->status = 1;   // Published?
    $node->comment = 2;
    //$node->language = 'en';
    $node->uid = $comment->uid;
    
    // Preselect the parent's taxonomy ID
    $parent_node = node_load($comment->nid);
    $node->tid = $parent_node->tid;
 
    if (filter_access($comment->format)) {
      $node->format = $comment->format;
    }
    
    // Save the new node
    node_save($node);
    taxonomy_node_save($node, array($node->tid));
    
    // Delete the comment
    module_load_include('inc', 'comment', 'comment.admin');
    _comment_delete_thread($comment);
    
    $return_path = "node/{$node->nid}";
    $return_anchor = NULL;
    break;
  default:
  }
  drupal_goto($return_path, NULL, $return_anchor);
}

/**
 * Controller for handling simple user account status configuration.
 * Allow community membership status to be set for users by direct link rather
 * than through the user account info form.
 */
function boinccore_user_control($uid = NULL, $action = NULL) {
  if (!$uid OR !$account = user_load($uid)) {
    // What are you even doing here...
    return FALSE;
  }
  switch ($action) {
  case 'ban':
    $unrestricted_role = array_search('unrestricted user', user_roles(true));
    if (isset($account->roles[$unrestricted_role])) {
      unset($account->roles[$unrestricted_role]);
      user_save($account, array('roles' => $account->roles));
    }
    break;
  case 'lift-ban':
    $unrestricted_role = array_search('unrestricted user', user_roles(true));
    if (!isset($account->roles[$unrestricted_role])) {
      $account->roles[$unrestricted_role] = 'unrestricted user';
      user_save($account, array('roles' => $account->roles));
    }
    break;
  default:
  }
  drupal_goto("user/{$account->uid}");
}

/**
 * Controller for handling direct linking to paginated content.
 * Because pagination settings are user configurable, it is impossible to know
 * in advance on which page a given comment will appear. Link instead to this
 * controller function, which can compute the page based on the user's settings
 */
function boinccore_url_pagination_handler($type, $object_id) {
  global $user;
  $path = NULL;
  $params = array();
  switch ($type) {
  case 'comment':
    $object = _comment_load($object_id);
    if ($object) {
      $path = "node/{$object->nid}";
      // Get the sort order
      $gt_lt = '<';
      $comment_order = (isset($user->sort)) ? $user->sort : variable_get('comment_default_order_forum', 2);
      if ($comment_order == COMMENT_ORDER_NEWEST_FIRST) {
        $gt_lt = '>';
      }
      // See how many comments there are before (or after) this comment...
      $comment_offset = db_result(db_query('
        SELECT COUNT(*) FROM {comments}
        WHERE nid = %d AND status = 0 AND timestamp %s %d',
        $object->nid, $gt_lt, $object->timestamp));
      if ($comment_offset) {
        // Get the number of comments per page
        if ($user->comments_per_page) {
          $comments_per_page = $user->comments_per_page;
        }
        else {
          $node = node_load($comment->nid);
          $comments_per_page = variable_get(
            "comment_default_per_page_{$node->type}", 50
          );
        }
        // Determine which page to display in order to show the given comment
        $page = floor($comment_offset / $comments_per_page);
        if ($page) {
          $params = array('page' => $page);
        }
      }
    }
    break;
  default:
  }
  if ($path) {
    drupal_goto($path, $params, "comment-{$object->cid}");
  }
  else {
    drupal_not_found();
  }
}
