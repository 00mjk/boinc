<?php
// ; $Id$

// Drupal forums are represented as a hierarchy of terms in a vocabulary. This
// is accomplished through the taxonomy concept (see: http://drupal.org/node/774892). 
// The forum vocabulary has categories as terms (e.g. "Discussion", "Help Desk")
// and subsequent sub terms that belong to one of these parent terms. This allows
// an arbitrary number of layers to exist in forum organization. BOINC forums map
// to Drupal as follows:
// 
//   Category -> Root level term in the vocabulary
//   Topic / forum -> Term in the vocabulary with parent term
//   Thread -> Content node
//   Post -> Comment

/**
 * Implementation of hook_menu()
 */
function boincimport_menu() {
  $items = array();
  
  $items['admin/boinc/import'] = array(
    'title' => 'Environment: Data import',
    'description' => 'Overview of the BOINC data import process.',
    'access callback' => 'user_access',
    'access arguments' => array('import boinc data'),
    'page callback' => 'boincimport_main',
    'file' => 'boincimport.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/boinc/import/post_configuration'] = array(
    'title' => 'Post-migration configuration',
    'description' => 'Tie up a few odds and ends in the system configuration
      after data importation is complete.',
    'access callback' => 'user_access',
    'access arguments' => array('import boinc data'),
    'page callback' => 'boincimport_post_configuration', 
    'file' => 'boincimport.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/boinc/import/cleanup'] = array(
    'title' => 'Cleanup',
    'access callback' => 'user_access',
    'access arguments' => array('import boinc data'),
    'page callback' => 'boincimport_cleanup', 
    'type' => MENU_CALLBACK,
  );
  $items['admin/boinc/import/process'] = array(
    'title' => 'Execute migration',
    'access callback' => 'user_access',
    'access arguments' => array('import boinc data'),
    'page callback' => 'boincimport_process', 
    'type' => MENU_CALLBACK,
  );
  $items['admin/boinc/import/reset'] = array(
    'title' => 'Reset BOINC database URL',
    'access callback' => 'user_access',
    'access arguments' => array('import boinc data'),
    'page callback' => 'boincimport_reset',
    'type' => MENU_CALLBACK,
  );
  $items['admin/boinc/import/unlock'] = array(
    'title' => 'Unlock BOINC import process',
    'access callback' => 'user_access',
    'access arguments' => array('import boinc data'),
    'page callback' => 'boincimport_unlock',
    'type' => MENU_CALLBACK,
  );
  $items['admin/boinc/import/settings'] = array(
    'title' => 'BOINC data import settings',
    'description' => 'Configure the BOINC data import process in preparation
      for pulling user accounts, teams, and forums into Drupal.',
    'access callback' => 'user_access',
    'access arguments' => array('import boinc data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boincimport_admin_settings'),
    'file' => 'boincimport.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function boincimport_perm() {
  return array('import boinc data');
}

/**
 * Callback admin/boinc/import/reset
 */
function boincimport_reset() {
  global $db_url;
  $boinc_db_url = (is_array($db_url)) ? (isset($db_url['boinc']) ? $db_url['boinc'] : $db_url['default']) : $db_url;
  variable_set('boincimport_db_url', $boinc_db_url);
  variable_set('boincimport_ready', 0);
  return '<p>'. t('The BOINC database URL has been reset. You may now <a href="@configlink">go back to the configuration page</a>.',
      array('@configlink' => url('admin/boinc/import/settings'))) .'</p>';
}

/**
 * Callback admin/boinc/import/unlock
 */
function boincimport_unlock() {
  variable_del('boincimport_process_locked');
  return '<p>'. t('The BOINC data import process has been unlocked. You may
    now !proceed_with_import.', array(
      '!proceed_with_import' => l(t('proceed with the import'),
        'admin/boinc/import/process')
    )) .'</p>';
}

/**
 * Callback admin/boinc/import/cleanup
 */
function boincimport_cleanup() {
  return boincimport_process_cleanup() .'<p>'. t('Drupal database cleaned.') .'</p>';
}

/**
 * Set database connection for boincimport
 *
 * @return
 *   1 if can connect to BOINC database.
 *
 * BEWARE: if you test using db_connect and the connection
 * fails, the process will die() which is a bit too much since we only
 * want to test. Therefore, the test part of the code is not used, now.
 */
function _boincimport_db_connect($test= 0) {
  global $db_url;
  $db_ready = variable_get('boincimport_db_configured', 1);
  if (!$db_ready) {
    if (is_array($db_url)) {
      $db_url2 = $db_url;
    } else {
      $db_url2['default'] = $db_url;
    }
    $db_url2['boinc'] = variable_get('boincimport_db_url', $db_url);
    $GLOBALS['db_url'] =& $db_url2;
    if ($test) {
      if (!db_connect($db_url2['boinc'])) {
        return 0;
      }
    }
  }
  return 1;
  
}

/**
 * Check if the module is enabled.
 * 
 * @return array
 *    $out['html'] = formatted html.
 *    $out['result'] = boolean.
 */
function _boincimport_check_module($module) {
  $out['html'] = '<ul>';
  $result = module_exists($module);
  $out['result'] = $result;
  if ($result == 1) {
    $out['html'] .= '<li>'. t('Module %module is enabled. OK!', array('%module' => $module)) .'</li>';
  }
  else {
    $out['html'] .= '<li><span class="marker">'. t('Module %module is disabled.', array('%module' => $module)) .'</span></li>';
  }
  $out['html'] .= '</ul>';
  return $out;
}

/**
 * Check if the sql tables are installed.
 * 
 * @return array
 *   $out['html'] = formatted html.
 *   $out['result'] = boolean.
 */
function _boincimport_check_tables($tables = array(), $db = 'default' , $prefix = 1) {
  _boincimport_db_connect();

  $out['html'] = '<ul>';
  $out['result']= 1;
  foreach ($tables as $table) {
    if ($prefix) {
      $table = db_prefix_tables('{'. $table .'}');
    }  

    db_set_active($db);
    if ($GLOBALS['db_type'] == 'pgsql') {
      // adapt from db_table_exists in database.pgsql.inc
      $result = (bool) db_result(db_query("SELECT COUNT(*) FROM pg_class WHERE relname = '%s'", $table));
    }
    else {
      // adapt from db_table_exists in database.mysql.inc
      $result = (bool) db_fetch_object(db_query("SHOW TABLES LIKE '%s'", $table));
    }
    db_set_active('default');
    if ($result) {
      $out['html'] .= '<li>'. t('Table %table: OK!', array('%table' => $table)) .'</li>';
    }
    else {
      $out['html'] .= '<li><span class="marker">'. t('Table <strong>%table</strong> does not exist!', array('%table' => $table)) .'</span></li>';
      $out['result']= 0;
    }
  }
  $out['html'] .= '</ul>';
  return $out;
}



function boincimport_process() {
  // Start with a quick sanity check on the BOINC environment
  boinc_get_path();
  
  if (!variable_get('boincimport_ready', 0)) {
    return '<p>'. t('You cannot import the data now. Please <a href="@settings">complete the setup first</a>', array('@settings' => url('admin/boinc/import/settings'))) .'</p>';
  }

  $output = 'BOINC import process form';
  $output .= drupal_get_form('boincimport_process_form');
  return $output;
}

function boincimport_process_form() {
  $form = array();
  _boincimport_db_connect() ;
  // Causes problems with form api redirect
  //ini_set('display_errors', TRUE);

  // Adjust how long you want the script to run...
  if (!ini_get('safe_mode')) {
    set_time_limit(variable_get('boincimport_time_limit', 0));
  }
  
  // Check for a lock on the import process
  if (variable_get('boincimport_process_locked', 0)) {
    drupal_set_message(t('The import process is locked. If you are sure that
      it is no longer running, you may !unlock_it', 
      array('!unlock_it' => l(t('release the lock'),
        'admin/boinc/import/unlock')
      )), 'warning');
    watchdog('boincimport', 'The import process is locked. If you are sure that
      it is no longer running, you may !unlock_it', 
      array('!unlock_it' => l(t('release the lock'),
        'admin/boinc/import/unlock')
      ), WATCHDOG_WARNING); 
  }
  else {
    $boincimport_functions = array(
      'users' => t('Import users'),
      'teams' => t('Import teams'),
      'friends' => t('Import friendships'), 
      'preferences' => t('Import user preferences'),
      'private messages' => t('Import private messages'),
      'categories' => t('Import forum containers'),
      'topics' => t('Import topics'),
      'posts' => t('Import posts'),
      'team forums' => t('Import team forums'),
      'team topics' => t('Import team topics'),
      'team posts' => t('Import team posts'),
      'url' => t('Transform URLs'),
    );

    $form['import'] = array(
      '#type' => 'select',
      '#title' => t('Next import to perform'),
      '#default_value' => $_SESSION['boincimport_stage_selected'],
      '#options' => $boincimport_functions,
    );
    $form[] = array(
      '#type' => 'submit',
      '#value' => t('Import'),
    );
  }
  return $form;
}

function boincimport_process_form_submit($form, $form_state) {
  
  // Lock the import process
  if (!variable_get('boincimport_process_locked', 0)) {
    variable_set('boincimport_process_locked', 1);
  }
  else {
    watchdog('boincimport', 'The import process is locked, but another process
      is trying to access it...', array(), WATCHDOG_WARNING); 
  }
  
  switch ($form_state['values']['import']) {
    case 'users':
      boincimport_users();
      if (!variable_get('boincimport_import_user_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'users';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'teams';
      }
      break;

    case 'teams':
      boincimport_teams();
      if (!variable_get('boincimport_import_team_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'teams';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'friends';
      }
      break;

    case 'friends':
      boincimport_friends();
      if (!variable_get('boincimport_import_friend_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'friends';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'preferences';
      }
      break;

    case 'preferences':
      boincimport_preferences();
      if (!variable_get('boincimport_import_preferences_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'preferences';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'private messages';
      }
      break;

    case 'private messages':
      boincimport_private_msgs();
      if (!variable_get('boincimport_import_private_msg_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'private messages';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'categories';
      }
      break;

    case 'categories':
      boincimport_forum_categories();
      if (!variable_get('boincimport_import_category_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'categories';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'topics';
      }
      break;

    case 'topics':      
      boincimport_forum_topics();
      if (!variable_get('boincimport_import_topic_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'topics';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'posts';
      }
      break;
      
    case 'posts':
      boincimport_forum_posts();
      if (!variable_get('boincimport_import_post_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'posts';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'url';
      }
      break;

    case 'team forums':
      boincimport_team_forums();
      if (!variable_get('boincimport_team_forum_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'team forums';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'team topics';
      }
      break;

    case 'team topics':      
      boincimport_team_forum_topics();
      if (!variable_get('boincimport_team_topic_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'team topics';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'team posts';
      }
      break;
      
    case 'team posts':
      boincimport_team_forum_posts();
      if (!variable_get('boincimport_team_post_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'team posts';
      }
      else {
        $_SESSION['boincimport_stage_selected'] = 'url';
      }
      break;

    case 'url':
      boincimport_replace_forum_url();
      if (!variable_get('boincimport_replace_url_successful', 0)) {
        $_SESSION['boincimport_stage_selected'] = 'url';
      }
      else {
        drupal_set_message('Congratulations.  Import Finished');
        drupal_set_message('Please visit the '. l('Post migration configuration', 'admin/boinc/import/post_configuration') .' page');
        watchdog('boincimport', 'Import process is complete', array(), WATCHDOG_INFO); 
        unset($_SESSION['boincimport_stage_selected']);
      }
      break;
    default:
      $_SESSION['boincimport_stage_selected'] = 'users';
      break;
  }
  
  // Release the lock on the import process
  variable_del('boincimport_process_locked');
}

/**
 * Import users (at least those required for further data import)
 */
function boincimport_users() {
  // Check whether the user table has been successfully imported already
  if (variable_get('boincimport_import_user_successful', 0)) {
    drupal_set_message(t('Users already imported successfully'));
    watchdog('boincimport', 'Users already imported successfully', array(), WATCHDOG_INFO); 
    return;
  } 

  if (!variable_get('boincimport_import_user_started', 0)) {
    // Could prepare database tables, if new fields are necessary, etc.
    variable_set('boincimport_import_user_started', 1);
  }

  $pre = variable_get('boincimport_table_prefix', '');
  $files_path = variable_get('file_directory_path', 'files');
  $pictures_path = variable_get('user_picture_path', 'pictures');
  $import_lurkers = variable_get('boincimport_import_lurkers', 1);
  $conditions = (!$import_lurkers) ? 'WHERE posts > 0' : '';

  // See how many users need to be processed
  db_set_active('boinc');
  if ($import_lurkers) {
    $user_count = db_result(db_query('SELECT COUNT(*) FROM %suser', $pre));
  }
  //else $user_count = db_result(db_query('SELECT COUNT(DISTINCT user) FROM %spost', $pre));
  else {
    // Need to import any user who is currently ignored in order to keep them
    // ignored... not particularly clean (ignored users are stored in a string)
    $ignored_user_list = array();
    $ignoring_users = db_query("
      SELECT ignorelist
      FROM forum_preferences
      WHERE ignorelist <> ''
      ORDER BY userid ASC"
    );
    while ($ignoring_user = db_fetch_object($ignoring_users)) {
      $ignored_user_list = $ignored_user_list + array_fill_keys(explode('|', trim($ignoring_user->ignorelist, '|')), 1);
    }
    $ignored_user_list = array_keys($ignored_user_list);
    // Count all users who will need to be imported now
    $user_count = db_result(db_query("
      SELECT COUNT(*) FROM
      (
        (SELECT id FROM {user} WHERE teamid > 0 OR id IN(%s)) UNION
        (SELECT DISTINCT user FROM {post}) UNION
        (SELECT DISTINCT userid FROM {subscriptions}) UNION
        (SELECT DISTINCT user_src FROM {friend} WHERE reciprocated = 1) UNION
        (SELECT DISTINCT user_dest FROM {friend} WHERE reciprocated = 1) UNION
        (SELECT DISTINCT userid FROM {forum_preferences} WHERE ignorelist <> '') UNION
        (SELECT DISTINCT userid FROM {private_messages}) UNION
        (SELECT DISTINCT senderid FROM {private_messages})
      ) AS usersToImport",
      implode(',', $ignored_user_list)
    ));
  }
  db_set_active('default');
  
  if (!$user_count) {
    drupal_set_message(t('There were no users found: Aborting script'), 'error');
    watchdog('boincimport', 'There were no users found: Aborting script', array(), WATCHDOG_INFO); 
    return t('There were no users found: Aborting script.');
  }

  drupal_set_message(t('Found %user_count users: Beginning import', array('%user_count' => $user_count)));
  watchdog('boincimport', 'Found %user_count users: Beginning import', array('%user_count' => $user_count), WATCHDOG_INFO); 
  
  // User import relies on Drupal and BOINC APIs to manage data being read
  // from one database and saved to the other. This approach keeps things
  // clean and simple, but since a sizable user base will wreak havoc on system
  // resources, the job is broken into batches here and each batch is processed
  // by a separate process. 
  
  $batch_size = variable_get('boincimport_user_batch_size', 50);
  $batch_limit = $user_count - ($user_count % $batch_size) + $batch_size;
  $import_script_path = dirname(__FILE__) . '/includes';
  $import_script = "{$import_script_path}/import_users.php";
  $total_accounts_imported = 0;
  $total_runtime = 0;
  $last_status_update = 0;
  $batches_without_update = 0;
  
  echo t('Importing %user_count users from BOINC database', array('%user_count' => $user_count));
  ob_flush();
  flush();
  
  for ($batch = 0; $batch < $batch_limit; $batch+=$batch_size) {
    // Import a batch of accounts and indicate progress
    $start_time = microtime(true);
    $accounts_imported = 0;
    $accounts_imported = (int) exec("php {$import_script} {$import_lurkers} {$batch} {$batch_size}");
    $processing_time = round(microtime(true) - $start_time, 2);
    echo '.';
    ob_flush();
    flush();
    
    // Keep a running tally of things and provide occasional status updates
    $total_accounts_imported += $accounts_imported;
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    $batches_without_update++;
    if ($last_status_update > 150 OR $batches_without_update > 50 OR $batch + $batch_size >= $batch_limit) {
      $progress = round(100*$total_accounts_imported/$user_count, 1);
      watchdog('boincimport','%num_accounts accounts imported so far in %time (%progress% complete)', array('%num_accounts' => $total_accounts_imported, '%time' => gmdate('H:i:s', $total_runtime), '%progress' => $progress), WATCHDOG_INFO); 
      echo "<br/>\n" . t("%num_accounts accounts imported in %time (%progress% complete)", array('%num_accounts' => $total_accounts_imported, '%time' => gmdate('H:i:s', $total_runtime), '%progress' => $progress));
      ob_flush();
      flush();
      $last_status_update = 0;
      $batches_without_update = 0;
    }
  }
  
  // Get the final count of users
  variable_set('boincimport_import_user_successful', 1);
  $count = db_result(db_query('SELECT COUNT(*) FROM {boincuser}'));
  drupal_set_message(t('Successfully imported %count users', array('%count' => $count)));
  watchdog('boincimport', 'Successfully imported %count users', array('%count' => $count), WATCHDOG_INFO); 
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}


/**
 * Create teams and assign members
 */
function boincimport_teams() {
  
  $input_format = variable_get('boincimport_input_format', 0);
  
  // Check whether the team table has been successfully imported already
  if (variable_get('boincimport_import_team_successful', 0)) {
    //drupal_set_message(t('Teams already imported successfully'));
    //watchdog('boincimport', 'Teams already imported successfully', array(), WATCHDOG_INFO); 
    //return;
  }
  
  require_once (drupal_get_path('module', 'pathauto') .'/pathauto.inc');

  if (!variable_get('boincimport_import_team_started', 0)) {
    // Could prepare database tables, if new fields are necessary, etc.
    variable_set('boincimport_import_team_started', 1);
  }
  
  $team_type_map = variable_get('boincimport_team_types', array());
  if (!$team_type_map) {
    // Import team types from BOINC to a Drupal vocabulary
    require_boinc('team_types');
    global $team_types;
    
    // Create vocabulary if it isn't set
    $team_vid = db_result(db_query('SELECT vid FROM {vocabulary} WHERE name="%s"', 'Teams'));
    if (!$team_vid) {
      $team_vocab = array(
        'name' => t('Teams'),
        'description' => t('Types of BOINC teams'),
      );
      taxonomy_save_vocabulary($team_vocab);
      $team_vid = db_result(db_query('SELECT vid FROM {vocabulary} WHERE name="%s"', 'Teams'));
    }
    
    foreach ($team_types as $boinc_type_id => $name) {
      // Check for an existing term in the vocabulary
      $team_type_id = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = '{$team_vid}' AND LOWER(name) = LOWER('%s')", trim($name)));
      if ($team_type_id) {
        $team_type = array(
          'tid' => $team_type_id
        );
      }
      else {
        //if (!$name) $name = 'n/a';
        if (!$name) continue;
        $team_type = array(
          'name' => _boincimport_text_sanitize($name),
          'vid' => $team_vid,
          'description' => '',
          'parent' => 0
        );
        taxonomy_save_term($team_type);
      }
      // Note the taxonomy ID for mapping forums to categories
      $team_type_map[$boinc_type_id] = $team_type['tid'];
    }
    variable_set('boincimport_team_types', $team_type_map);
  }
  
  $pre = variable_get('boincimport_table_prefix', '');

  // See how many teams need to be processed
  db_set_active('boinc');
  $team_count = db_result(db_query('SELECT COUNT(*) FROM %steam', $pre));
  db_set_active('default');

  if (!$team_count) {
    drupal_set_message(t('There were no teams found: Aborting script'), 'error');
    watchdog('boincimport', 'There were no teams found: Aborting script', array(), WATCHDOG_INFO); 
    return t('There were no teams found: Aborting script.');
  }

  drupal_set_message(t('Found %team_count teams: Beginning Import', array('%team_count' => $team_count)));
  watchdog('boincimport', 'Found %team_count teams: Beginning Import', array('%team_count' => $team_count), WATCHDOG_INFO);
  
  // Get teams from BOINC
  db_set_active('boinc');
  $boincteams = db_query('SELECT * FROM %steam', $pre);
  db_set_active('default');
  
  $team_import_script_path = dirname(__FILE__) . '/includes';
  $team_import_script = "{$team_import_script_path}/import_team.php";
  $teams_imported = 0;
  $total_memberships_assigned = 0;
  $total_runtime = 0;
  $last_status_update = 0;
  $teams_without_update = 0;
  
  echo t('Importing %team_count teams from BOINC database', array('%team_count' => $team_count));
  ob_flush();
  flush();
  
  // Create each team as organic group content
  while ($boincteam = db_fetch_object($boincteams)) {
    $start_time = microtime(true);
    
    // Save the team type affiliation 
    $tid = $team_type_map[$boincteam->type];
    
    $memberships_assigned = (int) exec("php {$team_import_script} {$boincteam->id} {$tid} {$input_format}");
    
    // Keep a running tally of things and provide occasional status updates
    $teams_imported++;
    $teams_without_update++;
    $total_memberships_assigned += $memberships_assigned;
    $processing_time = round(microtime(true) - $start_time, 2);
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    
    if ($teams_without_update % 20 == 0) {
      echo '.';
      ob_flush();
      flush();
    }
    if ($last_status_update > 150 OR $teams_without_update >= 500) {
      $progress = round(100*$teams_imported/$team_count, 1);
      echo "<br/>\n" . t("%teams_imported teams imported in %time (%progress% complete) -- %member_count members", array('%teams_imported' => $teams_imported, '%time' => gmdate('H:i:s', $total_runtime), '%progress' => $progress, '%member_count' => $total_memberships_assigned));
      ob_flush();
      flush();
      $last_status_update = 0;
      $teams_without_update = 0;
    }
  }
  // Set the team import successful flag in the variable table
  variable_set('boincimport_import_team_successful', '1');
  
  drupal_set_message(t('Successfully Imported %count teams.', array('%count' => $teams_imported)));
  watchdog('boincimport', 'Successfully Imported %count teams.', array('%count' => $teams_imported), WATCHDOG_INFO); 
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}


/**
 * Create friend relationships between users
 */
function boincimport_friends() {
  $pre = variable_get('boincimport_table_prefix', '');
  $friendships_imported = 0;
  $start_time = microtime(true);
  $total_runtime = 0;
  $last_status_update = time();
  
  // See how many friendships need to be processed
  db_set_active('boinc');
  $friendship_count = db_result(db_query('SELECT COUNT(*) FROM %sfriend WHERE reciprocated = 1', $pre));
  db_set_active('default');

  if (!$friendship_count) {
    drupal_set_message(t('There were no friendships found: Aborting script'), 'error');
    watchdog('boincimport', 'There were no friendships found: Aborting script', array(), WATCHDOG_INFO); 
    return t('There were no friendships found: Aborting script.');
  }

  drupal_set_message(t('Found %friendship_count friend relationships: Beginning Import', array('%friendship_count' => $friendship_count)));
  watchdog('boincimport', 'Found %friendship_count friend relationships: Beginning Import', array('%friendship_count' => $friendship_count), WATCHDOG_INFO); 
  
  echo t('Importing %friendship_count friend relationships from BOINC database', array('%friendship_count' => $friendship_count));
  ob_flush();
  flush();
  
  // Grab the source data
  db_set_active('boinc');
  $friendships = db_query('
    SELECT user_src, user_dest, message, create_time
    FROM {friend}
    WHERE reciprocated = 1');
  db_set_active('default');
  
  // Convert BOINC friends to Drupal friends
  while ($friendship = db_fetch_object($friendships)) {
    $uid = get_drupal_id($friendship->user_src);
    $friend_uid = get_drupal_id($friendship->user_dest);
    db_query("
      INSERT IGNORE INTO {flag_friend}
      SET uid = '%d', friend_uid = '%d', created = '%d'",
      $uid, $friend_uid, $friendship->create_time
    );
    
    $friendships_imported++;
    if ($friendships_imported % 100 == 0) {
      echo '.';
      ob_flush();
      flush();
    }
    
    // Keep a running tally of things and provide occasional status updates
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    $batches_without_update++;
    if (time() - $last_status_update > 60) {
      $progress = round(100*($friendships_imported)/$friendship_count, 1);
      echo "<br/>\n" . t("%num_friends friend relationships imported
        in %time (%progress% complete)",
        array(
          '%num_friends' => $friendships_imported,
          '%time' => gmdate('H:i:s', microtime(true) - $start_time),
          '%progress' => $progress
        )
      );
      ob_flush();
      flush();
      $last_status_update = time();
    }
  }
  
  // Get the final count of friends
  variable_set('boincimport_import_friend_successful', 1);
  $count = db_result(db_query('SELECT COUNT(*) FROM {flag_friend}'));
  drupal_set_message(t('Successfully imported %count friend relationships', array('%count' => $count)));
  watchdog('boincimport', 'Successfully imported %count friend relationships', array('%count' => $count), WATCHDOG_INFO); 
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}


/**
 * Import community preferences
 */
function boincimport_preferences() {
  $pre = variable_get('boincimport_table_prefix', '');
  $quarrelers_processed = 0;
  $start_time = microtime(true);
  $total_runtime = 0;
  $last_status_update = time();
  
  // Currently the only preferences being imported are BOINC "filtered users"
  // This concept of users blocking other users when they don't get along maps
  // to the Drupal ignore users module
  
  // See how many users are involved in quarrels
  db_set_active('boinc');
  $quarreler_count = db_result(db_query("
    SELECT COUNT(*)
    FROM %sforum_preferences
    WHERE ignorelist <> ''", $pre));
  db_set_active('default');

  if ($quarreler_count) {
    
    drupal_set_message(t('Found %quarreler_count quarreling users: Beginning Import', array('%quarreler_count' => $quarreler_count)));
    watchdog('boincimport', 'Found %quarreler_count quarreling users: Beginning Import', array('%quarreler_count' => $quarreler_count), WATCHDOG_INFO); 
    
    echo t('Processing %quarreler_count quarreling users from BOINC database', array('%quarreler_count' => $quarreler_count));
    ob_flush();
    flush();
    
    // Grab the source data
    db_set_active('boinc');
    $quarrelers = db_query("
      SELECT userid, ignorelist
      FROM {forum_preferences}
      WHERE ignorelist <> ''");
    db_set_active('default');
    
    // Convert BOINC ignore list to Drupal ignore user entries
    while ($quarreler = db_fetch_object($quarrelers)) {
      $uid = get_drupal_id($quarreler->userid);
      $ignored_users = explode('|', trim($quarreler->ignorelist, '|'));
      foreach ($ignored_users as $ignored_user) {
        $ignored_user_uid = get_drupal_id($ignored_user);
        if (!$ignored_user_uid) continue;
        db_query("
          INSERT IGNORE INTO {ignore_user}
          SET uid = '%d', iuid = '%d'",
          $uid, $ignored_user_uid
        );
      }
      $quarrelers_processed++;
      if ($quarrelers_processed % 100 == 0) {
        echo '.';
        ob_flush();
        flush();
      }
      
      // Keep a running tally of things and provide occasional status updates
      $total_runtime += $processing_time;
      $last_status_update += $processing_time;
      $batches_without_update++;
      if (time() - $last_status_update > 60) {
        $progress = round(100*($quarrelers_processed)/$quarreler_count, 1);
        echo "<br/>\n" . t("%num_quarrelers user filters imported
          in %time (%progress% complete)",
          array(
            '%num_friends' => $quarrelers_processed,
            '%time' => gmdate('H:i:s', microtime(true) - $start_time),
            '%progress' => $progress
          )
        );
        ob_flush();
        flush();
        $last_status_update = time();
      }
    }
    
    // Get the final count of users with filter preferences imported
    $count = db_result(db_query('SELECT COUNT(*) FROM {ignore_user}'));
    drupal_set_message(t('Successfully imported %count user filter preferences', array('%count' => $count)));
    watchdog('boincimport', 'Successfully imported %count user filter preferences', array('%count' => $count), WATCHDOG_INFO); 
    
  }
  else {
    drupal_set_message(t('There were no quarrels found: moving on...'), 'notice');
    watchdog('boincimport', 'There were no quarrels found: moving on...', array(), WATCHDOG_INFO); 
  }
  
  variable_set('boincimport_import_preferences_successful', 1);
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}


/**
 * Import private messages
 */
function boincimport_private_msgs() {
  $pre = variable_get('boincimport_table_prefix', '');
  $pm_imported = 0;
  $start_time = microtime(true);
  $total_runtime = 0;
  $last_status_update = time();
  
  // See how many private messages there are to import
  db_set_active('boinc');
  $pm_count = db_result(db_query('
    SELECT COUNT(*)
    FROM %sprivate_messages', $pre));
  db_set_active('default');

  if (!$pm_count) {
    drupal_set_message(t('There were no private messages found: Aborting script.'), 'notice');
    watchdog('boincimport', 'There were no private messages found: Aborting script.', array(), WATCHDOG_INFO); 
    return t('There were no private messages found: Aborting script.');
  }

  drupal_set_message(t('Found %pm_count private messages: Beginning Import', array('%pm_count' => $pm_count)));
  watchdog('boincimport', 'Found %pm_count private messages: Beginning Import', array('%pm_count' => $pm_count), WATCHDOG_INFO); 
  
  echo t('Processing %pm_count private messages from BOINC database', array('%pm_count' => $pm_count));
  ob_flush();
  flush();
  
  // Grab the source data
  db_set_active('boinc');
  $private_messages = db_query('
    SELECT userid, senderid, date, opened, subject, content
    FROM {private_messages}');
  db_set_active('default');
  
  // Convert BOINC private messages to Drupal private messages
  while ($pm = db_fetch_object($private_messages)) {
    
    $uid = get_drupal_id($pm->userid);
    $sender_uid = get_drupal_id($pm->senderid);
    
    $default_input_format = db_result(db_query("
      SELECT format FROM {filter_formats} WHERE name = '%s'", 'Rich text'));
    if (!$default_input_format) $default_input_format = 1;
    
    // First save the message
    db_query("
      INSERT INTO {pm_message} (subject, author, body, format, timestamp)
      VALUES ('%s', %d, '%s', %d, %d)",
      $pm->subject, $sender_uid, $pm->content, $default_input_format, $pm->date
    );
    $mid = db_last_insert_id('pm_message', 'mid');
    
    // Then attach recipients and set status (note that threads are not a BOINC
    // feature, so just consider every message to be a new thread)
    db_query("
      INSERT INTO {pm_index} (mid, thread_id, uid, is_new, deleted)
      VALUES (%d, %d, %d, %d, 0)",
      $mid, $mid, $uid, !$pm->opened
    );
    // In Drupal, the sender should be attached as well
    db_query("
      INSERT INTO {pm_index} (mid, thread_id, uid, is_new, deleted)
      VALUES (%d, %d, %d, %d, 0)",
      $mid, $mid, $sender_uid, 0
    );
    
    $pm_imported++;
    if ($pm_imported % 100 == 0) {
      echo '.';
      ob_flush();
      flush();
    }
    
    // Keep a running tally of things and provide occasional status updates
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    $batches_without_update++;
    if (time() - $last_status_update > 60) {
      $progress = round(100*($pm_imported)/$pm_count, 1);
      echo "<br/>\n" . t("%num_private_msgs private messages imported
        in %time (%progress% complete)",
        array(
          '%num_private_msgs' => $pm_imported,
          '%time' => gmdate('H:i:s', microtime(true) - $start_time),
          '%progress' => $progress
        )
      );
      ob_flush();
      flush();
      $last_status_update = time();
    }
  }
  
  // Get the final count of private messages imported
  $count = db_result(db_query('SELECT COUNT(*) FROM {pm_message}'));
  drupal_set_message(t('Successfully imported %count private messages', array('%count' => $count)));
  watchdog('boincimport', 'Successfully imported %count private messages', array('%count' => $count), WATCHDOG_INFO); 
  
  variable_set('boincimport_import_private_msg_successful', 1);
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}


/**
 * Create forum containers and forums
 */
function boincimport_forum_categories() {
  $pre = variable_get('boincimport_table_prefix', '');
  
  // check if the forum database has been successfully imported
  db_set_active('default');
  if (variable_get('boincimport_import_category_successful', 0)) {
    drupal_set_message(t('Forum Containers already imported successfully'));
    watchdog('boincimport', 'Forum Containers already imported successfully', array(), WATCHDOG_INFO); 
    return;
  }    

  // Retrieve the vocabulary vid named "Forums"
  //$forum_vid = variable_get('forum_nav_vocabulary', 0);
  $forum_vid = db_result(db_query('SELECT vid FROM {vocabulary} WHERE name="%s"', 'Forums'));
  if (!$forum_vid) {
    $forum_vocab = array(
      'name' => t('Message Boards'),
      'description' => t('The different forum categories / containers'),
    );
    taxonomy_save_vocabulary($forum_vocab);
    $forum_vid = db_result(db_query('SELECT vid FROM {vocabulary} WHERE name="%s"', 'Forums'));
  }
  drupal_set_message(t('Forum vid: %forum_vid', array('%forum_vid' => $forum_vid)));
  watchdog('boincimport', 'Forum vid is set to: %forum_vid', array('%forum_vid' => $forum_vid), WATCHDOG_INFO); 

  // Get both categories and forums from BOINC
  db_set_active('boinc');
  
  // Import top level forum categories first
  $boincforums = db_query('SELECT * FROM %scategory ORDER BY orderID', $pre);
  $importing_categories = TRUE;
  $hidden_category_created = FALSE;
  $category_map = array();
  
  db_set_active('default');
  
  do {
    $hidden_forum = FALSE;
    $open_forum = FALSE;
    
    // Manually define the hidden category first, hence the awkward do loop.
    // This is to support empty categories being automatically hidden.
    
    if (!$hidden_category_created) {
      // Create a hidden category to catch any forums that don't have a
      // valid category defined
      $boincforum = new stdClass();
      $boincforum->name = t('Hidden');
      $boincforum->id = 0;
      $hidden_category_created = TRUE;
      $hidden_forum = TRUE;
    }
    
    if ($importing_categories) {
      if (!$boincforum) {
        // Once all forum categories are done, import the public forums
        db_set_active('boinc');
        $importing_categories = FALSE;
        $boincforums = db_query('
          SELECT * FROM %sforum
          WHERE parent_type = 0
          ORDER BY category', $pre
        );
        db_set_active('default');
        continue;
      }
      // Set term parameters for categories
      $forum_id = 0;
      $parent_id = 0;
      $name = $boincforum->name;
      $description = '';
      $weight = 0;
      // If this container is empty, put it into the hidden container
      db_set_active('boinc');
      $forums_contained = db_result(db_query('SELECT count(*) FROM %sforum WHERE parent_type = 0 AND category = %d', $pre, $boincforum->id));
      db_set_active('default');
      if (!$forums_contained) {
        $parent_id = $category_map[0];
        $hidden_forum = TRUE;
      }
    } else {
      // Set term parameters for forums
      $forum_id = $boincforum->id;
      $parent_id = isset($category_map[$boincforum->category]) ? $category_map[$boincforum->category] : $category_map[0];
      $name = $boincforum->title;
      $description = $boincforum->description;
      $weight = $boincforum->orderID;
      if ($parent_id == $category_map[0]) {
        // If this forum is hidden, flag for appropriate access controls
        $hidden_forum = TRUE;
      }
      if ($name == 'Getting Started') {
        // Must allow users to post in this forum even if they have no credit!
        $open_forum = TRUE;
      }
    }
    
    // Try to detect a BOINC news forum and flag it so that news can be
    // imported into a Drupal news content type later
    if ($name == 'News') {
      // Save the ID of the News forum for later import
      variable_set('boincimport_news_forum_id', $forum_id);
      continue;
    }
    
    // If the category / forum term doesn't exist already, save to the vocabulary
    if (!db_result(db_query('SELECT forum_id FROM {boincimport_temp_forum} WHERE forum_id = %d', $forum_id))) {
      $forum = array(
        'name' => $name,
        'vid' => $forum_vid,
        'description' => $description,
        'parent' => $parent_id,
        'weight' => $weight,
      );
      $forum['name'] = _boincimport_text_sanitize($forum['name']);
      $forum['description'] = _boincimport_text_sanitize($forum['description']);

      taxonomy_save_term($forum);
      
      // Serialize the forum containers
      if ($importing_categories) {
        // This is a category
        $containers = variable_get('forum_containers', array());
        $containers[] = $forum['tid'];
        variable_set('forum_containers', $containers);
        // Note the taxonomy ID for mapping forums to categories
        $category_map[$boincforum->id] = $forum['tid'];
      } else {
        // Save the forum ID to a temporary reference table - yes this is hackish.
        db_query('INSERT INTO {boincimport_temp_forum} (forum_id, tid) VALUES (%d, %d)', $boincforum->id, $forum['tid']);
      }
      
      // Set access controls
      $forum_perms = array();
      $role_map = array_flip(user_roles());
      $forum_perms[$role_map['anonymous user']] = array(
        'view' => (int) !$hidden_forum,
        'update' => 0,
        'delete' => 0,
        'create' => 0,
      );
      $forum_perms[$role_map['authenticated user']] = array(
        'view' => (int) !$hidden_forum,
        'update' => 0,
        'delete' => 0,
        'create' => 0,
      );
      $forum_perms[$role_map['community member']] = array(
        'view' => (int) !$hidden_forum,
        'update' => 0,
        'delete' => 0,
        'create' => (int) $open_forum,
      );
      $forum_perms[$role_map['verified contributor']] = array(
        'view' => (int) !$hidden_forum,
        'update' => 0,
        'delete' => 0,
        'create' => (int) !$hidden_forum,
      );
      $forum_perms[$role_map['moderator']] = array(
        'view' => 1,
        'update' => 1,
        'delete' => 0,
        'create' => 1,
      );
      foreach ($forum_perms as $role => $perm) {
        db_query('
          INSERT INTO {forum_access}
          SET  tid = %d, rid = %d,
            grant_view = %d, grant_update = %d,
            grant_delete = %d, grant_create = %d
          ON DUPLICATE KEY UPDATE
            grant_view = %d, grant_update = %d,
            grant_delete = %d, grant_create = %d',
          $forum['tid'], $role,
          $perm['view'], $perm['update'],
          $perm['delete'], $perm['create'],
          $perm['view'], $perm['update'],
          $perm['delete'], $perm['create']);
      }
    }
  } while ($boincforum = db_fetch_object($boincforums) OR $importing_categories);
  
  // Set the forums import successful flag in the variable table
  variable_set('boincimport_import_category_successful', '1');
  
  // Clear permissions cache...?
  variable_del('forum_access_rids');

  $count = db_result(db_query('SELECT COUNT(*) FROM {boincimport_temp_forum}'));
  drupal_set_message(t('Successfully Imported %count forums and containers.', array('%count' => $count)));
  watchdog('boincimport', 'Successfully Imported %count forums and containers.', array('%count' => $count), WATCHDOG_INFO); 
}

/**
 * Imports BOINC topics to Drupal equivalent forum nodes
 */
function boincimport_forum_topics() {
  $pre = variable_get('boincimport_table_prefix', '');
  $input_format = variable_get('boincimport_input_format', 0);
  $news_forum_id = variable_get('boincimport_news_forum_id', 0);
  
  // Check if the topics have been successfully imported
  db_set_active('default');
  if (variable_get('boincimport_import_topic_successful', 0)) {
    drupal_set_message(t('Topics already imported successfully'));
    watchdog('boincimport', 'Topics already imported successfully', array(), WATCHDOG_INFO); 
    return;
  }

  // Get all normal (non-team) topics from BOINC
  db_set_active('boinc');
  $topics = db_query('
    SELECT t.* FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 0
    ORDER BY id', $pre, $pre
  );
  $topic_count = db_result(db_query('
    SELECT COUNT(*) FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 0', $pre, $pre
  ));
  db_set_active('default');
  drupal_set_message(t('Found %topic_count discussion threads: Beginning Import', array('%topic_count' => $topic_count)));
  watchdog('boincimport', 'Found %topic_count discussion threads: Beginning Import', array('%topic_count' => $topic_count), WATCHDOG_INFO); 
  
  $total_topics_imported = 0;
  $total_runtime = 0;
  $last_status_update = 0;
  $topics_without_update = 0;
  
  echo t('Importing %topic_count discussion topics from BOINC database', array('%topic_count' => $topic_count));
  ob_flush();
  flush();
  
  // Import the topics into Drupal
  while ($topic = db_fetch_object($topics)) {
    
    // Keep track of how long things are taking and provide occasional status
    $start_time = microtime(true);
    
    // Check if this topic has been imported already just to be sure
    $topic_exists = db_result(db_query('SELECT count(*) FROM {boincimport_temp_topic} WHERE topic_id = %d', $topic->id));
    if ($topic_exists) continue;
    
    // Get the content of the post that started the topic
    db_set_active('boinc');
    $query = db_query('
      SELECT id, content
      FROM %spost
      WHERE thread = %d
      ORDER BY timestamp ASC
      LIMIT 1', $pre, $topic->id);
    db_set_active('default');
      
    // Skip this topic if there are no posts
    if (!$post = db_fetch_object($query)) {
      drupal_set_message(t('Could not find any posts in thread: %topic_id', array('%topic_id' => $topic->id)));    
      watchdog('boincimport', 'Could not find any posts in thread: %topic_id', array('%topic_id' => $topic->id), WATCHDOG_INFO); 
      continue;
    }
    
    // Get the user and term IDs along with other data to define the topic
    $uid = get_drupal_id($topic->owner);
    $tid = db_result(db_query('SELECT tid FROM {boincimport_temp_forum} WHERE forum_id = %d', $topic->forum));
    if (!$topic->owner) {
      $uid = 0;
    }
    
    $node_type = 'forum';
    $promote = 0;
    $comment = ($topic->locked) ? 1 : 2;
    
    $post->content = _boincimport_strip_bbcode($post->content);
    $post->content = _boincimport_text_sanitize($post->content);
    $teaser = node_teaser($post->content);
    
    if ($topic->timestamp < $topic->create_time) {
      $topic->timestamp = $topic->create_time;
    }
    
    // If dealing with a News topic, be sure it is imported as such
    if ($news_forum_id AND $topic->forum == $news_forum_id) {
      $node_type = 'news';
      $promote = 1;
    }

    // Construct the thread as a forum topic node
    $node = array(
      'type' => $node_type,
      'title' => $topic->title,
      'uid' => $uid,
      'status' => ($topic->hidden) ? 0 : 1,  // published or not
      'promote' => $promote,
      'created' => $topic->create_time,
      'changed' => $topic->timestamp,
      'comment' => $comment,
      'moderate' => 0,
      'body' => $post->content,
      'sticky' => $topic->sticky,
      'format' => $input_format,
      'teaser' => $teaser,
    );
    $node['title'] = _boincimport_text_sanitize($node['title']);
    $node['tid'] = $tid;
    
    // Save the topic node
    $node = (object) $node; // node_save requires an object form
    node_save($node);
    taxonomy_node_save($node, array($tid));

    if ($node->nid) {
      db_query('INSERT INTO {boincimport_temp_topic} (topic_id, post_id, nid) VALUES (%d, %d, %d)', $topic->id, $post->id, $node->nid);
      // Hack to keep the topics in correct order
      db_query('UPDATE {node_comment_statistics} SET last_comment_timestamp = %d WHERE nid = %d', $node->created, $node->nid);
    } else {
      drupal_set_message(t('Failed importing %topic_id', array('%topic_id' => $topic->id)), 'error');
      watchdog('boincimport', 'Failed importing %topic_id', array('%topic_id' => $topic->id), WATCHDOG_ERROR); 
      continue;
    }

    $processing_time = round(microtime(true) - $start_time, 2);
    
    // Keep a running tally of things and provide occasional status updates
    $total_topics_imported++;
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    $topics_without_update++;
    if ($last_status_update > 60 OR $topics_without_update >= 1000) {
      $progress = round(100*($total_topics_imported/$topic_count), 1);
      echo "<br/>\n" . t("%num_topics topics imported in %time (%progress% complete)", array('%num_topics' => $total_topics_imported, '%time' => gmdate('H:i:s', $total_runtime), '%progress' => $progress));
      ob_flush();
      flush();
      $last_status_update = 0;
      $topics_without_update = 0;
    } elseif ($topics_without_update % 50 == 0) {
      echo '.';
      ob_flush();
      flush();
    }
  }
  
  // Set the topic import successful flag in the variable table
  variable_set('boincimport_import_topic_successful', '1');
  
  $count = db_result(db_query('SELECT COUNT(*) FROM {boincimport_temp_topic}'));
  drupal_set_message(t('Successfully Imported %count topics', array('%count' => $count)));
  watchdog('boincimport', 'Successfully Imported %count topics', array('%count' => $count), WATCHDOG_INFO); 
  
  boincimport_subscriptions();
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}

/**
 * Import BOINC forum posts as Drupal comments
 */
function boincimport_forum_posts() {
  $pre = variable_get('boincimport_table_prefix', '');
  $input_format = variable_get('boincimport_input_format', 0);
  
  // Check if the post data has been successfully imported
  if (variable_get('boincimport_import_post_successful', 0)) {
    drupal_set_message(t('Posts already imported successfully'));
    watchdog('boincimport', 'Posts already imported successfully', array(), WATCHDOG_INFO); 
    return;
  }    

  if (!variable_get('boincimport_import_post_started', 0)) {
    variable_set('boincimport_import_post_started', 1);
  }
  
  // Get the BOINC threads and get a count of what we're dealing with
  db_set_active('boinc');
  $topic_ids = db_query('
    SELECT t.id FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 0
    ORDER BY id', $pre, $pre
  );
  $topic_count = db_result(db_query("
    SELECT COUNT(t.id) FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 0", $pre
  ));
  $post_count = db_result(db_query("
    SELECT COUNT(p.id) FROM %spost p
    JOIN %sthread t ON t.id = p.thread
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 0", $pre, $pre, $pre
  ));
  db_set_active('default');
  
  drupal_set_message(t('Found %post_count posts in %topic_count threads: Beginning Import', array('%post_count' => $post_count, '%topic_count' => $topic_count)));
  watchdog('boincimport', 'Found %post_count posts in %topic_count threads: Beginning Import', array('%post_count' => $post_count, '%topic_count' => $topic_count), WATCHDOG_INFO); 
  
  $total_posts_imported = 0;
  $total_runtime = 0;
  $last_status_update = 0;
  $topics_without_update = 0;
  $errors = 0;
  $empty_posts = 0;
  
  echo t('Importing %post_count posts in %topic_count threads from BOINC database', array('%post_count' => $post_count, '%topic_count' => $topic_count));
  ob_flush();
  flush();
  
  // Import the posts into Drupal by discussion thread
  while ($topic = db_fetch_object($topic_ids)) {
    
    // Keep track of how long things are taking to provide occasional status
    $start_time = microtime(true);
    
    db_set_active('boinc');
    $posts = db_query('
      SELECT id, user, thread, timestamp, content, parent_post, hidden
      FROM %spost WHERE thread = %d ORDER BY timestamp ASC', $pre, $topic->id);
    db_set_active('default');
    
    $first_post = true;

    while ($post = db_fetch_object($posts)) {
      
      // Skip the first post as it has already been imported as a topic
      if ($first_post) {
        $first_post = false;
        continue;
      }
      
      // Make sure the post is valid
      if (!$post->content) {
        $empty_posts++;
        continue;
      }

      // Skip the post if it has already been imported
      $post_exists = db_result(db_query('SELECT COUNT(*) FROM {boincimport_temp_post} WHERE post_id = %d', $post->id));
      if ($post_exists) {
        continue;
      }
      
      // Get user, node, and parent IDs for the post and sanitize
      $uid = get_drupal_id($post->user);
      $node = (db_fetch_object(db_query('SELECT nr.nid, nr.title FROM {boincimport_temp_topic} btt LEFT JOIN {node_revisions} AS nr ON btt.nid = nr.nid  WHERE btt.topic_id = %d', $post->thread)));
      $nid = $node->nid;
      $pid = db_result(db_query('SELECT cid FROM {boincimport_temp_post} WHERE post_id = %d', $post->parent_post));
      if (is_null($pid)) $pid = 0;
      if (!$uid) $uid = 0;
      
      $post->content = _boincimport_strip_bbcode($post->content);
      $post->content = _boincimport_text_sanitize($post->content);
      
      $topic_reply = db_result(db_query('SELECT COUNT(*) FROM {comments} WHERE nid = %d', $nid));
      $post_reply = $pid;
      
      if ($post_reply OR $topic_reply) {
        // Create a subject for the post from the post content. The body may be in 
        // any format, so we:
        //  1) Filter it into HTML
        //  2) Strip out all HTML tags
        //  3) Convert entities back to plain-text.
        // Note: format is checked by check_markup().
        $subject = truncate_utf8(trim(decode_entities(strip_tags(check_markup($post->content, $input_format)))), 29, TRUE);
        // Replace "Quote:" with "RE:"
        $subject = str_replace('Quote:', 'RE: ', $subject);
        // Fringe cases where the comment body is populated only by HTML tags
        // will require a default subject...
        if ($subject === '')
          $subject = "RE: {$node->title}";
      } else {
        // This is the first post in the topic
        $subject = $node->title;
      }
      
      // Construct the post as a Drupal comment
      $comment = array(
        'pid' => $pid,
        'nid' => $nid,
        'uid' => $uid,
        'subject' => $subject,
        'comment' => $post->content,
        'timestamp' => $post->timestamp,
        'status' => $post->hidden,
        'format' => $input_format
      );
      
      // Save the comment
      if ($cid = boincimport_forum_comment_save($comment)) {
        db_query('INSERT INTO {boincimport_temp_post} (post_id, cid) VALUES (%d, %d)', $post->id, $cid);
        $total_posts_imported++;
      } else {
        drupal_set_message(t('Failed importing %post_id', array('%post_id' => $post->id)), 'error');
        watchdog('boincimport', 'Failed importing %post_id', array('%post_id' => $post->id), WATCHDOG_ERROR); 
        $errors++;
      }
    }
    
    $processing_time = round(microtime(true) - $start_time, 2);
    
    // Keep a running tally of things and provide occasional status updates
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    $topics_without_update++;
    if ($last_status_update > 60 OR $topics_without_update >= 500) {
      $progress = round(100*($total_posts_imported/$post_count), 1);
      echo "<br/>\n" . t("%num_posts posts imported in %time (%progress% complete)", array('%num_posts' => $total_posts_imported, '%time' => gmdate('H:i:s', $total_runtime), '%progress' => $progress));
      ob_flush();
      flush();
      $last_status_update = 0;
      $topics_without_update = 0;
    } elseif ($topics_without_update % 20 == 0) {
      echo '.';
      ob_flush();
      flush();
    }
  }
  
  // Set the post import successful flag in the variable table
  variable_set('boincimport_import_post_successful', '1');
  drupal_set_message(t('Successfully Imported %imported posts', array('%imported' => $total_posts_imported)));
  watchdog('boincimport', 'Successfully Imported %imported posts', array('%imported' => $total_posts_imported), WATCHDOG_INFO); 
  if ($empty_posts) {
    drupal_set_message(t('Skipped importing %empty empty posts', array('%empty' => $empty_posts)));
    watchdog('boincimport', 'Skipped importing %empty empty posts', array('%empty' => $empty_posts), WATCHDOG_INFO); 
  }
  if ($errors) {
    drupal_set_message(t('There were %errors errors while importing posts', array('%errors' => $errors)), 'error');
    watchdog('boincimport', 'There were %errors errors while importing posts', array('%errors' => $errors), WATCHDOG_ERROR); 
  }
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}

/**
 * TEAM FORUM IMPORT
 */
/**
 * Import team forums
 */
function boincimport_team_forums() {
  $pre = variable_get('boincimport_table_prefix', '');
  
  // check if the forum database has been successfully imported
  db_set_active('default');
  if (variable_get('boincimport_team_forum_successful', 0)) {
    drupal_set_message(t('Team Forums already imported successfully'));
    watchdog('boincimport', 'Team Forums already imported successfully', array(), WATCHDOG_INFO); 
    return;
  }    
  
  // Get team forums from BOINC database
  db_set_active('boinc');
  $boincteam_forums = db_query('
    SELECT * FROM %sforum WHERE parent_type = 1 ORDER BY id ASC',
    $pre
  );
  db_set_active('default');
  
  $boincteam_forums_imported = 0;
  
  while ($boincteam_forum = db_fetch_object($boincteam_forums)) {
    // Set term parameters for forums
    $forum_id = $boincteam_forum->id;
    $team_id = boincteam_lookup_nid($boincteam_forum->category);
    $name = _boincimport_text_sanitize($boincteam_forum->title);
    $description = _boincimport_text_sanitize($boincteam_forum->description);
    
    db_query("
      INSERT INTO {boincteam_forum} SET 
        boinc_id = %d,
        nid = %d,
        title = '%s',
        description = '%s',
        created = %d,
        updated = %d,
        public = %d,
        min_time_between_posts = %d,
        min_total_credit_to_post = %d,
        min_avg_credit_to_post = %d",
      $forum_id, $team_id, $name, $description, $boincteam_forum->timestamp, 
      time(), 0, $boincteam_forum->post_min_interval, 
      $boincteam_forum->post_min_total_credit,
      $boincteam_forum->post_min_expavg_credit
    );
    $boincteam_forums_imported++;
  }
  
  // Set the forums import successful flag in the variable table
  variable_set('boincimport_team_forum_successful', '1');

  drupal_set_message(t('Successfully Imported %count team forums.', 
    array('%count' => $boincteam_forums_imported)));
  watchdog('boincimport', 'Successfully Imported %count team forums.',
    array('%count' => $boincteam_forums_imported), WATCHDOG_INFO); 
}

/**
 * Imports BOINC team topics to Drupal team_forum type nodes
 */
function boincimport_team_forum_topics() {
  $pre = variable_get('boincimport_table_prefix', '');
  $input_format = variable_get('boincimport_input_format', 0);
  
  // Check if the topics have been successfully imported
  db_set_active('default');
  if (variable_get('boincimport_team_topic_successful', 0)) {
    drupal_set_message(t('Team Topics already imported successfully'));
    watchdog('boincimport', 'Team Topics already imported successfully',
      array(), WATCHDOG_INFO); 
    return;
  }

  // Get all team topics from BOINC
  db_set_active('boinc');
  $topics = db_query('
    SELECT t.* FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    JOIN %spost p ON p.thread = t.id
    WHERE f.parent_type = 1
    ORDER BY id', $pre, $pre, $pre
  );
  $total_topic_count = db_result(db_query('
    SELECT COUNT(*) FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 1', $pre, $pre
  ));
  $topic_count = db_result(db_query('
    SELECT COUNT(*) FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    JOIN %spost p ON p.thread = t.id
    WHERE f.parent_type = 1', $pre, $pre, $pre
  ));
  $empty_topic_count = $total_topic_count - $topic_count;
  db_set_active('default');
  drupal_set_message(t('Found %topic_count team discussion threads: Beginning Import', array('%topic_count' => $total_topic_count)));
  watchdog('boincimport', 'Found %topic_count team discussion threads: Beginning Import', array('%topic_count' => $total_topic_count), WATCHDOG_INFO); 
  
  $total_topics_imported = 0;
  $topics_already_imported = 0;
  $topic_import_errors = 0;
  $total_runtime = 0;
  $last_status_update = 0;
  $topics_without_update = 0;
  
  echo t('Importing %topic_count team discussion topics from BOINC database', array('%topic_count' => $total_topic_count));
  ob_flush();
  flush();
  
  // Import the topics into Drupal
  while ($topic = db_fetch_object($topics)) {
    
    // Keep track of how long things are taking and provide occasional status
    $start_time = microtime(true);
    
    // Check if this topic has been imported already just to be sure
    $topic_exists = db_result(db_query('SELECT count(*) FROM {boincimport_temp_topic} WHERE topic_id = %d', $topic->id));
    if ($topic_exists) {
      $topics_already_imported++;
      continue;
    }
    
    // Verify that the team forum container has been imported
    $team_forum_id = db_result(db_query("
      SELECT tfid FROM {boincteam_forum} WHERE boinc_id = %d",
      $topic->forum
    ));
    if (!$team_forum_id) {
      drupal_set_message(t('Aborting import of topic %topic_id: The parent forum is missing', array('%topic_id' => $topic->id)), 'error');
      watchdog('boincimport', 'Aborting import of topic %topic_id: The parent forum is missing', array('%topic_id' => $topic->id), WATCHDOG_ERROR);
      $topic_import_errors++;
      continue;
    }
    
    // Get the content of the post that started the topic
    db_set_active('boinc');
    $query = db_query('
      SELECT id, content
      FROM %spost
      WHERE thread = %d
      ORDER BY timestamp ASC
      LIMIT 1', $pre, $topic->id);
    db_set_active('default');
      
    // Skip this topic if there are no posts
    if (!$post = db_fetch_object($query)) {
      drupal_set_message(t('Could not find any posts in thread: %topic_id', array('%topic_id' => $topic->id)));    
      watchdog('boincimport', 'Could not find any posts in thread: %topic_id', array('%topic_id' => $topic->id), WATCHDOG_INFO);
      // Empty topics should have already been filtered out of the import, so
      // consider this an error condition
      $topic_import_errors++;
      continue;
    }
    
    // Get the user ID along with other data to define the topic
    $uid = get_drupal_id($topic->owner);
     if (!$topic->owner) {
      $uid = 0;
    }
    
    $node_type = 'team_forum';
    $promote = 0;
    $comment = ($topic->locked) ? 1 : 2;
    
    $post->content = _boincimport_strip_bbcode($post->content);
    $post->content = _boincimport_text_sanitize($post->content);
    $teaser = node_teaser($post->content);
    
    if ($topic->timestamp < $topic->create_time) {
      $topic->timestamp = $topic->create_time;
    }

    // Construct the thread as a team_forum topic node
    $node = array(
      'type' => $node_type,
      'title' => $topic->title,
      'uid' => $uid,
      'status' => ($topic->hidden) ? 0 : 1,  // published or not
      'promote' => $promote,
      'created' => $topic->create_time,
      'changed' => $topic->timestamp,
      'comment' => $comment,
      'moderate' => 0,
      'body' => $post->content,
      'sticky' => $topic->sticky,
      'format' => $input_format,
      'teaser' => $teaser,
      'tfid' => $team_forum_id,
    );
    $node['title'] = _boincimport_text_sanitize($node['title']);
    
    // Save the team topic node
    $node = (object) $node; // node_save requires an object form
    node_save($node);

    if ($node->nid) {
      db_query('
        INSERT INTO {boincimport_temp_topic} (topic_id, post_id, nid)
        VALUES (%d, %d, %d)', $topic->id, $post->id, $node->nid
      );
      // Hack to keep the topics in correct order
      db_query('UPDATE {node_comment_statistics} SET last_comment_timestamp = %d WHERE nid = %d', $node->created, $node->nid);
    } else {
      drupal_set_message(t('Failed importing %topic_id', array('%topic_id' => $topic->id)), 'error');
      watchdog('boincimport', 'Failed importing %topic_id', array('%topic_id' => $topic->id), WATCHDOG_ERROR);
      $topic_import_errors++;
      continue;
    }

    $processing_time = round(microtime(true) - $start_time, 2);
    
    // Keep a running tally of things and provide occasional status updates
    $total_topics_imported++;
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    $topics_without_update++;
    if ($last_status_update > 60 OR $topics_without_update >= 1000) {
      $progress = round(100*($total_topics_imported/$topic_count), 1);
      echo "<br/>\n" . t("%num_topics topics imported in %time (%progress% complete)", array('%num_topics' => $total_topics_imported, '%time' => gmdate('H:i:s', $total_runtime), '%progress' => $progress));
      ob_flush();
      flush();
      $last_status_update = 0;
      $topics_without_update = 0;
    } elseif ($topics_without_update % 50 == 0) {
      echo '.';
      ob_flush();
      flush();
    }
  }
  
  // Set the topic import successful flag in the variable table
  variable_set('boincimport_team_topic_successful', '1');
  
  drupal_set_message(t('Successfully Imported %count topics. (Total available: %total; skipped as empty: %empty; errors: %errors; already imported: %redundant)', 
    array(
      '%count' => $total_topics_imported,
      '%total' => $total_topic_count,
      '%empty' => $empty_topic_count,
      '%errors' => $topic_import_errors,
      '%redundant' => $topics_already_imported,
    )
  ));
  watchdog('boincimport', 'Successfully Imported %count topics', array('%count' => $total_topics_imported), WATCHDOG_INFO); 
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}

/**
 * Import BOINC team forum posts as Drupal comments
 */
function boincimport_team_forum_posts() {
  $pre = variable_get('boincimport_table_prefix', '');
  $input_format = variable_get('boincimport_input_format', 0);
  
  // Check if the team post data has been successfully imported
  if (variable_get('boincimport_team_post_successful', 0)) {
    drupal_set_message(t('Team Posts already imported successfully'));
    watchdog('boincimport', 'Team Posts already imported successfully', array(), WATCHDOG_INFO); 
    return;
  }    

  if (!variable_get('boincimport_team_post_started', 0)) {
    variable_set('boincimport_team_post_started', 1);
  }
  
  // Get the BOINC threads and get a count of what we're dealing with
  db_set_active('boinc');
  $topic_ids = db_query('
    SELECT t.id FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 1
    ORDER BY id', $pre, $pre
  );
  $topic_count = db_result(db_query("
    SELECT COUNT(t.id) FROM %sthread t
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 1", $pre, $pre
  ));
  $post_count = db_result(db_query("
    SELECT COUNT(p.id) FROM %spost p
    JOIN %sthread t ON t.id = p.thread
    JOIN %sforum f ON f.id = t.forum
    WHERE f.parent_type = 1", $pre, $pre, $pre
  ));
  db_set_active('default');
  
  drupal_set_message(t('Found %post_count posts in %topic_count team threads: Beginning Import', array('%post_count' => $post_count, '%topic_count' => $topic_count)));
  watchdog('boincimport', 'Found %post_count posts in %topic_count team threads: Beginning Import', array('%post_count' => $post_count, '%topic_count' => $topic_count), WATCHDOG_INFO); 
  
  $total_posts_imported = 0;
  $total_runtime = 0;
  $last_status_update = 0;
  $topics_without_update = 0;
  $errors = 0;
  $empty_posts = 0;
  
  echo t('Importing %post_count posts in %topic_count team threads from BOINC database', array('%post_count' => $post_count, '%topic_count' => $topic_count));
  ob_flush();
  flush();
  
  // Import the posts into Drupal by team discussion thread
  while ($topic = db_fetch_object($topic_ids)) {
    
    // Keep track of how long things are taking to provide occasional status
    $start_time = microtime(true);
    
    db_set_active('boinc');
    $posts = db_query('
      SELECT id, user, thread, timestamp, content, parent_post, hidden
      FROM %spost WHERE thread = %d ORDER BY timestamp ASC', $pre, $topic->id);
    db_set_active('default');
    
    $first_post = true;

    while ($post = db_fetch_object($posts)) {
      
      // Skip the first post as it has already been imported as a topic
      if ($first_post) {
        $first_post = false;
        continue;
      }
      
      // Make sure the post is valid
      if (!$post->content) {
        $empty_posts++;
        continue;
      }

      // Skip the post if it has already been imported
      $post_exists = db_result(db_query('SELECT COUNT(*) FROM {boincimport_temp_post} WHERE post_id = %d', $post->id));
      if ($post_exists) {
        continue;
      }
      
      // Get user, node, and parent IDs for the post and sanitize
      $uid = get_drupal_id($post->user);
      $node = (db_fetch_object(db_query('SELECT nr.nid, nr.title FROM {boincimport_temp_topic} btt LEFT JOIN {node_revisions} AS nr ON btt.nid = nr.nid  WHERE btt.topic_id = %d', $post->thread)));
      $nid = $node->nid;
      $pid = db_result(db_query('SELECT cid FROM {boincimport_temp_post} WHERE post_id = %d', $post->parent_post));
      if (is_null($pid)) $pid = 0;
      if (!$uid) $uid = 0;
      
      $post->content = _boincimport_strip_bbcode($post->content);
      $post->content = _boincimport_text_sanitize($post->content);
      
      $topic_reply = db_result(db_query('SELECT COUNT(*) FROM {comments} WHERE nid = %d', $nid));
      $post_reply = $pid;
      
      if ($post_reply OR $topic_reply) {
        // Create a subject for the post from the post content. The body may be in 
        // any format, so we:
        //  1) Filter it into HTML
        //  2) Strip out all HTML tags
        //  3) Convert entities back to plain-text.
        // Note: format is checked by check_markup().
        $subject = truncate_utf8(trim(decode_entities(strip_tags(check_markup($post->content, $input_format)))), 29, TRUE);
        // Replace "Quote:" with "RE:"
        $subject = str_replace('Quote:', 'RE: ', $subject);
        // Fringe cases where the comment body is populated only by HTML tags
        // will require a default subject...
        if ($subject === '')
          $subject = "RE: {$node->title}";
      } else {
        // This is the first post in the topic
        $subject = $node->title;
      }
      
      // Construct the post as a Drupal comment
      $comment = array(
        'pid' => $pid,
        'nid' => $nid,
        'uid' => $uid,
        'subject' => $subject,
        'comment' => $post->content,
        'timestamp' => $post->timestamp,
        'status' => $post->hidden,
        'format' => $input_format
      );
      
      // Save the comment
      if ($cid = boincimport_forum_comment_save($comment)) {
        db_query('INSERT INTO {boincimport_temp_post} (post_id, cid) VALUES (%d, %d)', $post->id, $cid);
        $total_posts_imported++;
      } else {
        drupal_set_message(t('Failed importing %post_id', array('%post_id' => $post->id)), 'error');
        watchdog('boincimport', 'Failed importing %post_id', array('%post_id' => $post->id), WATCHDOG_ERROR); 
        $errors++;
      }
    }
    
    $processing_time = round(microtime(true) - $start_time, 2);
    
    // Keep a running tally of things and provide occasional status updates
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    $topics_without_update++;
    if ($last_status_update > 60 OR $topics_without_update >= 500) {
      $progress = round(100*($total_posts_imported/$post_count), 1);
      echo "<br/>\n" . t("%num_posts posts imported in %time (%progress% complete)", array('%num_posts' => $total_posts_imported, '%time' => gmdate('H:i:s', $total_runtime), '%progress' => $progress));
      ob_flush();
      flush();
      $last_status_update = 0;
      $topics_without_update = 0;
    } elseif ($topics_without_update % 20 == 0) {
      echo '.';
      ob_flush();
      flush();
    }
  }
  
  // Set the post import successful flag in the variable table
  variable_set('boincimport_team_post_successful', '1');
  drupal_set_message(t('Successfully Imported %imported posts', array('%imported' => $total_posts_imported)));
  watchdog('boincimport', 'Successfully Imported %imported posts', array('%imported' => $total_posts_imported), WATCHDOG_INFO); 
  if ($empty_posts) {
    drupal_set_message(t('Skipped importing %empty empty posts', array('%empty' => $empty_posts)));
    watchdog('boincimport', 'Skipped importing %empty empty posts', array('%empty' => $empty_posts), WATCHDOG_INFO); 
  }
  if ($errors) {
    drupal_set_message(t('There were %errors errors while importing posts', array('%errors' => $errors)), 'error');
    watchdog('boincimport', 'There were %errors errors while importing posts', array('%errors' => $errors), WATCHDOG_ERROR); 
  }
  
  // Indicate that the process is complete and return to the main migration page
  echo "<br/>\n<br/>\n";
  echo 'complete. redirecting';
  ob_flush();
  flush();
  for ($i = 0; $i < 3; $i++) {
    sleep(1);
    echo '.';
    ob_flush();
    flush();
  }
  echo "<script>location.replace('{$_SERVER['REQUEST_URI']}');</script>";
  ob_flush();
  flush();
}


/**
 * Import subscriptions for users
 */
function boincimport_subscriptions() {
  $pre = variable_get('boincimport_table_prefix', '');
  $subscriptions_imported = 0;
  $start_time = microtime(true);
  $total_runtime = 0;
  $last_status_update = time();
  
  // See how many subscriptions need to be processed
  db_set_active('boinc');
  $users_with_subscriptions = db_result(db_query('
    SELECT COUNT(DISTINCT userid) FROM %ssubscriptions'));
  $subscription_count = db_result(db_query('
    SELECT COUNT(*) FROM %ssubscriptions'));
  db_set_active('default');
  
  echo "<br/>\n<br/>\n";
  
  if (!$subscription_count) {
    drupal_set_message(t('There were no subscriptions found: Skipping import'));
    watchdog('boincimport', 'There were no subscriptions found: Skipping import', array(), WATCHDOG_INFO); 
    echo t('There were no subscriptions found: Skipping import.');
    ob_flush();
    flush();
    return;
  }

  drupal_set_message(t('Found %subscription_count subscriptions: Beginning Import', array('%subscription_count' => $subscription_count)));
  watchdog('boincimport', 'Found %subscription_count subscriptions: Beginning Import', array('%subscription_count' => $subscription_count), WATCHDOG_INFO); 
  
  // Subscription flagging requires the use of the Drupal user account object,
  // therefore it requires batch processing to avoid exhausting system
  // resources. (see also boincimport_users() function)
  
  $batch_size = variable_get('boincimport_user_batch_size', 50);
  $batch_limit = $users_with_subscriptions - ($users_with_subscriptions % $batch_size) + $batch_size;
  $import_script_path = dirname(__FILE__) . '/includes';
  $import_script = "{$import_script_path}/import_subscriptions.php";
  $total_subscriptions_imported = 0;
  $total_runtime = 0;
  $last_status_update = 0;
  $batches_without_update = 0;
  
  echo t('Importing %subscription_count subscriptions from BOINC database', array('%subscription_count' => $subscription_count));
  ob_flush();
  flush();
  
  for ($batch = 0; $batch < $batch_limit; $batch+=$batch_size) {
    // Import a batch of subscriptions and indicate progress
    $start_time = microtime(true);
    $subscriptions_imported = 0;
    $subscriptions_imported = (int) exec("php {$import_script} {$batch} {$batch_size}");
    $processing_time = round(microtime(true) - $start_time, 2);
    echo '.';
    ob_flush();
    flush();
    
    // Keep a running tally of things and provide occasional status updates
    $total_subscriptions_imported += $subscriptions_imported;
    $total_runtime += $processing_time;
    $last_status_update += $processing_time;
    $batches_without_update++;
    if ($last_status_update > 60 OR $batches_without_update > 50 OR $batch + $batch_size >= $batch_limit) {
      $progress = round(100*$total_subscriptions_imported/$subscription_count, 1);
      echo "<br/>\n" . t("%num_subscriptions subscriptions imported in %time (%progress% complete)", array('%num_subscriptions' => $total_subscriptions_imported, '%time' => gmdate('H:i:s', $total_runtime), '%progress' => $progress));
      ob_flush();
      flush();
      $last_status_update = 0;
      $batches_without_update = 0;
    }
  }
  
  // Get the final count of subscriptions
  drupal_set_message(t('Successfully imported %count subscriptions', array('%count' => $total_subscriptions_imported)));
  watchdog('boincimport', 'Successfully imported %count subscriptions', array('%count' => $total_subscriptions_imported), WATCHDOG_INFO); 
}






/**
 * Clean UP
 */
function boincimport_process_cleanup() {
  db_set_active('default');
  
  variable_del('boincimport_import_user_successful');
  variable_del('boincimport_import_user_started');
  variable_del('boincimport_import_team_successful');
  variable_del('boincimport_import_team_started');
  variable_del('boincimport_import_category_successful');
  variable_del('boincimport_replace_url_successful');
  variable_del('boincimport_import_category_started');
  variable_del('boincimport_import_topic_successful');
  variable_del('boincimport_import_topic_started');
  variable_del('boincimport_import_post_successful');
  variable_del('boincimport_import_post_started');
  variable_del('boincimport_team_forum_successful');
  variable_del('boincimport_team_topic_successful');
  variable_del('boincimport_team_post_successful');
  variable_del('boincimport_team_post_started');
  variable_del('boincimport_ready');
  variable_del('boincimport_db_url');
  variable_del('boincimport_tested');
  variable_del('boincimport_db_configured');
  variable_del('boincimport_table_prefix');
  variable_del('boincimport_team_types');
  variable_del('boincimport_time_limit');
  variable_del('boincimport_import_lurkers');
  variable_del('boincimport_import_polls'); 
  variable_del('boincimport_import_poll_started');
  variable_del('boincimport_import_poll_successful');
  variable_del('boincimport_import_pm_successful');
  variable_del('boincimport_encode');
  variable_del('boincimport_encoding_phpbb');
  variable_del('boincimport_encoding_drupal');
  variable_del('boincimport_version');

  db_query('DELETE FROM {cache}');
}

/**
 * Helper Functions
 */

function boincimport_forum_comment_save($edit) {
  // Here we are building the thread field.  See the comment in comment_render().
  if ($edit['pid'] == 0) {
    // This is a comment with no parent comment (depth 0): we start by retrieving
    // the maximum thread level.
    $max = db_result(db_query('SELECT MAX(thread) FROM {comments} WHERE nid = %d', $edit['nid']));
    // Strip the "/" from the end of the thread.
    $max = rtrim($max, '/');
    $thread = int2vancode(vancode2int($max)+1) .'/';
  } else {
    // This is comment with a parent comment: we increase the part of the thread
    // value at the proper depth.
    $parent = db_fetch_object(db_query('SELECT * FROM {comments} WHERE cid = %d', $edit['pid']));
    // Strip the "/" from the end of the parent thread.
    $parent->thread = (string) rtrim((string) $parent->thread, '/');
    // Get the max value in _this_ thread.
    $max = db_result(db_query("SELECT MAX(thread) FROM {comments} WHERE thread LIKE '%s.%%' AND nid = %d", $parent->thread, $edit['nid']));
    if ($max == '') {
      // First child of this parent.
      $thread = $parent->thread .'.'. int2vancode(1) .'/';
    } else {
      // Strip the "/" at the end of the thread.
      $max = rtrim($max, '/');
      // We need to get the value at the correct depth.
      $parts = explode('.', $max);
      $parent_depth = count(explode('.', $parent->thread));
      $last = $parts[$parent_depth];
      // Finally, build the thread field for this new comment.
      $thread = $parent->thread .'.'. int2vancode(vancode2int($last) + 1) .'/';
    }
  }

  $status = 0; // 1 - not published, 0 - published
  $format = variable_get('boincimport_input_format', 0);
  $score = 0; // 0 default value, comments get higher score depending on the author's roles
  $users = serialize(array(0 => 1));  // default value for everybody!!
  
  if ($edit['uid'] === $user->uid) { // '===' because we want to modify anonymous users too
    $edit['name'] = $user->name;
  }

  db_query("INSERT INTO {comments} (nid, pid, uid, subject, comment, format, hostname, timestamp, status, thread, name) VALUES (%d, %d, %d, '%s', '%s', %d, '%s', %d, %d, '%s', '%s')", $edit['nid'], $edit['pid'], $edit['uid'], $edit['subject'], $edit['comment'], $edit['format'], ip_address(), $edit['timestamp'], $edit['status'], $thread, $edit['name']);
  $edit['cid'] = db_last_insert_id('comments', 'cid');
  _comment_update_node_statistics($edit['nid']);

  return $edit['cid'];
}

/**
 * Strips text of extra phpbb3 markup and if requested, also strips all bbcode from text.
 */
function _boincimport_strip_bbcode($text) {
  // Strip the text of extra markup - regular expressions taken from phpbb3 includes/function.php, function get_preg_expression().
  $match = array(
    '#<!\-\- e \-\-><a href="mailto:(.*?)">.*?</a><!\-\- e \-\->#',
    '#<!\-\- l \-\-><a (?:class="[\w-]+" )?href="(.*?)(?:(&amp;|\?)sid=[0-9a-f]{32})?">.*?</a><!\-\- l \-\->#',
    '#<!\-\- ([mw]) \-\-><a (?:class="[\w-]+" )?href="(.*?)">.*?</a><!\-\- \1 \-\->#',
    '#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#',
    '#<!\-\- .*? \-\->#s',
    '#<.*?>#s',
  );
  $replace = array('$1', '$1', '$2', '$1', '', '');
  $text = preg_replace($match, $replace, $text);

  // If BBcode conversion to has been selected, the following will convert the
  // BBcode to normal html
  if (variable_get('boincimport_bbcode', 0)) {
    $input_format = variable_get('boincimport_input_format', 0);
    $text = bbcode_filter('process', 0 , $input_format, $text);
  }
  return $text;
}

/**
 * Function to properly encode strings.
 */
function _boincimport_text_sanitize($text) {
  $input_format = variable_get('boincimport_input_format', 0);
  $text = html_entity_decode($text, ENT_QUOTES, 'utf-8');
  // Be sure the text is filtered for the default input format
  $text = check_markup($text, $input_format);
  return $text;
}

/**
 * Functions for updating links via preg_replace
 */
function _boincimport_replace_links_topic($matches) {
  global $base_path;
  $topic = db_fetch_object(db_query('SELECT nid FROM {boincimport_temp_topic} WHERE topic_id = %d', $matches[1]));
  $link = "{$base_path}node/{$topic->nid}";
  return $link;
}

/**
 * Replace links that include anchors to specific posts. If the given post is the first
 * in the thread, it is a topic node in Drupal, not a comment.
 */
function _boincimport_replace_links_post($matches) {
  global $base_path;
  $comment = db_fetch_object(db_query('SELECT c.cid, c.nid FROM {boincimport_temp_post} p JOIN {comments} c ON c.cid = p.cid WHERE p.post_id = %d', $matches[4]));
  if ($comment) $link = "{$base_path}node/{$comment->nid}#comment-{$comment->cid}";
  else $link = _boincimport_replace_links_topic($matches);
  return $link;
}

function _boincimport_replace_links_forum($matches) {
  global $base_path;
  $forum = db_fetch_object(db_query('SELECT tid FROM {boincimport_temp_forum} WHERE forum_id = %d', $matches[1]));
  $link = "{$base_path}forum/{$forum->tid}";
  return $link;
}

function _boincimport_replace_links_user($matches) {
  global $base_path;
  // If this is an RPC link, ignore it
  if (preg_match('{format=xml}i', $matches[0])) {
    return $matches[0];
  }
  else {
    $uid = db_result(db_query('SELECT uid FROM {boincuser} WHERE boinc_id = %d', $matches[1]));
    $link = "{$base_path}user/{$uid}";
    return $link;
  }
}

function _boincimport_replace_links_workunit($matches) {
  global $base_path;
  $link = "{$base_path}workunit/{$matches[1]}";
  return $link;
}

function _boincimport_replace_links_result($matches) {
  global $base_path;
  $link = "{$base_path}task/{$matches[1]}";
  return $link;
}

function _boincimport_replace_links_host_results($matches) {
  global $base_path;
  $link = "{$base_path}host/{$matches[1]}/tasks";
  return $link;
}

function _boincimport_replace_links_host($matches) {
  global $base_path;
  $link = "{$base_path}host/{$matches[1]}";
  return $link;
}


/**
 * Replace all types of links.
 */
function _boincimport_replace_links($html) {
  global $base_path;
  // Update links to posts, threads, and forums
  $html = preg_replace_callback('{forum_thread\.php\?id=(\d+)(&\w+=\w*)*?(#(\d+)?)}i', '_boincimport_replace_links_post', $html);
  $html = preg_replace_callback('{forum_thread\.php\?id=(\d+)}i', '_boincimport_replace_links_topic', $html);
  $html = preg_replace_callback('{forum_forum\.php\?id=(\d+)}i', '_boincimport_replace_links_forum', $html);
  $html = preg_replace_callback('{show_user\.php\?userid=(\d+)(&\w+=\w*)*}i', '_boincimport_replace_links_user', $html); 
  $html = preg_replace_callback('{workunit\.php\?wuid=(\d+)}i', '_boincimport_replace_links_workunit', $html);
  $html = preg_replace_callback('{result\.php\?resultid=(\d+)}i', '_boincimport_replace_links_result', $html);
  $html = preg_replace_callback('{results\.php\?hostid=(\d+)}i', '_boincimport_replace_links_host_results', $html);
  $html = preg_replace_callback('{show_host_detail\.php\?hostid=(\d+)}i', '_boincimport_replace_links_host', $html);
  // Update any links to the top level index
  $html = preg_replace('{forum_index.php}i', "{$base_path}forum", $html);
  return $html;
}


/**
 * Replace URLs to old BOINC components with corresponding Drupal components
 */
function boincimport_replace_forum_url() {
  // Transform nodes:
  // As the topics have just been imported, there is only one vid for each nid,
  // so the query works as it is.
  $result = db_query('SELECT btt.nid, nr.body, nr.teaser FROM {boincimport_temp_topic} AS btt LEFT JOIN {node_revisions} AS nr ON btt.nid = nr.nid');
  while ($node = db_fetch_object($result)) {
    $original_body = $node->body;
    $original_teaser = $node->teaser;
    $node->body = _boincimport_replace_links($node->body);
    $node->teaser = _boincimport_replace_links($node->teaser);
    if ($node->body != $original_body OR $node->teaser != $original_teaser) {
      db_query("UPDATE {node_revisions} SET body= '%s', teaser = '%s' WHERE nid = %d", $node->body, $node->teaser, $node->nid);
    }
  }

  // Transform comments:
  $result = db_query('SELECT c.cid, c.comment FROM {boincimport_temp_post} AS p LEFT JOIN {comments} AS c ON p.cid = c.cid');
  while ($comment = db_fetch_object($result)) {
    $original_comment = $comment->comment;
    $comment->comment = _boincimport_replace_links($comment->comment);
    if ($comment->comment != $original_comment) {
      db_query("UPDATE {comments} SET comment= '%s' WHERE cid = %d", $comment->comment, $comment->cid);
    }
  }

  variable_set('boincimport_replace_url_successful', '1');
}