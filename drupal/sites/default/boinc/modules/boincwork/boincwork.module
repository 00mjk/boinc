<?php
// $Id$

/**
  * @file
  * Enable BOINC features related to processing work and credit.
  */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Includes that provide supporting functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

require_once('includes/boincwork.forms.inc');
require_once('includes/boincwork.helpers.inc');


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Hooks into core modules
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
  * Implementation of hook_menu().
  */
function boincwork_menu() {
  require_boinc('util');
  $items['account/prefs'] = array(
    'title' => 'Computing',
    'description' => '',
    'page callback' => 'generalprefs_page', 
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM
  );
  $items['account/prefs/computing'] = array(
    'title' => 'Computing',
    'page callback' => 'generalprefs_page',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );
  $items['account/prefs/project'] = array(
    'title' => 'Project',
    'page callback' => 'projectprefs_page',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );
  $items['account/prefs/community'] = array(
    'title' => 'Community',
    'page callback' => 'communityprefs_page',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );
  $items['account/prefs/privacy'] = array(
    'title' => 'Privacy',
    'page callback' => 'privacyprefs_page',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'weight' => 15
  );
  /*$items['account/certs'] = array(
    'title' => t('Account certificate'),
    'page callback' => 'boincwork_certificates',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );*/
  $items['admin/boinc/prefs/presets'] = array(
    'title' => 'BOINC preference presets',
    'description' => 'Set values for BOINC preference set presets.',
    'page callback' => 'boincwork_admin_prefs_presets_page',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'boincwork.admin.inc'
  );
  $items['admin/boinc/prefs/upload'] = array(
    'title' => 'BOINC preference XML upload',
    'description' => 'Upload XML configuration for project specific preferences.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boincwork_admin_prefs_upload_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'boincwork.admin.inc'
  );
  $items['user/%/mobile'] = array(
    'title' => t('Mobile stats'),
    'page callback' => 'boincwork_mobile_stats',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK
  );
  $items['server_status.php'] = array(
    'title' => t('Server status'),
    'page callback' => 'boincwork_server_status',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
* Implementation of hook_views_api().
*/
function boincwork_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'boincwork')
  );
}


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Page callbacks from hook_menu()
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 
/**
  * General preferences menu callback.
  * Called when user goes to edit preferences page
  */
function generalprefs_page($action = null, $venue = null) {
  
  $pref_sets = array('default', 'home', 'school', 'work');
  $output = null;
  // Set the page title
  //$title = t('Edit computing preferences @for-venue', array('@for-venue' => ($venue ? "for {$venue}" : '')));
  $title = 'Computing';
  drupal_set_title($title);
  
  switch ($action) {
    
  case 'combined':
    // Compare preference sets; tabular view
    foreach ($pref_sets as $pref_set) {
      //$form_state['build_info']['args'] = array($pref_set);
      $form_state = array();
      $prefs[$pref_set] = drupal_retrieve_form('boincwork_generalprefs_form', $form_state, $pref_set);
      drupal_prepare_form('boincwork_generalprefs_form', $prefs[$pref_set], $form_state);
    }
    //krumo($prefs);
    $output .= '<p>' . t('These apply to all BOINC projects in which you participate.') . '<br/>';
    $output .= t('On computers attached to multiple projects, the most recently modified preferences will be used.') . '</p>';
    $output .= '<p>' . t('Preferences last modified: @mod_time', array('@mod_time' => pretty_time_str($prefs['default']['modified']['#value']))) . '</p>';
    $output .= '<h2>' . t('Combined preferences') . ' ' . l('(' . t('Switch View') . ')', 'account/prefs/computing') . '</h2>';
    
    $output .= '<table>';
    
    $sections = array(
      'processor',
      'storage',
      'network'
    );
    foreach ($sections as $section) {
      $output .= '<tr class="section-heading">';
      $output .= "<td>{$prefs['default'][$section]['#title']}</td>";
      foreach ($pref_sets as $pref_set) $output .= '<td>' . ucwords($pref_set) . '</td>';
      $output .= '</tr>';
      foreach ($prefs['default']['prefs']['advanced'][$section] as $name => $setting) {
        if ($name{0} == '#') continue;
        if (!isset($setting['#type'])) continue;
        if (!isset($setting['#title'])) $setting['#title'] = '';
        if (!isset($setting['#description'])) $setting['#description'] = '';
        $output .= '<tr>';
        $output .= "<td>{$setting['#title']}<br/>{$setting['#description']}</td>";
        foreach ($pref_sets as $pref_set) {
          if (($prefs[$pref_set]) AND isset($prefs[$pref_set]['prefs']['advanced'][$section])) {
            $pref_setting = $prefs[$pref_set]['prefs']['advanced'][$section][$name];
            $value = isset($pref_setting['#options']) ? $pref_setting['#options'][$pref_setting['#default_value']] : $pref_setting['#default_value'];
            if ($value == '') $value = '---';
            if (!isset($pref_setting['#field_suffix'])) $pref_setting['#field_suffix'] = '';
            $output .= "<td>{$value} {$pref_setting['#field_suffix']}</td>";
          }
          else {
            $output .= '<td>---</td>';
          }
        }
        $output .= '</tr>';
      }
    }
    $output .= '<tr>';
    $output .= '<td></td>';
    foreach ($pref_sets as $pref_set) $output .= '<td>' . (($prefs[$pref_set]) ? l(t('Edit'), "account/prefs/computing/edit/{$pref_set}") : l(t('Add'), "account/prefs/computing/edit/{$pref_set}")) . '</td>';
    $output .= '</tr>';
    $output .= '</table>';
    
    break;
    
  case 'view':
    require_boinc('util');
    
    $output .= '<p>' . t('These apply to all BOINC projects in which you participate.') . '<br/>';
    $output .= t('On computers attached to multiple projects, the most recently modified preferences will be used.') . '</p>';
    
    if ($venue) $pref_sets = array($venue);
    foreach ($pref_sets as $pref_set) {
      $form_state = array();
      $prefs = drupal_retrieve_form('boincwork_generalprefs_form', $form_state, $pref_set);
      drupal_prepare_form('boincwork_generalprefs_form', $prefs, $form_state);
      if (isset($prefs['venue'])) {
        if ($pref_set == 'default') {
          // Global preferences
          $output .= '<p>' . t('Preferences last modified: @mod_time', array('@mod_time' => pretty_time_str($prefs['modified']['#value']))) . '</p>';
          $output .= '<h2>' . t('Primary (default) preferences') . ' ' . l('(' . t('Switch View') . ')', 'account/prefs/computing/combined') . '</h2>';
        } else {
          // Venue specific preferences
          $output .= '<h2>' . t('Separate preferences for @venue', array('@venue' => $pref_set)) . '</h2>';
        }
        $output .= '<table>';
        
        $sections = array(
          'processor' => $prefs['processor'],
          'storage' => $prefs['storage'],
          'network' => $prefs['network']
        );
        foreach ($sections as $section) {
          $output .= '<tr class="section-heading">';
          $output .= "<td>{$section['#title']}</td></tr>";
          foreach ($section as $name => $setting) {
            if ($name{0} == '#') continue;
            $value = isset($setting['#options']) ? $setting['#options'][$setting['#default_value']] : $setting['#default_value'];
            if ($value == '') $value = '---';
            if (!isset($setting['#title'])) $setting['#title'] = '';
            if (!isset($setting['#description'])) $setting['#description'] = '';
            if (!isset($setting['#field_suffix'])) $setting['#field_suffix'] = '';
            $output .= '<tr>';
            $output .= "<td>{$setting['#title']}<br/>{$setting['#description']}</td>";
            $output .= "<td>{$value} {$setting['#field_suffix']}</td>";
            $output .= '</tr>';
          }
        }
        $output .= '</table>';
      } else {
        // Venue preferences not defined
        $output .= '<p>' . l(t('Add separate preferences for @venue', array('@venue' => $pref_set)), "account/prefs/computing/edit/{$pref_set}") . '</p>';
      }
    }
    break;
    
    
  case 'edit':
  default:
  
    // Return the HTML generated from the $form data structure.
    if (function_exists('jump_quickly')) {
      $path = 'account/prefs/computing/edit';
      $venues = array(
        "{$path}/default" => t('Default'),
        "{$path}/home" => t('Home'),
        "{$path}/work" => t('Work'),
        "{$path}/school" => t('School')
      );
      variable_set('jump_use_js_venues-Array', 1);
      drupal_add_js(drupal_get_path('module', 'jump') . '/jump.js');
      drupal_add_js(drupal_get_path('theme', 'boinc') . '/js/prefs.js', 'theme');
      $output .= '<div class="simple-form-controls"><div class="form-item venue">';
      $output .= '<label>Preference sets:</label>';
      $output .= jump_quickly($venues, 'venues');
      $output .= '</div></div>';
    }
    $output .= drupal_get_form('boincwork_generalprefs_form', $venue);
    break;
  }
  
  return $output;
}

/**
  * Project preferences menu callback
  * Called when user goes to edit project preferences page.
  */
function projectprefs_page($action = null, $venue = null) {
  
  require_boinc(array('util', 'prefs'));
  global $project_has_beta;
  $pref_sets = array('default', 'home', 'school', 'work');
  $output = null;
  
  $title = 'Project';
  drupal_set_title($title);
  
  switch ($action) {
  case 'combined':
    // Compare preference sets; tabular view
    foreach ($pref_sets as $pref_set) {
      $form_state = array();
      $prefs[$pref_set] = drupal_retrieve_form('boincwork_projectprefs_form', $form_state, $pref_set);
      drupal_prepare_form('boincwork_projectprefs_form', $prefs[$pref_set], $form_state);
    }
    
    $output .= '<p>' . t('Combined preferences') . ' ' . l('(' . t('Switch View') . ')', 'account/prefs/project') . '</p>';
    
    $output .= '<table>';
    
    $sections = array(
      'resource',
      'default_venue'
    ); 
    if (isset($prefs['default']['#project specific'])) {
      foreach ($prefs['default']['#project specific'] as $project_specific) {
        $sections[] = $project_specific;
      }
    }
    if ($project_has_beta) $sections[] ='beta';
    foreach ($sections as $section) {
      $output .= '<tr class="section-heading">';
      $output .= "<td>{$prefs['default'][$section]['#title']}</td>";
      foreach ($pref_sets as $pref_set) $output .= '<td>' . ucwords($pref_set) . '</td>';
      $output .= '</tr>';
      foreach ($prefs['default'][$section] as $name => $setting) {
        if ($name{0} == '#') continue;
        if (!isset($setting['#type'])) continue;
        if (!isset($setting['#title'])) $setting['#title'] = '';
        if (!isset($setting['#description'])) $setting['#description'] = '';
        $output .= '<tr>';
        $output .= "<td>{$setting['#title']}<br/>{$setting['#description']}</td>";
        foreach ($pref_sets as $pref_set) {
          if (($prefs[$pref_set]) AND isset($prefs[$pref_set][$section])) {
            $pref_setting = $prefs[$pref_set][$section][$name];
            $value = isset($pref_setting['#options']) ? $pref_setting['#options'][$pref_setting['#default_value']] : $pref_setting['#default_value'];
            if ($value == '') $value = '---';
            if (!isset($pref_setting['#field_suffix'])) $pref_setting['#field_suffix'] = '';
            $output .= "<td>{$value} {$pref_setting['#field_suffix']}</td>";
          } else $output .= '<td>---</td>';
        }
        $output .= '</tr>';
      }
    }
    $output .= '<tr>';
    $output .= '<td></td>';
    foreach ($pref_sets as $pref_set) $output .= '<td>' . (($prefs[$pref_set]) ? l(t('Edit'), "account/prefs/project/edit/{$pref_set}") : l(t('Add'), "account/prefs/project/edit/{$pref_set}")) . '</td>';
    $output .= '</tr>';
    $output .= '</table>';
    
    break;
    
  case 'view':
    if ($venue) $pref_sets = array($venue);
    foreach ($pref_sets as $pref_set) {
      $form_state = array();
      $prefs = drupal_retrieve_form('boincwork_projectprefs_form', $form_state, $pref_set);
      drupal_prepare_form('boincwork_projectprefs_form', $prefs, $form_state);
      if (isset($prefs['venue'])) {
        if ($pref_set == 'default') {
          // Global preferences
          $output .= '<h2>' . t('Primary (default) preferences') . ' ' . l('(' . t('Switch View') . ')', 'account/prefs/project/combined') . '</h2>';
        } else {
          // Venue specific preferences
          $output .= '<h2>' . t('Separate preferences for @venue', array('@venue' => $pref_set)) . '</h2>';
        }
        $output .= '<table>';
        $sections = array(
          'resource' => $prefs['resource'],
          'default_venue' => $prefs['default_venue']
        );
        if (isset($prefs['#project specific'])) {
          foreach ((array) $prefs['#project specific'] as $project_specific_section) {
            $sections[$project_specific_section] = $prefs[$project_specific_section];
          }
        }
        
        if ($project_has_beta) $sections['beta'] = $prefs['beta'];
        
        foreach ($sections as $section) {
          $output .= '<tr class="section-heading">';
          $output .= "<td>{$section['#title']}</td></tr>";
          
          foreach ($section as $name => $setting) {
            if ($name{0} == '#') continue;
            $value = isset($setting['#default_value']) ? $setting['#default_value'] : '';
            if ($value AND isset($setting['#options'])) $value = $setting['#options'][$value];
            elseif ($value == '') $value = '---';
            if (!isset($setting['#title'])) $setting['#title'] = '';
            if (!isset($setting['#description'])) $setting['#description'] = '';
            if (!isset($setting['#field_suffix'])) $setting['#field_suffix'] = '';
            $output .= '<tr>';
            $output .= "<td>{$setting['#title']}<br/>{$setting['#description']}</td>";
            $output .= "<td>{$value} {$setting['#field_suffix']}</td>";
            $output .= '</tr>';
          }
        }
        
        // Edit preferences link
        $output .= '<tr>';
        $output .= '<td></td>';
        $output .= '<td>' . l(t('Edit @project preferences', array('@project' => PROJECT)), "account/prefs/project/edit/{$pref_set}") . '</td>';
        $output .= '</tr>';
        
        $output .= '</table>';
      }
      else {
        // Venue preferences not defined
        $output .= '<p>' . l(t('Add separate preferences for @venue', array('@venue' => $pref_set)), "account/prefs/project/edit/{$pref_set}") . '</p>';
      }
    }
    break;
    
  case 'edit':
  default:
    require_boinc('util');
    // Return the HTML generated from the $form data structure.
    $output .= drupal_get_form('boincwork_projectprefs_form', $venue);
    $output .= '<p>' . l('(' . t('Show comparison view') . ')', 'account/prefs/project/combined') . '</p>';
    break;
    
  }
  return $output;
}

/**
  * Community preferences menu callback
  * Called when user goes to edit community preferences page.
  */
function communityprefs_page($action = null) {
  
  require_boinc(array('util', 'prefs'));
  $output = null;
  
  $title = 'Community';
  drupal_set_title($title);
  
  //$output .= '<h2>Community preferences</h2>';
  
  $output .= drupal_get_form('communityprefs_form');
  
  return $output;
}

function communityprefs_form(&$form_state) {
  global $user;
  $form = array();
  
  // Standard option sets
  $form['boolean_options'] = array(
    '#type' => 'value',
    '#value' => array(1 => t('yes'), 0 => t('no'))
  );
  
  $default = array(
    'pm_send_notification' => '', // This is set already in pm_email_notify_user
    'friend_notification' => isset($user->friend_notification) ? $user->friend_notification : 0,
    'comments_per_page' => (isset($user->comments_per_page) AND $user->comments_per_page) ? $user->comments_per_page : variable_get('comment_default_per_page_forum', 50)
  );
  
  // Notification options
  $form['notifications'] = array(
    '#type' => 'fieldset',
    '#title' => t('Notification settings'),
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  // Pull in private message notification handling and tweak the form
  $pm_notify = pm_email_notify_user('form', $edit, $user, 'account');
  $form['notifications']['pm_send_notifications'] = array_replace(
    $pm_notify['enable_pm_mail']['pm_send_notifications'],
    array(
      '#type' => 'radios',
      '#title' => t('Receive email notification for private messages?'),
      '#description' => ' ',
      '#options' => $form['boolean_options']['#value'],
      '#attributes' => array('class' => 'fancy')
    )
  );
  $form['notifications']['friend_notification'] = array(
    '#type' => 'radios',
    '#title' => t('Receive email notification for friend requests?'),
    '#description' => ' ',
    '#options' => array(0 => t('yes'), -1 => t('no')),
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['friend_notification']
  ); 
  
  // Forum options
  $form['forums'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forum settings'),
    '#weight' => 2,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['forums']['comments_per_page'] = array(
    '#type' => 'select',
    '#title' => t('In discussion topics, show at most @comments_per_page', array('@comments_per_page' => '')),
    '#options' => array(10 => 10, 25 => 25, 50 => 50, 100 => 100),
    '#default_value' => $default['comments_per_page']
  );
  // Can't have a typical Drupal form suffix on a select box?
  $form['forums']['comments_per_page_suffix'] = array(
    '#value' => '<span>' . t('comments per page') . '</span>'
  ); 
  // Signature (pulled from user_edit_form):
  if (variable_get('user_signatures', 0) && module_exists('comment')) {
    $form['forums']['signature'] = array(
      '#type' => 'textarea',
      '#title' => t('Signature'),
      '#description' => t('Your signature will be publicly displayed at the end of your comments.'),
      '#default_value' => $user->signature
      );
    // Prevent a "validation error" message when the user attempts to save with a default value they
    // do not have access to.
    if (!filter_access($user->signature_format) && empty($_POST)) {
      drupal_set_message(t("The signature input format has been set to a format you don't have access to. It will be changed to a format you have access to when you save this page."));
      $edit['signature_format'] = FILTER_FORMAT_DEFAULT;
    }
    $form['forums']['signature_format'] = filter_form($user->signature_format, NULL, array('signature_format'));
  }
  
  $form['form control tabs prefix'] = array(
    '#value' => '<ul class="tab-list">'
  );
  $form['submit'] = array(
    '#prefix' => '<li class="first tab">',
    '#type' => 'submit',
    '#value' => t('Save changes'),
    '#suffix' => '</li>'
  );
  $form['form control tabs'] = array(
    '#value' => '<li class="tab">' . l(t('Cancel'), $_GET['q']) . '</li></ul>'
  );
  
  return $form;
}

function communityprefs_form_submit($form, &$form_state) {
  global $user;
  $edit= $form_state['values'];
  pm_email_notify_user('submit', $edit, $user);
  user_save($user, array(
    'signature' => $edit['signature'],
    'signature_format' => $edit['signature_format'],
    'friend_notification' => $edit['friend_notification'],
    'comments_per_page' => $edit['comments_per_page']
  ));
}

/**
  * Privacy preferences menu callback
  * Called when user goes to edit privacy preferences page.
  */
function privacyprefs_page($action = null) {
  
  require_boinc(array('util', 'prefs'));
  $output = null;
  $title = 'Privacy';
  drupal_set_title($title);
  
  switch ($action) {
  case 'view':
    $form_state = array();
    $prefs = drupal_retrieve_form('boincwork_privacyprefs_form', $form_state);
    drupal_prepare_form('boincwork_privacyprefs_form', $prefs, $form_state);
    $output .= '<table>';
    
    $sections = array(
      'privacy' => $prefs['privacy']
    );
    
    foreach ($sections as $section) {
      $output .= '<tr class="section-heading">';
      $output .= "<td>{$section['#title']}</td></tr>";
      foreach ($section as $name => $setting) {
        if ($name{0} == '#') continue;
        $value = isset($setting['#default_value']) ? $setting['#default_value'] : '';
        if ($value AND isset($setting['#options'])) $value = $setting['#options'][$value];
        elseif ($value == '') $value = '---';
        if (!isset($setting['#title'])) $setting['#title'] = '';
        if (!isset($setting['#description'])) $setting['#description'] = '';
        if (!isset($setting['#field_suffix'])) $setting['#field_suffix'] = '';
        $output .= '<tr>';
        $output .= "<td>{$setting['#title']}<br/>{$setting['#description']}</td>";
        $output .= "<td>{$value} {$setting['#field_suffix']}</td>";
        $output .= '</tr>';
      }
    }
    
    // Edit preferences link
    $output .= '<tr>';
    $output .= '<td></td>';
    $output .= '<td>' . l(t('Edit privacy preferences', array('@project' => PROJECT)), "account/prefs/privacy/edit") . '</td>';
    $output .= '</tr>';
    
    $output .= '</table>';
    
    break;
    
  case 'edit':
  default:
    require_boinc('util');
    // Return the HTML generated from the $form data structure.
    $output .= drupal_get_form('boincwork_privacyprefs_form');
    break;
    
  }
  
  return $output;
}

/**
  * Certificates menu callback
  * Called when user goes to account certificate pages
  */
function boincwork_certificates($type = null, $border = null) {
  global $user;
  $drupuser = user_load($user->uid);
  // Load BOINC account and pre-authenticate with BOINC code
  require_boinc(array('util', 'cert'));
  $boincuser = BoincUser::lookup_id($drupuser->boincuser_id);
  //global $g_logged_in_user;
  //$g_logged_in_user = $boincuser;
  //print_r($boincuser); exit;
  switch ($type) {
  case 'all':
    //include_boinc('user/cert_all.php');
    require_boinc(array('util','cert','user'));

    $join = date('j F Y', $boincuser->create_time);
    $today = date('j F Y', time(0));

    if ($border=="no") {
        $border = 0;
    } else {
        $border=8;
    }

    $title_font = "\"Optima,ZapfChancery\"";
    $font = "\"Optima,Lucida Bright,Times New Roman\"";

    $boincuser = get_other_projects($boincuser);
    $total_credit = 0;
    foreach ($boincuser->projects as $p) {
        $total_credit += $p->total_credit;
    }

    $credit = credit_string($total_credit, false);

    function show_proj($p) {
        $join = date('j F Y', $p->create_time);
        echo "<tr> <td>$p->name</td><td> $p->total_credit</td><td>$join</td></tr>
        ";
    }

    echo "
        <table width=900 height=650 border=$border cellpadding=20><tr><td>
        <center>
        <table width=700 border=0><tr><td style=\"background-position:center; background-repeat:no-repeat\" background=http://boinc.berkeley.edu/logo/boinc_fade_600.png>
        <center>
        <font style=\"font-size: 52\" face=$title_font>Certificate of Computation

        <font face=$font style=\"font-size:28\">
        <br><br>
        This certifies that
        <p>
        <font face=$font style=\"font-size:32\">
        $boincuser->name

        <font face=$font style=\"font-size:18\">
        <p>
        has contributed $credit
        to the following scientific research projects:

        <center>
        <table width=80%>
        <tr><th align=left>Project</th><th align=left>Cobblestones</th><th align=left>Joined</th></tr>
    ";
    foreach ($boincuser->projects as $p) {
        if ($p->total_credit<100) continue;
        show_proj($p);
    }
    echo "
        </table>
        </center>
    ";

    echo "
        </td>
    ";
    echo "
    </td><tr></table>
    ";
    break;
    
  case 'account':
  default:
    //include_boinc('user/cert1.php');
    require_boinc(array('util','cert'));

    $join = date('j F Y', $boincuser->create_time);
    $today = date('j F Y', time(0));

    if ($border=="no") {
        $border = 0;
    } else {
        $border=8;
    }

    $credit = credit_string($boincuser->total_credit, false);

    $title_font = "\"Optima,ZapfChancery\"";
    $font = "\"Optima,Lucida Bright,Times New Roman\"";

    echo "
        <table width=900 height=650 border=$border cellpadding=20><tr><td>
        <center>
        <table width=700 border=0><tr><td>
        <center>
        <font style=\"font-size: 52\" face=$title_font>Certificate of Computation


        <font face=$font style=\"font-size:28\">
        <br><br><br>
        This certifies that
        <p>
        <font face=$font style=\"font-size:32\">
        $boincuser->name

        <font face=$font style=\"font-size:18\">
        <p>
        has participated in ".PROJECT." since $join,
        and has contributed $credit
        to ".PROJECT.".

        <br><br><br>
        </td><tr></table>
        <table width=100%><tr>
        <td width=40><br></td>
        <td align=left>
        <font face=$font style=\"font-size:16\">
    ";
    if (defined("CERT_SIGNATURE")) {
        echo "
            <img src=".CERT_SIGNATURE.">
            <br>
        ";
    }
    if (defined("CERT_DIRECTOR_NAME")) {
        echo CERT_DIRECTOR_NAME." <br>Director, ".PROJECT."
            <br>
        ";
    }
    echo "
        <br>
        $today
        </td>
    ";
    if (defined("CERT_PROJECT_LOGO")) {
        echo "
            <td align=center valign=center> <img src=".CERT_PROJECT_LOGO."> </td>
        ";
    }
    if (defined("CERT_INSTITUTION_LOGO")) {
        echo "
            <td align=center width=30% valign=center><img src=".CERT_INSTITUTION_LOGO."></td>
        ";
    }
    echo "
    </td><tr></table>
    ";
  }
}

/**
 * Mobile stats menu callback
 * Called when user accesses cell phone stats
 */
function boincwork_mobile_stats($userid = null) {
  $_GET['id'] = $userid;
  include_boinc('user/userw.php');
}

/**
 * Server status menu callback
 * Called to build the server status page
 */
function boincwork_server_status() {
  include_boinc('user/server_status.php');
}


/**
 * Generic page callback
 * Take a node ID and render that node as a page
 */
function boincwork_view_page($nid) {
  $node = node_load($nid);
  return node_page_view($node);
}
