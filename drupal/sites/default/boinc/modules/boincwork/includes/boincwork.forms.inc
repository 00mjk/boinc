<?php
// $Id$

/**
 * Form submission handlers and data processing functions are contained
 * herein to prevent littering of the main module file.
 */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * General preferences form handlers and functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
 * The structure of the general preferences form
 */
function boincwork_generalprefs_form(&$form_state, $venue, $prefs_preset = null) {
  $form = array();
  $prefs = null;
  
  // Enable AHAH form support for dynamically updating content based on preset
  ahah_helper_register($form, $form_state);
  
  if (!$prefs_preset) {
    if (isset($form_state['storage']['prefs']['preset'])) {
      $prefs_preset = $form_state['storage']['prefs']['preset'];
    }
    
    // Load preferences from BOINC account
    $prefs = boincwork_load_prefs('general', $venue);
    
    // Determine if a preset is selected or if these are custom settings
    if (!isset($prefs['@attributes']['preset'])) $prefs['@attributes']['preset'] = 'custom';
    if (!$prefs_preset) $prefs_preset = $prefs['@attributes']['preset'];
  }
  
  // Define form defaults
  switch($prefs_preset) {
  case 'standard':
  case 'maximum':
  case 'green':
  case 'minimum':
    $prefs = boincwork_get_preset_prefs($prefs_preset);
    break;
    
  case 'custom':
  default:
    // Just keeps prefs as they are
    $prefs_preset = 'custom';
  }
  
  require_boinc(array('db', 'prefs'));
  $disk_space_config = get_disk_space_config();
  
  $default = array(
    'preset' => $prefs_preset,
    // Processing...
    'run_on_batteries' => 0,
    'run_if_user_active' => 0,
    'run_gpu_if_user_active' => 1,
    'idle_time_to_run' => 3,
    'suspend_if_no_recent_input' => 0,
    'suspend_cpu_usage' => 0,
    'start_hour' => 0,
    'end_hour' => 0,
    'leave_apps_in_memory' => 0,
    'cpu_scheduling_period_minutes' => 60,
    'max_cpus' => 16,
    'max_ncpus_pct' => 100,
    'cpu_usage_limit' => 100,
    // Storage...
    'disk_max_used_gb' => $disk_space_config->disk_max_used_gb,
    'disk_min_free_gb' => $disk_space_config->disk_min_free_gb,
    'disk_max_used_pct' => $disk_space_config->disk_max_used_pct,
    'disk_interval' => 60,
    'vm_max_used_pct' => 75,
    'ram_max_used_busy_pct' => 50,
    'ram_max_used_idle_pct' => 90,
    // Network...
    'work_buf_min_days' => 0,
    'work_buf_additional_days' => 0.25,
    'confirm_before_connecting' => 0,
    'hangup_if_dialed' => 0,
    'max_bytes_sec_down' => 0,
    'max_bytes_sec_up' => 0,
    'net_start_hour' => 0,
    'net_end_hour' => 0,
    'daily_xfer_limit_mb' => 0,
    'daily_xfer_period_days' => 0,
    'dont_verify_images' => 0
  );
  foreach ($default as $name => $value) {
    if (isset($prefs[$name])) {
      if (is_array($prefs[$name])) {
        if (isset($prefs[$name]['@value'])) {
          $default[$name] = $prefs[$name]['@value'];
        }
      }
      else {
        $default[$name] = $prefs[$name];
      }
    }
  }
  
  // Standard option sets
  $form['boolean_options'] = array(
    '#type' => 'value',
    '#value' => array(1 => t('yes'), 0 => t('no'))
  );
  $form['hour_options'] = array(
    '#type' => 'value',
    '#value' => array(t('0:00'), t('1:00'), t('2:00'), t('3:00'), t('4:00'), 
      t('5:00'), t('6:00'), t('7:00'), t('8:00'), t('9:00'), t('10:00'), t('11:00'), 
      t('12:00'), t('13:00'), t('14:00'), t('15:00'), t('16:00'), t('17:00'),
      t('18:00'), t('19:00'), t('20:00'), t('21:00'), t('22:00'), t('23:00'))
  );
  
  // Set up the preference container for AHAH
  $form['prefs'] = array(
    '#title' => '',
    '#type' => 'fieldset',
    '#prefix' => '<div id="prefs-wrapper">', // This is our wrapper div.
    '#suffix' => '</div>',
    '#tree'   => TRUE
  );
  //$form['prefs']['debug'] = array('#value' => '<pre>' . print_r($form_state, true) . '</pre>');
  
  // Hidden elements
  $form['prefs']['modified'] = array(
    '#type' => 'hidden',
    '#value' => (isset($prefs['mod_time']['@value']) ? $prefs['mod_time']['@value'] : null)
  );
  $form['prefs']['venue'] = array(
    '#type' => 'hidden',
    '#value' => $venue
  );
  
  // Simplified selectors
  $form['prefs']['preset'] = array(
    '#title' => t('Presets'),
    '#type' => 'radios',
    '#description' => ' ',
    '#options' => array(
      'standard' => t('Standard'),
      'maximum' => t('Maximum'),
      'green' => t('Green'),
      'minimum' => t('Minimum'),
      'custom' => t('Custom')
    ),
    '#prefix' => '<div class="simple-form-controls">',
    '#suffix' => '</div>',
    '#default_value' => $default['preset'],
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('prefs')),
      'wrapper' => 'prefs-wrapper'
    )
  );
  $form['prefs']['select preset'] = array(
    '#type'  => 'submit',
    '#value' => t('Update preset'),
    '#submit' => array('ahah_helper_generic_submit'),
    // The 'no-js' class only displays this button if javascript is disabled
    '#attributes' => array('class' => 'no-js'),
  );
  
  // Form control
  $form['prefs']['form control tabs prefix'] = array(
    '#value' => '<ul class="tab-list">'
  );
  $form['prefs']['submit'] = array(
    '#prefix' => '<li class="first tab">',
    '#type' => 'submit',
    '#value' => t('Save changes'),
    '#suffix' => '</li>'
  );
  $form['prefs']['form control tabs'] = array(
    '#value' => '<li class="tab">' . l(t('Cancel'), $_GET['q']) . '</li>'
  );
  $form['prefs']['view control'] = array(
    '#value' => '<li class="first alt tab">' . l('(' . t('Show comparison view') . ')', 'account/prefs/computing/combined') . '</li></ul>'
  );
  
  $form['prefs']['separator'] = array(
    '#value' => '<div class="separator"></div>'
  );
  
  // Advanced preferences
  $form['prefs']['advanced'] = array(
    '#title' => t('Advanced settings'),
    '#type' => 'fieldset',
    '#description' => '',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array('class' => 'advanced-settings')
  );
  
  // Processing preferences
  $form['prefs']['advanced']['processor'] = array(
    '#title' => t('Processor usage'),
    '#type' => 'fieldset',
    '#description' => '',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE
  );
  $form['prefs']['advanced']['processor']['run_on_batteries'] = array(
    '#title' => t('Run while computer is on battery power?'),
    '#type' => 'radios',
    '#description' => t('Only applies to portable computers'),
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['run_on_batteries']
  );
  $form['prefs']['advanced']['processor']['run_if_user_active'] = array(
    '#title' => t('Run while computer is in use?'),
    '#type' => 'radios',
    '#description' => ' ',
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['run_if_user_active']
  );
  $form['prefs']['advanced']['processor']['run_gpu_if_user_active'] = array(
    '#title' => t('Run GPU work while computer is in use?'),
    '#type' => 'radios',
    '#description' => t('Enforced by version 6.6.21+'),
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['run_gpu_if_user_active']
  );
  $form['prefs']['advanced']['processor']['idle_time_to_run'] = array(
    '#title' => t('&apos;In use&apos; means mouse/keyboard activity in last'),
    '#type' => 'textfield',
    '#field_suffix' => t('minutes'),
    '#default_value' => $default['idle_time_to_run'],
    '#size' => 1,
    '#description' => ' '
  );
  $form['prefs']['advanced']['processor']['suspend_if_no_recent_input'] = array(
    '#title' => t('Suspend work if no mouse/keyboard activity in last'),
    '#type' => 'textfield',
    '#field_suffix' => t('minutes'),
    '#default_value' => $default['suspend_if_no_recent_input'],
    '#size' => 1,
    '#description' => t('Needed to enter low-power mode on some computers')
  );
  $form['prefs']['advanced']['processor']['suspend_cpu_usage'] = array(
    '#title' => t('Suspend work if CPU usage is above'),
    '#type' => 'textfield',
    '#field_suffix' => t('%'),
    '#default_value' => $default['suspend_cpu_usage'],
    '#size' => 1,
    '#description' => t('0 means no restriction. Enforced by version 6.10.30+')
  );
  $form['prefs']['advanced']['processor']['hour_label'] = array(
    '#value' => '<div class="form-item"><label>' . t('Do work only between the hours of:') . '</label></div>'
  );
  $form['prefs']['advanced']['processor']['start_hour'] = array(
    '#type' => 'select',
    '#options' => $form['hour_options']['#value'],
    '#default_value' => $default['start_hour']
  );
  $form['prefs']['advanced']['processor']['hour_delimiter'] = array(
    '#value' => '<span>' . t('and') . '</span>'
  );
  $form['prefs']['advanced']['processor']['end_hour'] = array(
    '#type' => 'select',
    '#options' => $form['hour_options']['#value'],
    '#default_value' => $default['end_hour']
  );
  $form['prefs']['advanced']['processor']['hour_description'] = array(
    '#value' => '<div class="form-item slim"><div class="description">' . t('No restriction if equal') . '</div></div>'
  );
  $form['prefs']['advanced']['processor']['leave_apps_in_memory'] = array(
    '#title' => t('Leave tasks in memory while suspended?'),
    '#type' => 'radios',
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['leave_apps_in_memory'],
    '#description' => t('Suspended tasks will consume swap space if &apos;yes&apos;')
  );
  $form['prefs']['advanced']['processor']['cpu_scheduling_period_minutes'] = array(
    '#title' => t('Switch between tasks every'),
    '#type' => 'textfield',
    '#field_suffix' => t('minutes'),
    '#default_value' => $default['cpu_scheduling_period_minutes'],
    '#size' => 1,
    '#description' => t('Recommended: 60 minutes')
  );
  $form['prefs']['advanced']['processor']['max_cpus'] = array(
    '#title' => t('On multiprocessors, use at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('processors'),
    '#default_value' => $default['max_cpus'],
    '#size' => 1,
    '#description' => ' '
  );
  $form['prefs']['advanced']['processor']['max_ncpus_pct'] = array(
    '#title' => t('On multiprocessors, use at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('% of the processors'),
    '#default_value' => $default['max_ncpus_pct'],
    '#size' => 1,
    '#description' => t('Enforced by version 6.1+')
  );
  $form['prefs']['advanced']['processor']['cpu_usage_limit'] = array(
    '#title' => t('Use at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('% of the CPU time'),
    '#default_value' => $default['cpu_usage_limit'],
    '#size' => 1,
    '#description' => t('Can be used to reduce CPU heat')
  );
  
  // Disk and memory preferences
  $form['prefs']['advanced']['storage'] = array(
    '#title' => t('Disk and memory usage'),
    '#type' => 'fieldset',
    '#description' => '',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE
  );
  $form['prefs']['advanced']['storage']['disk_max_used_gb'] = array(
    '#title' => t('Disk: use at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('GB'),
    '#default_value' => $default['disk_max_used_gb'],
    '#size' => 1,
    '#description' => ' '
  ); 
  $form['prefs']['advanced']['storage']['disk_min_free_gb'] = array(
    '#title' => t('Disk: leave free at least'),
    '#type' => 'textfield',
    '#field_suffix' => t('GB'),
    '#default_value' => $default['disk_min_free_gb'],
    '#size' => 1,
    '#description' => t('Values smaller than 0.001 are ignored')
  );
  $form['prefs']['advanced']['storage']['disk_max_used_pct'] = array(
    '#title' => t('Disk: use at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('% of total'),
    '#default_value' => $default['disk_max_used_pct'],
    '#size' => 1,
    '#description' => ' '
  ); 
  $form['prefs']['advanced']['storage']['disk_interval'] = array(
    '#title' => t('Tasks checkpoint to disk at most every'),
    '#type' => 'textfield',
    '#field_suffix' => t('seconds'),
    '#default_value' => $default['disk_interval'],
    '#size' => 1,
    '#description' => ' '
  );
  $form['prefs']['advanced']['storage']['vm_max_used_pct'] = array(
    '#title' => t('Swap space: use at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('% of total'),
    '#default_value' => $default['vm_max_used_pct'],
    '#size' => 1,
    '#description' => ' '
  );
  $form['prefs']['advanced']['storage']['ram_max_used_busy_pct'] = array(
    '#title' => t('Memory: when computer is in use, use at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('% of total'),
    '#default_value' => $default['ram_max_used_busy_pct'],
    '#size' => 1,
    '#description' => ' '
  );
  $form['prefs']['advanced']['storage']['ram_max_used_idle_pct'] = array(
    '#title' => t('Memory: when computer is not in use, use at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('% of total'),
    '#default_value' => $default['ram_max_used_idle_pct'],
    '#size' => 1,
    '#description' => ' '
  );
  
  // Network preferences
  $form['prefs']['advanced']['network'] = array(
    '#title' => t('Network usage'),
    '#type' => 'fieldset',
    '#description' => '',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE
  );
  $form['prefs']['advanced']['network']['work_buf_min_days'] = array(
    '#title' => t('Computer is connected to the Internet about every'),
    '#type' => 'textfield',
    '#field_suffix' => t('days'),
    '#default_value' => $default['work_buf_min_days'],
    '#size' => 1,
    '#description' => t('Leave blank or 0 if always connected. @project will try to maintain at least this much work.', array('@project' => PROJECT))
  ); 
  $form['prefs']['advanced']['network']['work_buf_additional_days'] = array(
    '#title' => t('Maintain enough work for an additional'),
    '#type' => 'textfield',
    '#field_suffix' => t('days'),
    '#default_value' => $default['work_buf_additional_days'],
    '#size' => 1,
    '#description' => ' '
  ); 
  $form['prefs']['advanced']['network']['confirm_before_connecting'] = array(
    '#title' => t('Confirm before connecting to Internet?'),
    '#type' => 'radios',
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['confirm_before_connecting'],
    '#description' => t('Matters only if you have a modem, ISDN, or VPN connection')
  ); 
  $form['prefs']['advanced']['network']['hangup_if_dialed'] = array(
    '#title' => t('Disconnect when done?'),
    '#type' => 'radios',
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['hangup_if_dialed'],
    '#description' => t('Matters only if you have a modem, ISDN, or VPN connection')
  );
  $form['prefs']['advanced']['network']['max_bytes_sec_down'] = array(
    '#title' => t('Maximum download rate'),
    '#type' => 'textfield',
    '#field_suffix' => t('Kbytes/sec'),
    '#default_value' => $default['max_bytes_sec_down']/1000,
    '#size' => 1,
    '#description' => ' '
  ); 
  $form['prefs']['advanced']['network']['max_bytes_sec_up'] = array(
    '#title' => t('Maximum upload rate'),
    '#type' => 'textfield',
    '#field_suffix' => t('Kbytes/sec'),
    '#default_value' => $default['max_bytes_sec_up']/1000,
    '#size' => 1,
    '#description' => ' '
  );
  $form['prefs']['advanced']['network']['hour_label'] = array(
    '#value' => '<div class="form-item"><label>' . t('Use network only between the hours of:') . '</label></div>'
  );
  $form['prefs']['advanced']['network']['net_start_hour'] = array(
    '#type' => 'select',
    '#options' => $form['hour_options']['#value'],
    '#default_value' => $default['net_start_hour']
  );
  $form['prefs']['advanced']['network']['hour_delimiter'] = array(
    '#value' => '<span>' . t('and') . '</span>'
  );
  $form['prefs']['advanced']['network']['net_end_hour'] = array(
    '#type' => 'select',
    '#options' => $form['hour_options']['#value'],
    '#default_value' => $default['net_end_hour']
  );
  $form['prefs']['advanced']['network']['hour_description'] = array(
    '#value' => '<div class="form-item slim"><div class="description">' . t('No restriction if equal') . '</div></div>'
  ); 
  $form['prefs']['advanced']['network']['daily_xfer_limit_mb'] = array(
    '#title' => t('Transfer at most'),
    '#type' => 'textfield',
    '#field_suffix' => t('Mbytes'),
    '#default_value' => $default['daily_xfer_limit_mb'],
    '#size' => 1
  ); 
  $form['prefs']['advanced']['network']['daily_xfer_period_days'] = array(
    '#field_prefix' => 'every',
    '#type' => 'textfield',
    '#field_suffix' => t('days'),
    '#default_value' => $default['daily_xfer_period_days'],
    '#size' => 1,
    '#description' => t('Enforced by version 6.10.46+')
  ); 
  $form['prefs']['advanced']['network']['dont_verify_images'] = array(
    '#title' => t('Skip image file verification?'),
    '#type' => 'radios',
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['dont_verify_images'],
    '#description' => t('Check this ONLY if your Internet provider modifies image files (UMTS does this, for example). Skipping verification reduces the security of BOINC.')
  );
  
  // The "fancy radios" are made via javascript on document load. In order for
  // these to work with AHAH, we need this crazy setTimeout() call.
  $form['prefs']['fancy-radios'] = array(
    '#value' => '
      <script>
        setTimeout(
          function() {
            fancyRadiosInit();
            customPrefsListener();
          },
          300
        )
      </script>'
  );
  $form['prefs']['view advanced'] = array(
    '#type' => 'hidden',
    '#value' => 1
  );
  return $form;
}

/**
  * Validate the general preferences form.
  */
function boincwork_generalprefs_form_validate($form, &$form_state) {
  require_boinc('util');
  $values = $form_state['values']['prefs']['advanced'];
  
  //drupal_set_message('<pre>' . print_r($form_state['values'], true) . '</pre>');
  // Verify all non-boolean user input values and notify form API of failures
  
  // Processing preferences
  if (!verify_numeric($values['processor']['idle_time_to_run'], 1, 9999)) form_set_error('idle_time_to_run', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['idle_time_to_run']['#title']} [x] {$form['prefs']['advanced']['processor']['idle_time_to_run']['#field_suffix']}\"");
  if (!verify_numeric($values['processor']['suspend_if_no_recent_input'], 0, 9999)) form_set_error('suspend_if_no_recent_input', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['suspend_if_no_recent_input']['#title']} [x] {$form['prefs']['advanced']['processor']['suspend_if_no_recent_input']['#field_suffix']}\"");
  if (!verify_numeric($values['processor']['suspend_cpu_usage'], 0, 100)) form_set_error('suspend_cpu_usage', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['suspend_cpu_usage']['#title']} [x] {$form['prefs']['advanced']['processor']['suspend_cpu_usage']['#field_suffix']}\"");
  if (!verify_numeric($values['processor']['start_hour'], 0, 23)) form_set_error('start_hour', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['start_hour']['#title']} [x] {$form['prefs']['advanced']['processor']['start_hour']['#field_suffix']}\"");
  if (!verify_numeric($values['processor']['end_hour'], 0, 23)) form_set_error('end_hour', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['end_hour']['#title']} [x] {$form['prefs']['advanced']['processor']['end_hour']['#field_suffix']}\"");
  if (!verify_numeric($values['processor']['cpu_scheduling_period_minutes'], 1, 9999)) form_set_error('cpu_scheduling_period_minutes', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['cpu_scheduling_period_minutes']['#title']} [x] {$form['prefs']['advanced']['processor']['cpu_scheduling_period_minutes']['#field_suffix']}\"");
  if (!verify_numeric($values['processor']['max_cpus'], 0, 9999)) form_set_error('max_cpus', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['max_cpus']['#title']} [x] {$form['prefs']['advanced']['processor']['max_cpus']['#field_suffix']}\"");
  if (!verify_numeric($values['processor']['max_ncpus_pct'], 0, 100)) form_set_error('max_ncpus_pct', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['max_ncpus_pct']['#title']} [x] {$form['prefs']['advanced']['processor']['max_ncpus_pct']['#field_suffix']}\"");
  if (!verify_numeric($values['processor']['cpu_usage_limit'], 0, 100)) form_set_error('cpu_usage_limit', t('Invalid setting for') . " \"{$form['prefs']['advanced']['processor']['cpu_usage_limit']['#title']} [x] {$form['prefs']['advanced']['processor']['cpu_usage_limit']['#field_suffix']}\"");

  // Storage preferences
  if (!verify_numeric($values['storage']['disk_max_used_gb'], 0, 9999999)) form_set_error('disk_max_used_gb', t('Invalid setting for') . " \"{$form['prefs']['advanced']['storage']['disk_max_used_gb']['#title']} [x] {$form['prefs']['advanced']['storage']['disk_max_used_gb']['#field_suffix']}\"");
  if (!verify_numeric($values['storage']['disk_min_free_gb'], 0.001, 9999999)) form_set_error('disk_min_free_gb', t('Invalid setting for') . " \"{$form['prefs']['advanced']['storage']['disk_min_free_gb']['#title']} [x] {$form['prefs']['advanced']['storage']['disk_min_free_gb']['#field_suffix']}\"");
  if (!verify_numeric($values['storage']['disk_max_used_pct'], 0, 100)) form_set_error('disk_max_used_pct', t('Invalid setting for') . " \"{$form['prefs']['advanced']['storage']['disk_max_used_pct']['#title']} [x] {$form['prefs']['advanced']['storage']['disk_max_used_pct']['#field_suffix']}\"");
  if (!verify_numeric($values['storage']['disk_interval'], 0, 9999999)) form_set_error('disk_interval', t('Invalid setting for') . " \"{$form['prefs']['advanced']['storage']['disk_interval']['#title']} [x] {$form['prefs']['advanced']['storage']['disk_interval']['#field_suffix']}\"");
  if (!verify_numeric($values['storage']['vm_max_used_pct'], 0, 100)) form_set_error('vm_max_used_pct', t('Invalid setting for') . " \"{$form['prefs']['advanced']['storage']['vm_max_used_pct']['#title']} [x] {$form['prefs']['advanced']['storage']['vm_max_used_pct']['#field_suffix']}\"");
  if (!verify_numeric($values['storage']['ram_max_used_busy_pct'], 0, 100)) form_set_error('ram_max_used_busy_pct', t('Invalid setting for') . " \"{$form['prefs']['advanced']['storage']['ram_max_used_busy_pct']['#title']} [x] {$form['prefs']['advanced']['storage']['ram_max_used_busy_pct']['#field_suffix']}\"");
  if (!verify_numeric($values['storage']['ram_max_used_idle_pct'], 0, 100)) form_set_error('ram_max_used_idle_pct', t('Invalid setting for') . " \"{$form['prefs']['advanced']['storage']['ram_max_used_idle_pct']['#title']} [x] {$form['prefs']['advanced']['storage']['ram_max_used_idle_pct']['#field_suffix']}\"");

  // Network preferences
  if (!verify_numeric($values['network']['work_buf_min_days'], 0, 10)) form_set_error('work_buf_min_days', t('Invalid setting for') . " \"{$form['prefs']['advanced']['network']['work_buf_min_days']['#title']} [x] {$form['prefs']['advanced']['network']['work_buf_min_days']['#field_suffix']}\"");
  if (!verify_numeric($values['network']['work_buf_additional_days'], 0, 10)) form_set_error('work_buf_additional_days', t('Invalid setting for') . " \"{$form['prefs']['advanced']['network']['work_buf_additional_days']['#title']} [x] {$form['prefs']['advanced']['network']['work_buf_additional_days']['#field_suffix']}\"");
  if (!verify_numeric($values['network']['max_bytes_sec_down'], 0, 9999.999)) form_set_error('max_bytes_sec_down', t('Invalid setting for') . " \"{$form['prefs']['advanced']['network']['max_bytes_sec_down']['#title']} [x] {$form['prefs']['advanced']['network']['max_bytes_sec_down']['#field_suffix']}\"");
  if (!verify_numeric($values['network']['max_bytes_sec_up'], 0, 9999.999)) form_set_error('max_bytes_sec_up', t('Invalid setting for') . " \"{$form['prefs']['advanced']['network']['max_bytes_sec_up']['#title']} [x] {$form['prefs']['advanced']['network']['max_bytes_sec_up']['#field_suffix']}\"");
  if (!verify_numeric($values['network']['net_start_hour'], 0, 23)) form_set_error('net_start_hour', t('Invalid setting for') . " \"{$form['prefs']['advanced']['network']['net_start_hour']['#title']} [x] {$form['prefs']['advanced']['network']['net_start_hour']['#field_suffix']}\"");
  if (!verify_numeric($values['network']['net_end_hour'], 0, 23)) form_set_error('net_end_hour', t('Invalid setting for') . " \"{$form['prefs']['advanced']['network']['net_end_hour']['#title']} [x] {$form['prefs']['advanced']['network']['net_end_hour']['#field_suffix']}\"");
  if (!verify_numeric($values['network']['daily_xfer_limit_mb'], 0, 9999999)) form_set_error('daily_xfer_limit_mb', t('Invalid setting for') . " \"{$form['prefs']['advanced']['network']['daily_xfer_limit_mb']['#title']} [x] {$form['prefs']['advanced']['network']['daily_xfer_limit_mb']['#field_suffix']}\"");
  if (!verify_numeric($values['network']['daily_xfer_period_days'], 0, 9999999)) form_set_error('daily_xfer_period_days', t('Invalid setting for') . " \"{$form['prefs']['advanced']['network']['daily_xfer_limit_mb']['#title']} [x] {$form['prefs']['advanced']['network']['daily_xfer_limit_mb']['#field_suffix']}\"");
}

/**
  * Handle post-validation submission of general preferences form.
  */
function boincwork_generalprefs_form_submit($form, &$form_state) {
  global $user;
  $account = user_load($user->uid);
  
  $values = $form_state['values']['prefs']['advanced'];
  $venue = $form_state['values']['prefs']['venue'];
  $preset = $form_state['values']['prefs']['preset'];
  
  // Load preferences from BOINC account
  $prefs = boincwork_load_prefs('general', $venue);
  
  // Processing preferences
  $prefs['run_on_batteries'] = ($values['processor']['run_on_batteries']) ? 1 : 0;
  $prefs['run_if_user_active'] = ($values['processor']['run_if_user_active']) ? 1 : 0;
  $prefs['run_gpu_if_user_active'] = ($values['processor']['run_gpu_if_user_active']) ? 1: 0;
  $prefs['idle_time_to_run'] = $values['processor']['idle_time_to_run'];
  $prefs['suspend_if_no_recent_input'] = $values['processor']['suspend_if_no_recent_input'];
  $prefs['suspend_cpu_usage'] = $values['processor']['suspend_cpu_usage'];
  $prefs['start_hour'] = $values['processor']['start_hour'];
  $prefs['end_hour'] = $values['processor']['end_hour'];
  $prefs['leave_apps_in_memory'] = ($values['processor']['leave_apps_in_memory']) ? 1 : 0;
  $prefs['cpu_scheduling_period_minutes'] = $values['processor']['cpu_scheduling_period_minutes'];
  $prefs['max_cpus'] = $values['processor']['max_cpus'];
  $prefs['max_ncpus_pct'] = $values['processor']['max_ncpus_pct'];
  $prefs['cpu_usage_limit'] = $values['processor']['cpu_usage_limit'];
  
  // Storage preferences
  $prefs['disk_max_used_gb'] = $values['storage']['disk_max_used_gb'];
  $prefs['disk_min_free_gb'] = $values['storage']['disk_min_free_gb'];
  $prefs['disk_max_used_pct'] = $values['storage']['disk_max_used_pct'];
  $prefs['disk_interval'] = $values['storage']['disk_interval'];
  $prefs['vm_max_used_pct'] = $values['storage']['vm_max_used_pct'];
  $prefs['ram_max_used_busy_pct'] = $values['storage']['ram_max_used_busy_pct'];
  $prefs['ram_max_used_idle_pct'] = $values['storage']['ram_max_used_idle_pct'];
  
  // Network preferences
  $prefs['work_buf_min_days'] = $values['network']['work_buf_min_days'];
  $prefs['work_buf_additional_days'] = $values['network']['work_buf_additional_days'];
  $prefs['confirm_before_connecting'] = ($values['network']['confirm_before_connecting']) ? 1 : 0;
  $prefs['hangup_if_dialed'] = ($values['network']['hangup_if_dialed']) ? 1 : 0;
  $prefs['max_bytes_sec_down'] = $values['network']['max_bytes_sec_down']*1000;
  $prefs['max_bytes_sec_up'] = $values['network']['max_bytes_sec_up']*1000;
  $prefs['net_start_hour'] = $values['network']['net_start_hour'];
  $prefs['net_end_hour'] = $values['network']['net_end_hour'];
  $prefs['daily_xfer_limit_mb'] = $values['network']['daily_xfer_limit_mb'];
  $prefs['daily_xfer_period_days'] = $values['network']['daily_xfer_period_days'];
  $prefs['dont_verify_images'] = ($values['network']['dont_verify_images']) ? 1 : 0;
  
  // Save the preset selection (or lack thereof)
  if (!$preset OR $preset == 'custom') {
    if (isset($prefs['@attributes']['preset'])) {
      unset($prefs['@attributes']['preset']);
    }
  }
  else {
    $prefs['@attributes']['preset'] = $preset;
  }
  
  // Update database
  $result = boincwork_save_prefs($prefs, 'general', $venue);
  
  if (!$result) {
    watchdog('boincwork', 'Error updating global prefs for user @id: @message', array('@id' => $account->id, '@message' => mysql_error()), WATCHDOG_ERROR);
    drupal_set_message(t('Your changes could not be saved. Please contact support!'), 'error');
  }
  else {
    drupal_set_message(t('Your preferences have been updated.
      Client-related preferences will take effect when your computer 
      communicates with @project or you issue the "Update"
      command from the BOINC client.', array('@project' => PROJECT)));
  }
}


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Project preferences form handlers and functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */ 

/**
 * The structure of the project preferences form
 */
function boincwork_projectprefs_form(&$form_state, $venue) {
  
  // Get availability of special BOINC preferences
  require_boinc(array('prefs'));
  global $app_array, $app_types, $project_has_beta;
  
  // Load any existing preferences from BOINC account
  $prefs = boincwork_load_prefs('project', $venue);
  
  // Define form defaults
  $default = array(
    'resource_share' => 100,
    'no_cpu' => 0,
    'no_cuda' => 0,
    'no_ati' => 0,
    'default_venue' => isset($boincuser->venue) ? $boincuser->venue : '',
  );
  foreach ($default as $name => $value) {
    if (isset($prefs[$name])) {
      if (is_array($prefs[$name])) {
        if (isset($prefs[$name]['@value'])) {
          $default[$name] = $prefs[$name]['@value'];
        }
      }
      else {
        $default[$name] = $prefs[$name];
      }
    }
  }
  
  // Standard option sets
  $form['boolean_options'] = array(
    '#type' => 'value',
    '#value' => array(1 => t('yes'), 0 => t('no'))
  );
  
  // Hidden elements
  $form['venue'] = array(
    '#type' => 'hidden',
    '#value' => $venue
  );
  
  $form['form control tabs prefix'] = array(
    '#value' => '<ul class="tab-list">'
  );
  $form['submit'] = array(
    '#prefix' => '<li class="first tab">',
    '#type' => 'submit',
    '#value' => t('Save changes'),
    '#suffix' => '</li>'
  );
  $form['form control tabs'] = array(
    '#value' => '<li class="tab">' . l(t('Cancel'), $_GET['q']) . '</li></ul>'
  );
  
  // Common project preferences  
  $form['resource'] = array(
    '#title' => t('Resource settings'),
    '#type' => 'fieldset',
    '#description' => null,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['resource']['resource_share'] = array(
    '#title' => t('Resource share'),
    '#type' => 'textfield',
    '#default_value' => $default['resource_share'],
    '#size' => 5,
    '#description' => t("Determines the proportion of your computer's resources allocated to this project. Example: if you participate in two BOINC projects with resource shares of 100 and 200, the first will get 1/3 of your resources and the second will get 2/3.")
  );
  if ($app_types->count > 1) {
    if ($app_types->cpu) {
      $form['resource']['no_cpu'] = array(
        '#title' => t('Use CPU'),
        '#type' => 'radios',
        '#options' => $form['boolean_options']['#value'],
        '#attributes' => array('class' => 'fancy'),
        '#default_value' => $default['no_cpu'] ? 0 : 1,
        '#description' => t('Enforced by version @number', array('@number' => '6.10+'))
      );
    }
    if ($app_types->cuda) {
      $form['resource']['no_cuda'] = array(
        '#title' => t('Use NVIDIA GPU'),
        '#type' => 'radios',
        '#options' => $form['boolean_options']['#value'],
        '#attributes' => array('class' => 'fancy'),
        '#default_value' => $default['no_cuda'] ? 0 : 1,
        '#description' => t('Enforced by version @number', array('@number' => '6.10+'))
      );
    }
    if ($app_types->ati) {
      $form['resource']['no_ati'] = array(
        '#title' => t('Use ATI GPU'),
        '#type' => 'radios',
        '#options' => $form['boolean_options']['#value'],
        '#attributes' => array('class' => 'fancy'),
        '#default_value' => $default['no_ati'] ? 0 : 1,
        '#description' => t('Enforced by version @number', array('@number' => '6.10+'))
      );
    }
  }
  
  $form['default_venue'] = array(
    '#title' => t('Venue settings'),
    '#type' => 'fieldset',
    '#description' => null,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['venue_options'] = array(
    '#type' => 'value',
    '#value' => array('' => '---', 'home' => t('Home'), 'work' => t('Work'), 'school' => t('School'))
  );
  $form['default_venue']['default_venue'] = array(
    '#title' => t('Default computer location'),
    '#type' => 'select',
    '#options' => $form['venue_options']['#value'],
    '#default_value' => $default['default_venue'],
    '#description' => null
  );
  
  if ($project_has_beta) {
    $form['beta'] = array(
      '#title' => t('Beta settings'),
      '#type' => 'fieldset',
      '#description' => null,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE
    );
    $form['beta']['allow_beta_work'] = array(
      '#title' => t('Run test applications?'),
      '#type' => 'radios',
      '#options' => $form['boolean_options']['#value'],
      '#attributes' => array('class' => 'fancy'),
      '#default_value' => ($prefs['allow_beta_work']) ? 1 : 0,
      '#description' => t('This helps us develop applications, but may cause jobs to fail on your computer')
    );
  }
  
  // Load project specific preferences from XML config
  $xml = boincwork_get_project_specific_config();
  foreach ($xml['project_specific_preferences'] as $type => $element) {
    boincwork_generate_prefs_element($form, $type, $element, $prefs['project_specific']);
  }
  return $form;
}

/**
  * Validate the project preferences form.
  */
function boincwork_projectprefs_form_validate($form, &$form_state) {
  
  // Verify all text user input values and notify form API of failures
  $validation_rules = array(
    'resource_share' => array(
      'datatype' => 'integer',
      'min' => 0
    )
  );
  
  // Add validation rules for project specific settings
  $validation_rules += boincwork_get_project_specific_config_validation_rules();
  
  // Perform validation
  foreach ($validation_rules as $field => $rules) {
    if (isset($rules['datatype']) AND !boincwork_validate_datatype($form_state['values'][$field], $rules['datatype'])) {
      form_set_error($field, t('Invalid data type for @field', array('@field' => $field)));
    }
    if (isset($rules['min']) AND $form_state['values'][$field] < $rules['min']) {
      form_set_error($field, t('Minimum value not met for @field', array('@field' => $field)));
    }
    if (isset($rules['max']) AND $form_state['values'][$field] > $rules['max']) {
      form_set_error($field, t('Maximum value exceeded for @field', array('@field' => $field)));
    }
  }
  // Check for app validation
  if (isset($validation_rules['apps'])) {
    if (isset($validation_rules['apps']['minimum selected'])
        AND $validation_rules['apps']['minimum selected'] > 0) {
      $apps_selected = 0;
      foreach ($validation_rules['apps']['list'] as $app) {
        if ($form_state['values'][$app]) $apps_selected++;
      }
      if ($apps_selected < $validation_rules['apps']['minimum selected']) {
        form_set_error(reset($validation_rules['apps']['list']), t('At least
          one application must be selected'));
      }
      if ($apps_selected == count($validation_rules['apps']['list'])) {
        foreach ($validation_rules['apps']['list'] as $app) {
          unset($form_state['values'][$app]);
        }
        $form_state['storage']['all apps selected'] = TRUE;
      }
    }
  }
}

/**
  * Handle post-validation submission of project preferences form.
  */
function boincwork_projectprefs_form_submit($form, &$form_state) {
  require_boinc(array('user', 'prefs'));
  
  global $site_name, $app_types, $app_array;
  
  $venue = $form_state['values']['venue'];
  
  // Load preferences from BOINC account
  $prefs = boincwork_load_prefs('project', $venue);
  
  // Resource preferences
  $prefs['resource_share'] = $form_state['values']['resource_share'];
  if ($app_types->count > 1) {
    if ($app_types->cpu) $prefs['no_cpu'] = ($form_state['values']['no_cpu']) ? 0 : 1;
    if ($app_types->cuda) $prefs['no_cuda'] = ($form_state['values']['no_cuda']) ? 0 : 1;
    if ($app_types->ati) $prefs['no_ati'] = ($form_state['values']['no_ati']) ? 0 : 1;
  }
  
  // Beta preferences
  $prefs['allow_beta_work'] = ($form_state['values']['allow_beta_work']) ? 1 : 0;
  
  // Load project specific preferences from XML config
  $xml = boincwork_get_project_specific_config();
  $updated_prefs = array(
    'project_specific' => boincwork_format_project_specific_prefs_data($form_state['values'])
  );
  $prefs = $updated_prefs + $prefs;
  
  // Don't specify apps if all are selected
  if (isset($form_state['storage']['all apps selected'])) {
    unset($prefs['project_specific']['app_id']);
    unset($form_state['storage']['all apps selected']);
  }
  
  // Save preferences back to the BOINC account
  boincwork_save_prefs($prefs, 'project', $venue);
  
  if (!$venue) {
    $boincuser->venue = $form_state['values']['default_venue'];
    venue_update($boincuser);
  }
  
  drupal_set_message(t('Your preferences have been updated.
      Client-related preferences will take effect when your computer 
      communicates with @project or you issue the "Update"
      command from the BOINC client.', array('@project' => $site_name)));
}

/**
 * The structure of the privacy preferences form
 */
function boincwork_privacyprefs_form(&$form_state) {
  require_boinc(array('user', 'prefs', 'util'));
  
  global $user;
  $account = user_load($user->uid);
  $boincuser = BoincUser::lookup_id($account->boincuser_id);
  
  // Load preferences from BOINC account
  $prefs = boincwork_load_prefs('project');
  
  //if (!$prefs AND !$initialize_if_empty) return null;
  
  // Define form defaults
  $default = array(
    'privacy' => array(
      'send_email' => ($boincuser->send_email) ? 1 : 0,
      'show_hosts' => ($boincuser->show_hosts) ? 1 : 0
    )
  );
  
  // Standard option sets
  $form['boolean_options'] = array(
    '#type' => 'value',
    '#value' => array(1 => t('yes'), 0 => t('no'))
  );
  
  $form['form control tabs prefix'] = array(
    '#value' => '<ul class="tab-list">'
  );
  $form['submit'] = array(
    '#prefix' => '<li class="first tab">',
    '#type' => 'submit',
    '#value' => t('Save changes'),
    '#suffix' => '</li>'
  );
  $form['form control tabs'] = array(
    '#value' => '<li class="tab">' . l(t('Cancel'), $_GET['q']) . '</li></ul>'
  );
  
  $form['privacy'] = array(
    '#title' => t('Privacy settings'),
    '#type' => 'fieldset',
    '#description' => null,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['privacy']['send_email'] = array(
    '#title' => t('Is it OK for @project and your team (if any) to email you?', array('@project' => variable_get('site_name', 'BOINC'))),
    '#type' => 'radios',
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['privacy']['send_email']
  );
  $form['privacy']['show_hosts'] = array(
    '#title' => t('Should @project show your computers on its web site?', array('@project' => variable_get('site_name', 'BOINC'))),
    '#type' => 'radios',
    '#options' => $form['boolean_options']['#value'],
    '#attributes' => array('class' => 'fancy'),
    '#default_value' => $default['privacy']['show_hosts']
  );
  
  return $form;
}

/**
  * Validate the privacy preferences form.
  */
function boincwork_privacyprefs_form_validate($form, &$form_state) {
  require_boinc('util');
  
  // Verify all non-boolean user input values and notify form API of failures
  // ... currently there are no non-boolean values!
}

/**
  * Handle post-validation submission of privacy preferences form.
  */
function boincwork_privacyprefs_form_submit($form, &$form_state) {
  require_boinc(array('user', 'prefs'));
  
  global $user;
  $account = user_load($user->uid);
  
  // Load BOINC account
  $boincuser = BoincUser::lookup_id($account->boincuser_id);
  
  // Privacy preferences
  $boincuser->send_email = ($form_state['values']['send_email']) ? true : false;
  $boincuser->show_hosts = ($form_state['values']['show_hosts']) ? true : false;
  
  //project_prefs_update($boincuser, $main_prefs);
  
  db_set_active('boinc');
  db_query("UPDATE user SET send_email = '{$boincuser->send_email}', show_hosts = '{$boincuser->show_hosts}' WHERE id = '{$boincuser->id}'");
  db_set_active('default');
  
  drupal_set_message(t('Your privacy preferences have been updated.'));
}
