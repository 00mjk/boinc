<?php
// $Id$

/**
 * @file
 * Enables BOINC user functionality.
 *
 * Integrates user data and features of the existing
 * BOINC platorm with the Drupal concept of a user.
 */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Includes that provide supporting functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

require_once('includes/boincuser.forms.inc');
require_once('includes/boincuser.helpers.inc');


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Hooks into core modules
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 
/**
 * Implementation of hook_menu(); determine the actions that correspond
 * with defined URL paths
 */
function boincuser_menu() {
  $items['account/profile'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'boincuser_view_profile',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['account/profile/view'] = array(
    'title' => 'View',
    'description' => 'Show a user profile',
    'page callback' => 'boincuser_view_profile',
    'access arguments' => array('access content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );
  $items['account/profile/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a user profile',
    'page callback' => 'boincuser_edit_profile',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );
  $items['join'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'join_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['join/new'] = array(
    'title' => t('I\'m new'),
    'page callback' => 'join_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );
  $items['join/boinc'] = array(
    'title' => t('I\'m a BOINC user'),
    'page callback' => 'join_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );
  $items['admin/boinc'] = array(
    'title' => 'BOINC configuration',
    'position' => 'right',
    'weight' => -8,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/boinc/environment'] = array(
    'title' => 'Environment: General',
    'description' => 'Set paths to BOINC functions and any other necessary
      variables that establish a BOINC environment.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boincuser_admin_environment'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'boincuser.admin.inc'
  );
  $items['admin/boinc/scheduler'] = array(
    'title' => 'Environment: Scheduling server URLs',
    'description' => 'Set BOINC scheduler options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boincuser_admin_scheduler'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'boincuser.admin.inc'
  );
  
  $items['create_account.php'] = array(
    'title' => 'Create Account RPC',
    'description' => 'RPC for creating user accounts.',
    'page callback' => 'boincuser_create_account',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_user(); add custom actions to standard
 * Drupal user operations
 */
function boincuser_user($op, &$edit, &$account, $category = NULL) {
  switch($op) {
  case 'load':
    // User loading; insert BOINC data into the user object
    $account->boincuser_id = db_result(db_query("SELECT boinc_id FROM {boincuser} WHERE uid = %d", $account->uid));
    db_set_active('boinc');
    $account->boincuser_name = db_result(db_query("SELECT name FROM {user} WHERE id = %d", $account->boincuser_id));
    $account->boincuser_total_credit = round(db_result(db_query("SELECT total_credit FROM {user} WHERE id = %d", $account->boincuser_id)));
    $account->boincuser_expavg_credit = round(db_result(db_query("SELECT expavg_credit FROM {user} WHERE id = %d", $account->boincuser_id)));
    $account->boincuser_cpid = md5(db_result(db_query("SELECT cross_project_id FROM {user} WHERE id = %d", $account->boincuser_id)).$account->mail);
    $account->boincuser_default_pref_set = db_result(db_query("SELECT venue FROM {user} WHERE id = %d", $account->boincuser_id));
    db_set_active('default');
    // Set post count
    $account->post_count = db_result(db_query("
      SELECT COUNT(*) +
      (
        SELECT COUNT(*) FROM {node}
        WHERE uid = '%d'
        AND type IN('page','story','forum','news')
      ) AS total_posts
      FROM {comments}
      WHERE uid = '%d'", $account->uid, $account->uid
    ));
    // If admin user, do some basic site functionality checks
    if (user_access('administer site configuration')) {
      // Ensure we have a configured BOINC environment
      boinc_get_path();
      boinc_get_scheduler_tags();
    }
    break;
    
  case 'view':
    // SAMPLE: Add BOINC data to the user profile
    /*$account->content['summary']['boinc_id'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('BIONC ID'),
      '#value' => $account->boincuser_id,
      '#attributes' => array('class' => 'boinc-data'),
      '#weight' => 10
    );
    $account->content['summary']['total_credit'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Total Credit'),
      '#value' => $account->boincuser_total_credit,
      '#attributes' => array('class' => 'boinc-data'),
      '#weight' => 10
    );*/
    break;
    
  case 'validate':
    if (isset($edit['validation_source'])) {
      switch ($edit['validation_source']) {
      case 'user_register':
        // Information being checked before adding a user
        if (!boincuser_register_validate($edit)) {
          // BOINC user validation failed for registration; set an error accordingly
          form_set_error('mail', t('An account already exists for @email. Log in or request password assistance to access your @project account.', array('@email' => $edit['mail'], '@project' => PROJECT)));
        }
        else {
          // Save profile information for use during Insert
          $_SESSION['profileInfo'] = array(
            'country' => $edit['field_country'][0]['value'],
            'zip' => $edit['field_zip'][0]['value'],                  
            'url' => $edit['field_url'][0]['value'],
            'background' => $edit['field_background'][0]['value'],
            'opinions' => $edit['field_opinions'][0]['value']
          );
          // With BOINC validation passed, make sure name is unique
          $edit['name'] = find_unique_name($edit['boincuser_name']);
        }
        break;
        
      case 'user_account':
        // Validate data before updating user account info
        boincuser_account_validate($edit, $account);
        break;
      
      default:
        
      }
      // We don't want to save validation source, so remove it
      $edit['validation_source'] = null;
    }
    break;
    
  case 'insert':
    // New user being added to the system
    $profile_info = $_SESSION['profileInfo'];
    $imported = $_SESSION['importedUser'];
    unset($_SESSION['profileInfo']);
    unset($_SESSION['importedUser']);
    
    if ($profile_info and !$imported) {
      // Create a BOINC account unless importing from BOINC
      $user_params = array(
        'email_addr' => $edit['mail'],
        'name' => $edit['boincuser_name'],
        'passwd_hash' => md5($edit['pass'].$edit['mail']),
        'country' => $profile_info['country'],
        'postal_code' => $profile_info['zip']
      );
      $boinc_user = boincuser_register_make_user($user_params);
      if (!$boinc_user) {
        // Account exists with this email addr
        form_set_error('email', t('Error creating BOINC account.'));
        return;
      }
      // Add user to community member role
      $community_role = array_search('community member', user_roles(true)); 
      $edit['roles'] = array(
        $community_role => ''
      );
      // Set profile data in BOINC db
      db_set_active('boinc');
      // TODO: add language, image support; error handling
      $reference = db_query("INSERT INTO {profile} SET userid='%d', response1='%s', response2='%s', verification=0", $boinc_user->id, $profile_info['background'], $profile_info['opinions']);
      if (!$reference) {
        drupal_set_message(t('Error creating BOINC profile.'), 'error');
      }
      $reference = db_query("UPDATE {user} SET url='%s' WHERE id='%d'", $profile_info['url'], $boinc_user->id);
      if (!$reference) {
        drupal_set_message(t('Error updating BOINC account.'), 'error');
      }
      db_set_active('default');
      // Cross reference Drupal account with BOINC
      $reference = db_query("INSERT INTO {boincuser} SET uid='%d', boinc_id='%d'", $account->uid, $boinc_user->id);
      if (!$reference) {
        drupal_set_message(t('Error connecting BOINC account.'), 'error');
        return;
      }
      // Don't save custom fields to the Drupal user object
      $edit['boincuser_name'] = null;
    }
    break;
    
  case 'update':
    if (isset($edit['update_source'])) {
      if ($edit['update_source'] == 'user_account') {
        // Ensure that BOINC data is altered
        $boinc_user = lookup_user_id($account->boincuser_id);
        $changing_email = ($edit['mail'] AND $edit['mail'] != $boinc_user->email_addr) ? true : false;
        $changing_pass = ($edit['pass']) ? true : false;
        if ($changing_email OR $changing_pass) {
          // Set password hash appropriately
          $passwd = ($edit['pass']) ? $edit['pass'] : $edit['current_pass'];
          $passwd_hash = md5($passwd.$edit['mail']);
          $email_addr = $edit['mail'];
          // Update user account information
          $result = $boinc_user->update(
              "email_addr='{$email_addr}', passwd_hash='{$passwd_hash}'"
          );
        }
        if ($edit['boincuser_name'] != $boinc_user->name) {
          $boincuser_name = $edit['boincuser_name'];
          $result = $boinc_user->update(
              "name='{$boincuser_name}'"
          );
        }
      }
      // We don't want to save update source or custom fields, so remove them
      $edit['update_source'] = null;
      $edit['boincuser_name'] = null;
    }
    break;
    
  default:
    
  }
}

/**
 * Implementation of hook_nodeapi(); add custom actions to node operations
 * Obsolete in Drupal 7...
 */
function boincuser_nodeapi(&$node, $op, $a3 = null, $a4 = null) {
  // In Drupal 7, these operation cases will all exist as their own hooks,
  // so let's approximate that here so that this function can simply be removed
  // upon migration to 7
  switch($op) {
  case 'update':
    boincuser_node_update($node);
  }
}

/**
 * Implementation of hook_node_update(); add custom actions when a node
 * is updated (forward compatible to Drupal 7)
 */
function boincuser_node_update($node) {
  switch($node->type) {
  case 'profile':
    // Update the BOINC database directly
    $account = user_load($node->uid);
    // Save user account data
    $country = $node->field_country[0]['value'];
    $postal_code = $node->field_zip[0]['value'];
    $url = $node->field_url[0]['value'];
    db_set_active('boinc');
    $account_updated = db_query("
      UPDATE user
      SET country = '%s', postal_code = '%s', url = '%s', has_profile = 1
      WHERE id = %d",
      $country, $postal_code, $url, $account->boincuser_id
    );
    db_set_active('default');
    if (!$account_updated) {
      drupal_set_message(t('Error saving BOINC account info.'), 'error');
    }
    // Save profile data
    $response1 = $node->field_background[0]['value'];
    $response2 = $node->field_opinions[0]['value'];
    db_set_active('boinc');
    $profile_updated = db_query("
      INSERT INTO profile
      SET userid = %d, response1 = '%s', response2 = '%s'
      ON DUPLICATE KEY UPDATE
        response1 = '%s', response2 = '%s'",
      $account->boincuser_id, $response1, $response2,
      $response1, $response2
    );
    db_set_active('default');
    if (!$profile_updated) {
      drupal_set_message(t('Error saving BOINC profile.'), 'error');
    }
    break;
    
  default:
    
  }
}

/**
* Implementation of hook_views_api()
*/
function boincuser_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'boincuser')
  );
}

/**
* Implementation of hook_form_alter()
*/
function boincuser_form_alter(&$form, $form_state, $form_id) {
  global $user;
  switch ($form_id) {
  // Login form
  case 'user_login':
  case 'user_login_block':
    // Replace name with email in login form
    unset($form['name']);
    array_unshift($form, array(
      'email' => array(
        '#type' => 'textfield',
        '#title' => t('Email address'),
        '#size' => ($form_id == 'user_login_block') ? 15 : 60,
        '#maxlength' => EMAIL_MAX_LENGTH,
        '#required' => TRUE,
        '#attributes' => array('tabindex' => '1'),
        '#description' => t('Enter your @s email address.', array('@s' => variable_get('site_name', 'BOINC')))
      ),
      'validation_source' => array(
        '#type' => 'hidden',
        '#value' => 'user_login'
      )
    ));
    $form['#redirect'] = 'home';
    
    // Set the tab indices to follow a logical procession...
    isset($form['pass']['#attributes']) ? array_push($form['pass']['#attributes'], array('tabindex' => '2')) : $form['pass']['#attributes'] = array('tabindex' => '2');
    isset($form['submit']['#attributes']) ? array_push($form['submit']['#attributes'], array('tabindex' => '3')) : $form['submit']['#attributes'] = array('tabindex' => '3');
    // If the user login form is being submitted, use BOINC validation handler.
    if (isset($form_state['post']['email']) and isset($form_state['post']['pass'])) {
      // Find the local validation function's entry so we can replace it.
      $array_key = array_search('user_login_authenticate_validate', $form['#validate']);
      if ($array_key === FALSE) {
        // Could not find it. Some other module must have run form_alter().
        // We will simply add our validation just before the final validator.
        $final_validator = array_pop($form['#validate']);
        $form['#validate'][] = 'boincuser_login_validate';
        $form['#validate'][] = $final_validator;
      } else {
        // Replace the local validation function with BOINC validation
        $form['#validate'][$array_key] = 'boincuser_login_validate';
      }
    }
    break;
    
  // User profile form
  case 'user_profile_form':
    
    // Use the displaly name as the title, not the username
    $account = user_load($form['#uid']);
    drupal_set_title($account->boincuser_name);
    
    // A bit hackish... but don't require the user to enter his password if
    // coming from the password reset function
    $reset_pass = (strpos($_SERVER['HTTP_REFERER'], "/user/reset/{$form['#uid']}") === FALSE) ? 0 : 1;
    if ($reset_pass) {
      $_SESSION['reset_pass'] = 1;
    }
    
    $form['account']['name']['#size'] = 40;
    $form['account']['mail']['#size'] = 40;
    
    // Add the BOINC user name (non-unique, user editable)
    if (!$edit['boincuser_name']) $edit['boincuser_name'] = $account->boincuser_name;
    $form['account']['boincuser_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => $edit['boincuser_name'],
      '#maxlength' => USERNAME_MAX_LENGTH,
      '#required' => TRUE,
      '#description' => t(''),
      '#size' => 40
    );
    if (!$reset_pass AND ($user->uid == $account->uid OR !user_access('administer users'))) {
      // Add a password authenticator, required to change email or pw
      $form['account']['current_pass'] = array(
        '#type' => 'password',
        '#title' => t('Current password'),
        '#description' => t('Enter your current password if changing your email
          address or password.'),
        '#size' => 25
      );
    }
    
    $form['account']['boincuser_name']['#weight'] = 0;
    $form['account']['mail']['#weight'] = 5;
    $form['account']['current_pass']['#weight'] = 10;
    $form['account']['pass']['#weight'] = 15;
    
    // Remove redundant / unnecessary form elements
    //echo '<pre>' . print_r($form, true) . '</pre>';
    unset($form['theme_select']);
    
    // These are on the Community preferences form (boincwork module)
    unset($form['signature_settings']);
    unset($form['enable_pm_mail']);
    unset($form['friend_notification']);
    
    // Internal fields to indicate where these user changes are taking place
    array_unshift($form, array(
      'validation_source' => array(
        '#type' => 'hidden',
        '#value' => 'user_account'
      ),
      'update_source' => array(
        '#type' => 'hidden',
        '#value' => 'user_account'
      )
    ));
    
    break;
    
  case 'profile_node_form':
    
    // Use the displaly name as the title, not the username
    $account = user_load($form['uid']['#value']);
    drupal_set_title($account->boincuser_name);
    
    if (module_exists('captcha')) {
      // Add an optional captcha
      $form['profile_captcha'] = array(
        '#type' => 'captcha',
        '#weight' => 999,
      );
    }
    
    unset($form['title']);
    unset($form['body_field']);
    $form['#redirect'] = 'account/profile';
    break;
  
  // Registration form
  case 'user_register':
    array_unshift($form, array(
      'boincuser_name' => array(
        '#type' => 'textfield', 
        '#title' => t('Name'), 
        '#default_value' => $edit['boincuser_name'], 
        '#maxlength' => USERNAME_MAX_LENGTH, 
        '#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, and underscores.'), 
        '#required' => TRUE
      ),
      'validation_source' => array(
        '#type' => 'hidden',
        '#value' => 'user_register'
      )
    ));
    // Set name temporarily to dummy value to beat validation
    $form['name'] = array(
      '#type' => 'hidden',
      '#value' => rand() . '.' . time()
    );
    break;
    
  // Request new password form
  case 'user_pass':
    // Replace name/email text box with email only; retain "name" label
    // for compatibility with standard Drupal submit function
    unset($form['name'], $form['submit']);
    array_unshift($form, array(
      'heading' => array(
        '#type' => 'markup',
        '#value' => '<h3>' . t('1) If you know your account&apos;s email address, and you can receive email there:') . '<h3>'
      ),
      'name' => array(
        '#type' => 'textfield',
        '#title' => t('Email address'),
        '#size' => 60,
        '#maxlength' => EMAIL_MAX_LENGTH,
        '#required' => TRUE,
        '#description' => t('Enter the email address and click OK. You will be sent email instructions for resetting your password.')
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('OK'),
        '#name' => 'op'
      )
    ));
    // If the form is being submitted, use BOINC validation handler.
    if (isset($form_state['post']['name'])) {
      // Prepend the BOINC validation function to local validation
      array_unshift($form['#validate'], 'boincuser_request_pass_validate');
    }
    break;
    
  case 'views_exposed_form':
    $form['submit']['#value'] = t('Search');
    break;
  }
}

/**
 * Implementation of hook_theme()
 * Register theme functions for use in this module.
 */
function boincuser_theme($existing, $type, $theme, $path) {
  return array(
    'boincuser_user_pass' => array(
      'arguments' => array()
    )
  );
}

/**
 * Implementation of hook_token_values
 */
function boincuser_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'user') {
    $account = user_load($object->uid);
    $tokens['display-name'] = $account->boincuser_name;
    return $tokens;
  }
}

/**
 * Implementation of hook_token_list
 */
function boincuser_token_list($type = 'all') {
  if ($type == 'user' || $type == 'all') {
    $tokens['user']['display-name']      = t("The user's name that should be displayed");
    return $tokens;
  }
}

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Page callbacks from hook_menu()
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
 * Page callback for displaying a user profile
 * For some reason, menu context cannot be configured as expected for
 * user profile pages, so use a wrapper for display
 */
function boincuser_view_profile($account = null) {
  // Create the user profile page
  if (!$account) {
    global $user;
    $account = $user;
  }
  // For now, just call the user module profile view function
  user_build_content($account);
  return theme('user_profile', $account);
}

/**
 * Page callback for editing a user profile
 */
function boincuser_edit_profile($account = null) {
  // Create the user profile form
  if (!$account) {
    global $user;
    $account = $user;
  }
  // Render the form
  module_load_include('pages.inc', 'node', 'node');
  return content_profile_page_edit('profile', $account);
}

/**
  * Join page menu callback.
  * Display instructions on joining for new or existing BOINC users
  */
function join_page($type = null) {
  global $base_url;
  $output = '<div class="join">';
  switch ($type) {
  case 'boinc':
    $output .= '<p>' . t('If you\'re already running BOINC, select Attach to
      Project.') . '</p>';
    $output .= '<p>' . t('If you\'re running a command-line or pre-5.0 version
      of BOINC, !create_an_account first.', array('!create_an_account' => 
        l(t('create an account'), 'user/register'))) . '</p>';
    break;
  case 'new':
  default:
    $output .= '<ol>';
    $output .= '  <li>' . t('Download the desktop software');
    $output .= '    <p>';
    $output .= '      <a class="button" href="http://boinc.berkeley.edu/download.php">Download</a>';
    $output .= '    </p>';
    //$output .= '    <p class="platforms">';
    //$output .= '      <a href="files/boinc_windows_intelx86.exe" class="platform windows">Windows</a>';
    //$output .= '      <a href="files/boinc_macOSX_universal.zip" class="platform mac">Mac</a>';
    //$output .= '      <a href="files/boinc_i686-pc-linux-gnu.sh" class="platform linux">Linux</a>';
    //$output .= '    </p>';
    $output .= '  </li>';
    $output .= '  <li>' . t('Run the installer') . '</li>';
    $output .= '  <li>' . t('When prompted enter @siteurl', array(
      '@siteurl' => $base_url)) . '</li>';
    $output .=  '</ol>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Page callback for the create account RPC (create_account.php).
 * Create a new user account based on supplied parameters.
 */
function boincuser_create_account() {
  require_boinc('user');
  require_boinc('xml');
  $params = array(
    'email_addr' => isset($_GET['email_addr']) ? $_GET['email_addr'] : '',
    'user_name' => isset($_GET['user_name']) ? $_GET['user_name'] : '',
    'passwd_hash' => isset($_GET['passwd_hash']) ? $_GET['passwd_hash'] : ''
  );
  
  // Begin output
  xml_header();
  
  // Account creation disabled
  
  // Invalid invite code
  
  // Validate input
  if (user_validate_mail($params['email_addr']) or !is_valid_email_addr($params['email_addr'])) {
    xml_error(-205);
  }
  if ($error = user_validate_name($params['user_name'])) {
    xml_error(-205, $error);
  }
  if (strlen($params['passwd_hash']) != 32) {
    xml_error(-1, 'password hash length not 32');
  }
  
  // Process input
  $boinc_user = lookup_user_email_addr($params['email_addr']);
  if ($boinc_user) {
    // Return authenticator for existing users
    if ($params['passwd_hash'] == $boinc_user->passwd_hash) {
      $output = array('authenticator' => $boinc_user->authenticator);
    } else {
      xml_error(-137);
    }
  } else {
    // Verify that there isn't somehow a Drupal user already (not possible with proper function)
    if ($existing_user = user_load(array('mail' => $params['email_addr']))) {
      xml_error(-137, 'account error');
    }
    // Create new account
    $newUser = array(
      'name' => $params['user_name'],
      'pass' => null, // $params['passwd_hash'], // note: passing a hash here requires ALL passwords to be hashed via hook prior to interacting with the hash stored in the db
      'mail' => $params['email_addr'],
      'status' => 1,
      'init' => $params['email_addr']
    );
    $user = user_save(null, $newUser);
    $boinc_user = make_user($params['email_addr'], $params['user_name'], $params['passwd_hash'], 'International');
    if (!$boinc_user) {
      xml_error(-137);
    }
    // Cross reference Drupal account with BOINC
    $reference = db_query("INSERT INTO {boincuser} SET uid=%d, boinc_id=%d", $user->uid, $boinc_user->id);
    if (!$reference) {
      xml_error(-1, 'error connecting BOINC account to Drupal');
    }
  }
  echo " <account_out>\n";
  echo "   <authenticator>{$boinc_user->authenticator}</authenticator>\n";
  echo "</account_out>\n";
}


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * User data access support functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
 *
 */
function boincuser_get_weak_auth($boinc_id = null) {
  if (!$boinc_id) {
    global $user;
    $account = user_load($user->uid);
    $boinc_id = $account->boincuser_id;
  }
  
  require_boinc('user');
  $boinc_user = BoincUser::lookup_id($account->boincuser_id);
  
  return weak_auth($boinc_user);
}

/**
 * Retrieve the profile image for a user account
 * User profile image is managed by the content_profile module rather than core
 * Drupal User so must be inserted into comments, etc. (not so by default)
 */
function boincuser_get_user_profile_image($uid, $avatar = TRUE) {
  // Show the avatar by default, but allow override to show profile-only image
  $image_field = ($avatar) ? 'field_image_fid' : 'field_profile_image_fid';
  $image_fid = db_result(db_query("
    SELECT ctp.%s
    FROM {content_type_profile} ctp
    INNER JOIN {node} n ON ctp.nid = n.nid
    WHERE n.uid = %d AND n.type = '%s'",
    $image_field, $uid, 'profile'));
  $user_image['image'] = field_file_load($image_fid);
  if (!$user_image['image']['filepath']) {
    // Load the default image if one does not exist
    $content_node_widget_settings = db_result(db_query("SELECT widget_settings FROM {content_node_field_instance} WHERE field_name = '%s'", ($avatar ? 'field_image' : 'field_profile_image')));
    $content_node_widget_settings = unserialize($content_node_widget_settings);
    $user_image['image'] = $content_node_widget_settings['default_image'];
  }
  $user = user_load($uid);
  $user_image['alt'] = $user->name;
  return $user_image;
}

/**
 * Generate a table of a user's projects
 */
function boincuser_get_projects_table($account = null) {
  $projects = boincuser_get_projects($account);
  if (!$projects) return 'no projects...';
  
  $output = '';
  $output .= '<table class="user-projects">' . "\n";
  $output .= '<thead>' . "\n";
  $output .= '  <tr>' . "\n";
  $output .= '    <th>' . t('Name') . '</th>' . "\n";
  $output .= '    <th>' . t('Avg credit') . '</th>' . "\n";
  $output .= '    <th>' . t('Total credit') . '</th>' . "\n";
  $output .= '  </tr>' . "\n";
  $output .= '</thead>' . "\n";
  $output .= '<tbody>' . "\n";
  foreach ($projects AS $project) {
    $output .= '  <tr>' . "\n";
    $output .= "    <td>{$project->name}</td>" . "\n";
    $output .= "    <td>{$project->expavg_credit}</td>" . "\n"; 
    $output .= "    <td>{$project->total_credit}</td>" . "\n";
    $output .= '  </tr>' . "\n";
  }
  $output .= '</tbody>' . "\n";
  $output .= '</table>' . "\n";
  $more_link = ($account) ? "user/{$account->uid}/stats" : 'account/stats';
  //$output .= "<div class=\"more-link\"><a href=\"{$more_link}\">More stats</a></div>" . "\n";
  return $output;
}

/**
 * Make an RPC call to the stats server and retreive user data
 */
function boincuser_get_stats_user_data($cpid = null) {
  
  // [TODO] Set this stuff in site config!
  $stats_server = 'stats.gridrepublic.org';
  $stats_rpc = 'rpc/get_user.php';
  
  // Construct query string
  $get = array(
    'cpid' => $cpid
  );
  $args = array();
  foreach ($get as $arg => $value) $args[] = "{$arg}=" . rawurlencode($value);
  $query = '?' . implode('&', $args);
  
  // Load XML from RPC
  return simplexml_load_file("http://{$stats_server}/{$stats_rpc}{$query}");
  
}

/**
 * Get the list of all BOINC projects of a user
 */
function boincuser_get_projects($account = null) {
  
  // Use the current user by default
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }
  
  // Tie into the BOINC code and use CPID to get cross project stats
  require_boinc('user');
  $boinc_user = BoincUser::lookup_id($account->boincuser_id);
  $account_stats = boincuser_get_stats_user_data($account->boincuser_cpid);
  
  return ($account_stats AND isset($account_stats->project)) ? $account_stats->project : null;
}
