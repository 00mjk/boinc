include(CheckIncludeFiles)
include(CheckSymbolExists)
include(CheckCXXSourceCompiles)
include(CheckTypeSize)
include(CheckFunctionExists)
include(CheckStructHasMember)

check_include_files("dirent.h" HAVE_DIRENT_H) # simple replacement for obsolescent AC_HEADER_DIRENT
check_include_files("stdlib.h;stdarg.h;string.h;float.h;" STDC_HEADERS) # simple replacement for obsolescent AC_HEADER_STDC
check_include_files("sys/wait.h" HAVE_SYS_WAIT_H)  # simple replacement for obsolescent AC_HEADER_SYS_WAIT
set(TIME_WITH_SYS_TIME 1) # replacement for obsolescent AC_HEADER_TIME
check_include_files("sys/types.h" HAVE_SYS_TYPES_H)
check_include_files("sys/un.h" HAVE_SYS_UN_H)
check_include_files("arpa/inet.h" HAVE_ARPA_INET_H)
check_include_files("dirent.h" HAVE_DIRENT_H)
check_include_files("grp.h" HAVE_GRP_H)
check_include_files("fcntl.h" HAVE_FCNTL_H)
check_include_files("inttypes.h" HAVE_INTTYPES_H)
check_include_files("stdint.h" HAVE_STDINT_H)
check_include_files("stdlib.h" HAVE_STDLIB_H)
check_include_files("memory.h" HAVE_MEMORY_H)
check_include_files("netdb.h" HAVE_NETDB_H)
check_include_files("netinet/in.h" HAVE_NETINET_IN_H)
check_include_files("netinet/tcp.h" HAVE_NETINET_TCP_H)
check_include_files("netinet/ether.h" HAVE_NETINET_ETHER_H)
check_include_files("signal.h" HAVE_SIGNAL_H)
check_include_files("string.h" HAVE_STRING_H)
check_include_files("strings.h" HAVE_STRINGS_H)
check_include_files("sys/auxv.h" HAVE_SYS_AUXV_H)
check_include_files("sys/file.h" HAVE_SYS_FILE_H)
check_include_files("sys/fcntl.h" HAVE_SYS_FCNTL_H)
check_include_files("sys/ipc.h" HAVE_SYS_IPC_H)
check_include_files("sys/ioctl.h" HAVE_SYS_IOCTL_H)
check_include_files("sys/msg.h" HAVE_SYS_MSG_H)
check_include_files("sys/param.h" HAVE_SYS_PARAM_H)
check_include_files("sys/resource.h" HAVE_SYS_RESOURCE_H)
check_include_files("sys/select.h" HAVE_SYS_SELECT_H)
check_include_files("sys/sem.h" HAVE_SYS_SEM_H)
check_include_files("sys/shm.h" HAVE_SYS_SHM_H)
check_include_files("sys/sockio.h" HAVE_SYS_SOCKIO_H)
check_include_files("sys/socket.h" HAVE_SYS_SOCKET_H)
check_include_files("sys/stat.h" HAVE_SYS_STAT_H)
check_include_files("sys/statvfs.h" HAVE_SYS_STATVFS_H)
check_include_files("sys/statfs.h" HAVE_SYS_STATFS_H)
check_include_files("sys/systeminfo.h" HAVE_SYS_SYSTEMINFO_H)
check_include_files("sys/time.h" HAVE_SYS_TIME_H)
check_include_files("sys/types.h" HAVE_SYS_TYPES_H)
check_include_files("sys/utsname.h" HAVE_SYS_UTSNAME_H)
check_include_files("sys/vmmeter.h" HAVE_SYS_VMMETER_H)
check_include_files("sys/wait.h" HAVE_SYS_WAIT_H)
check_include_files("unistd.h" HAVE_UNISTD_H)
check_include_files("utmp.h" HAVE_UTMP_H)
check_include_files("errno.h" HAVE_ERRNO_H)
check_include_files("procfs.h" HAVE_PROCFS_H)
check_include_files("ieeefp.h" HAVE_IEEEFP_H)
check_include_files("setjmp.h" HAVE_SETJMP_H)
check_include_files("float.h" HAVE_FLOAT_H)
check_include_files("sal.h" HAVE_SAL_H)
check_include_files("execinfo.h" HAVE_EXECINFO_H)
check_include_files("dlfcn.h" HAVE_DLFCN_H)
check_include_files("locale.h" HAVE_LOCALE_H)
check_include_files("xlocale.h" HAVE_XLOCALE_H)

if(GLUT_FOUND)
    check_include_files("gl.h" HAVE_GL_H)
    check_include_files("GL/gl.h" HAVE_GL_GL_H)
    check_include_files("OpenGL/gl.h" HAVE_OPENGL_GL_H)
    check_include_files("glx.h" HAVE_GLX_H)
    check_include_files("GL/glx.h" HAVE_GL_GLX_H)
    check_include_files("glu.h" HAVE_GLU_H)
    check_include_files("GL/glu.h" HAVE_GL_GLU_H)
    check_include_files("OpenGL/glu.h" HAVE_OPENGL_GLU_H)
endif()

set(TEMP_HEADER_LIST "")
if(HAVE_SYS_SOCKET_H)
    set(TEMP_HEADER_LIST "sys/socket.h;")
endif()
check_include_files("${TEMP_HEADER_LIST}net/if.h" HAVE_NET_IF_H)
check_include_files("${TEMP_HEADER_LIST}net/if_arp.h" HAVE_NET_IF_ARP_H)

set(TEMP_HEADER_LIST "")
if(HAVE_SYS_PARAM_H)
    set(TEMP_HEADER_LIST "sys/param.h;")
endif()
check_include_files("${TEMP_HEADER_LIST}sys/sysctl.h;" HAVE_SYS_SYSCTL_H)
check_include_files("${TEMP_HEADER_LIST}sys/mount.h;" HAVE_SYS_MOUNT_H)
check_include_files("${TEMP_HEADER_LIST}sys/swap.h;" HAVE_SYS_SWAP_H)
check_include_files("${TEMP_HEADER_LIST}sys/sensors.h;" HAVE_SYS_SENSORS_H)

set(TEMP_HEADER_LIST "")
if(HAVE_NETINET_IN_H)
    set(TEMP_HEADER_LIST "netinet/in.h;")
endif()
check_include_files("${TEMP_HEADER_LIST}resolv.h;" HAVE_RESOLV_H)

set(TEMP_HEADER_LIST "")
if(HAVE_SYS_TYPES_H)
    set(TEMP_HEADER_LIST "sys/types.h;")
endif()
if(HAVE_SYS_SOCKET_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}sys/socket.h;")
endif()
if(HAVE_NETINET_IN_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}netinet/in.h;")
endif()
if(HAVE_ARPA_INET_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}arpa/inet.h;")
endif()
if(HAVE_NET_IF_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}net/if.h;")
endif()
check_include_files("${TEMP_HEADER_LIST}netinet/if_ether.h;" HAVE_NETINET_IF_ETHER_H)

set(CMAKE_REQUIRED_FLAGS "-msse3")
check_include_files("intrin.h" HAVE_INTRIN_H)
check_include_files("x86intrin.h" HAVE_X86INTRIN_H)
check_include_files("pmmintrin.h" HAVE_PMMINTRIN_H)
check_include_files("xmmintrin.h" HAVE_XMMINTRIN_H)
check_include_files("emmintrin.h" HAVE_EMMINTRIN_H)

set(CMAKE_REQUIRED_FLAGS "-mavx")
check_include_files("immintrin.h" HAVE_IMMINTRIN_H)

set(TEMP_HEADER_LIST "")
if(HAVE_INTRIN_H)
    set(TEMP_HEADER_LIST "intrin.h;${TEMP_HEADER_LIST}")
endif()
if(HAVE_X86INTRIN_H)
    set(TEMP_HEADER_LIST "x86intrin.h;${TEMP_HEADER_LIST}")
endif()
if(HAVE_PMMINTRIN_H)
    set(TEMP_HEADER_LIST "pmmintrin.h;${TEMP_HEADER_LIST}")
endif()
if(HAVE_XMMINTRIN_H)
    set(TEMP_HEADER_LIST "xmmintrin.h;${TEMP_HEADER_LIST}")
endif()
if(HAVE_EMMINTRIN_H)
    set(TEMP_HEADER_LIST "emmintrin.h;${TEMP_HEADER_LIST}")
endif()
if(HAVE_IMMINTRIN_H)
    set(TEMP_HEADER_LIST "immintrin.h;${TEMP_HEADER_LIST}")
endif()

check_symbol_exists(xgetbv "${TEMP_HEADER_LIST}" HAVE_DECL_XGETBV)
check_symbol_exists(_xgetbv "${TEMP_HEADER_LIST}" HAVE_DECL__XGETBV)
check_symbol_exists(__xgetbv "${TEMP_HEADER_LIST}" HAVE_DECL___XGETBV)
check_symbol_exists(cpuid "${TEMP_HEADER_LIST}" HAVE_DECL_CPUID)
check_symbol_exists(_cpuid "${TEMP_HEADER_LIST}" HAVE_DECL__CPUID)
check_symbol_exists(__cpuid "${TEMP_HEADER_LIST}" HAVE_DECL___CPUID)

check_cxx_source_compiles("
int main () {
    asm (\"xgetbv\"); return 0;
}" ASM_SUPPORTS_XGETBV)
set(CMAKE_REQUIRED_FLAGS "")

if(WIN32)
    check_include_files("winsock2.h" HAVE_WINSOCK2_H)
    check_include_files("winsock.h" HAVE_WINSOCK_H)
    check_include_files("windows.h" HAVE_WINDOWS_H)
    check_include_files("ws2tcpip.h" HAVE_WS2TCPIP_H)
    check_include_files("winternl.h" HAVE_WINTERNL_H)
    check_include_files("crtdbg.h" HAVE_CRTDBG_H)

    set(TEMP_HEADER_LIST "")
    if(HAVE_WINDOWS_H)
        set(TEMP_HEADER_LIST "windows.h;")
    endif()
    check_include_files("${TEMP_HEADER_LIST}winhttp.h;" HAVE_WINHTTP_H)
    check_include_files("${TEMP_HEADER_LIST}ntapi.h;" HAVE_NTAPI_H)
    check_include_files("${TEMP_HEADER_LIST}ddk/ntapi.h;" HAVE_DDK_NTAPI_H)
    check_include_files("${TEMP_HEADER_LIST}dbghelp.h;" HAVE_DBGHELP_H)
    check_include_files("${TEMP_HEADER_LIST}delayimp.h;" HAVE_DELAYIMP_H)

    set(CMAKE_REQUIRED_DEFINITIONS "-DSECURITY_WIN32=1")
    check_include_files("${TEMP_HEADER_LIST}security.h;" HAVE_SECURITY_H)
    if(HAVE_SECURITY_H)
        set(SECURITY_WIN32 1)
    endif(HAVE_SECURITY_H)
    set(CMAKE_REQUIRED_DEFINITIONS)

    if(HAVE_WINTERNL_H)
        set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}winternl.h;")
    elseif(HAVE_DDK_NTAPI_H)
        set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}ddk/ntapi.h;")
    elseif(HAVE_NTAPI_H)
        set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}ntapi.h;")
    endif()
    set(CMAKE_EXTRA_INCLUDE_FILES ${TEMP_HEADER_LIST})
    check_type_size("SYSTEM_PROCESSES" SYSTEM_PROCESSES)
    check_type_size("CLIENT_ID" CLIENT_ID)
    check_type_size("VM_COUNTERS" VM_COUNTERS)
    check_type_size("SYSTEM_THREADS" SYSTEM_THREADS)
    check_type_size("THREAD_STATE" THREAD_STATE)
    check_type_size("THREAD_WAIT_REASON" THREAD_WAIT_REASON)
    set(CMAKE_EXTRA_INCLUDE_FILES)

endif(WIN32)

#check_include_files("nvapi.h" HAVE_NVAPI_H) # omitted because not used, if needed please use a findNVAPI.cmake module

set(TEMP_HEADER_LIST "")
if(HAVE_WINDOWS_H)
    set(TEMP_HEADER_LIST "windows.h;")
endif()
if(HAVE_SYS_WINSOCK2_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}winsock2.h;")
endif()
if(HAVE_WS2TCPIP_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}ws2tcpip.h;")
endif()
if(HAVE_WINSOCK_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}winsock.h;")
endif()
if(HAVE_WINHTTP_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}winhttp.h;")
endif()
if(HAVE_STDINT_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}stdint.h;")
endif()
if(HAVE_SYS_TYPES_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}sys/types.h;")
endif()
if(HAVE_SYS_SOCKET_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}sys/socket.h;")
endif()
if(HAVE_NETINET_IN_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}netinet/in.h;")
endif()
if(HAVE_ARPA_INET_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}arpa/inet.h;")
endif()
if(HAVE_NET_IF_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}net/if.h;")
endif()
set(CMAKE_EXTRA_INCLUDE_FILES ${TEMP_HEADER_LIST})
check_type_size("socklen_t" SOCKLEN_T)
set(CMAKE_EXTRA_INCLUDE_FILES)

set(TEMP_HEADER_LIST "")
if(HAVE_SYS_TYPES_H)
    set(TEMP_HEADER_LIST "sys/types.h;")
endif()
if(HAVE_SYS_SOCKET_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}sys/socket.h;")
endif()
if(HAVE_NETINET_IN_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}netinet/in.h;")
endif()
if(HAVE_ARPA_INET_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}arpa/inet.h;")
endif()
if(HAVE_NET_IF_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}net/if.h;")
endif()
if(HAVE_NETINET_IF_ETHER_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}netinet/if_ether.h;")
endif()
if(HAVE_NETINET_ETHER_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}netinet/ether.h;")
endif()
set(CMAKE_EXTRA_INCLUDE_FILES ${TEMP_HEADER_LIST})
check_type_size("struct lifconf" STRUCT_LIFCONF)
check_type_size("struct lifreq" STRUCT_LIFREQ)
check_type_size("struct ifconf" STRUCT_IFCONF)
check_type_size("struct ifreq" STRUCT_IFREQ)
check_type_size("struct ether_addr" STRUCT_ETHER_ADDR)
set(CMAKE_EXTRA_INCLUDE_FILES)

#check_include_files("${TEMP_HEADER_LIST}" HAVE_)

## function checks
check_function_exists("vprintf" HAVE_VPRINTF)
check_function_exists("ether_ntoa" HAVE_ETHER_NTOA)
check_function_exists("setpriority" HAVE_SETPRIORITY)
check_function_exists("sched_setscheduler" HAVE_SCHED_SETSCHEDULER)
check_function_exists("strlcpy" HAVE_STRLCPY)
check_function_exists("strlcat" HAVE_STRLCAT)
check_function_exists("strcasestr" HAVE_STRCASESTR)
check_function_exists("strcasecmp" HAVE_STRCASECMP)
check_function_exists("sigaction" HAVE_SIGACTION)
check_function_exists("getutent" HAVE_GETUTENT)
check_function_exists("setutent" HAVE_SETUTENT)
check_function_exists("getisax" HAVE_GETISAX)
check_function_exists("strdup" HAVE_STRDUP)
check_function_exists("_strdup" HAVE__STRDUP)
check_function_exists("strdupa" HAVE_STRDUP)
check_function_exists("_strdupa" HAVE__STRDUPA)
check_function_exists("daemon" HAVE_DAEMON)
check_function_exists("stat64" HAVE_STAT64)
check_function_exists("putenv" HAVE_PUTENV)
check_function_exists("setenv" HAVE_SETENV)
check_function_exists("unsetenv" HAVE_UNSETENV)
check_function_exists("res_init" HAVE_RES_INIT)
check_function_exists("strtoull" HAVE_STRTOULL)
check_function_exists("localtime" HAVE_LOCALTIME)
check_function_exists("localtime_r" HAVE_LOCALTIME_R)
check_function_exists("gmtime" HAVE_GMTIME)
check_function_exists("gmtime_r" HAVE_GMTIME_R)
#check_function_exists("" HAVE_)

set(TEMP_HEADER_LIST "stdio.h;stdlib.h;stddef.h;")
if(HAVE_SYS_TYPES_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}sys/types.h;")
endif()
if(HAVE_SYS_STAT_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}sys/stat.h;")
endif()
if(HAVE_STRING_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}string.h;")
endif()
if(HAVE_STRINGS_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}strings.h;")
endif()
if(HAVE_INTTYPES_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}inttypes.h;")
endif()
if(HAVE_STDINT_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}stdint.h;")
endif()
if(HAVE_UNISTD_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}unistd.h;")
endif()
if(HAVE_WINDOWS_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}windows.h;")
endif()
if(HAVE_FLOAT_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}float.h;")
endif()
if(HAVE_IEEEFP_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}ieeefp.h;")
endif()
if(HAVE_MATH_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}math.h;")
endif()
if(HAVE_LOCALE_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}locale.h;")
endif()
if(HAVE_XLOCALE_H)
    set(TEMP_HEADER_LIST "${TEMP_HEADER_LIST}xlocale.h;")
endif()
set(CMAKE_EXTRA_INCLUDE_FILES ${TEMP_HEADER_LIST})
check_function_exists("_fpreset" HAVE_DECL__FPRESET)
check_function_exists("fpreset" HAVE_DECL_FPRESET)
check_function_exists("_configthreadlocale" HAVE_DECL__CONFIGTHREADLOCALE)
set(CMAKE_EXTRA_INCLUDE_FILES)

## type checks
check_type_size("size_t" SIZE_T)
check_struct_has_member("struct tm" "tm_zone" "sys/types.h;time.h" HAVE_STRUCT_TM_TM_ZONE)

## arbitrary other checks
foreach(loc "/etc/utmp" "/var/adm/utmp" "/var/run/utmp")
    if(EXISTS ${loc})
        set(UTMP_LOCATION ${loc})
    endif()
endforeach(loc)

if(EXISTS "/proc/self/exe")
    set(HAVE__PROC_SELF_EXE 1)
endif()
if(EXISTS "/proc/self/psinfo")
    set(HAVE__PROC_SELF_PSINFO 1)
endif()
if(EXISTS "/proc/self/stat")
    set(HAVE__PROC_SELF_STAT 1)
endif()
if(EXISTS "/proc/meminfo")
    set(HAVE__PROC_MEMINFO 1)
endif()
